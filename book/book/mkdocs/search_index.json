{
    "docs": [
        {
            "location": "/SUMMARY/", 
            "text": "Summary\n\n\n\n\n\u524d\u8a00\n\n\n\u7b2c\u4e00\u90e8\u5206\n\n\n\u672c\u4e66\u6982\u8ff0\n\n\n\u7b80\u5355\u7684 Flask \u5e94\u7528\n\n\n\u7b80\u5355\u7684 REST \u670d\u52a1\n\n\n\n\n\n\n\u7b2c\u4e8c\u90e8\u5206\n\n\n\u4f7f\u7528 Flask-MongoEngine \u96c6\u6210\u6570\u636e\u5e93\n\n\n\u4f7f\u7528 Flask-Login \u6ce8\u518c\u767b\u5f55\n\n\n\u81ea\u5efa\u88c5\u9970\u5668\u5b9e\u73b0\u6743\u9650\u63a7\u5236\n\n\n\u89c4\u8303\u7ed3\u6784\u7ef4\u62a4\u4ee3\u7801\n\n\n\u5efa\u7acb\u76ee\u5f55\u7ba1\u7406\u914d\u7f6e\n\n\n\u4f7f\u7528 Flask-Script \u542f\u52a8\u5e94\u7528\n\n\n\u4f7f\u7528 Flask-Admin \u7ba1\u7406\u6570\u636e\u5e93\u6570\u636e\n \n\n\n\n\n\n\n\u7b2c\u4e09\u90e8\u5206\n\n\n\u7f16\u5199 TODO \u5e94\u7528\u3010part001\u3011\n\n\n\u7f16\u5199 TODO \u5e94\u7528\u3010part002\u3011\n\n\n\u4f7f\u7528 Gunicorn \u548c Nginx \u90e8\u7f72\u9879\u76ee", 
            "title": "\u76ee\u5f55"
        }, 
        {
            "location": "/SUMMARY/#summary", 
            "text": "\u524d\u8a00  \u7b2c\u4e00\u90e8\u5206  \u672c\u4e66\u6982\u8ff0  \u7b80\u5355\u7684 Flask \u5e94\u7528  \u7b80\u5355\u7684 REST \u670d\u52a1    \u7b2c\u4e8c\u90e8\u5206  \u4f7f\u7528 Flask-MongoEngine \u96c6\u6210\u6570\u636e\u5e93  \u4f7f\u7528 Flask-Login \u6ce8\u518c\u767b\u5f55  \u81ea\u5efa\u88c5\u9970\u5668\u5b9e\u73b0\u6743\u9650\u63a7\u5236  \u89c4\u8303\u7ed3\u6784\u7ef4\u62a4\u4ee3\u7801  \u5efa\u7acb\u76ee\u5f55\u7ba1\u7406\u914d\u7f6e  \u4f7f\u7528 Flask-Script \u542f\u52a8\u5e94\u7528  \u4f7f\u7528 Flask-Admin \u7ba1\u7406\u6570\u636e\u5e93\u6570\u636e      \u7b2c\u4e09\u90e8\u5206  \u7f16\u5199 TODO \u5e94\u7528\u3010part001\u3011  \u7f16\u5199 TODO \u5e94\u7528\u3010part002\u3011  \u4f7f\u7528 Gunicorn \u548c Nginx \u90e8\u7f72\u9879\u76ee", 
            "title": "Summary"
        }, 
        {
            "location": "/", 
            "text": "The Way To Flask\n\n\n\u672c\u6587\u76ee\u6807\n\n\n\u901a\u8fc7\u8bb2\u89e3 Flask \u4ee5\u53ca\u5b83\u7684\u6269\u5c55\u4eec\uff0c\u4ecb\u7ecd\u901a\u7528\u7528\u6cd5\u4ee5\u53ca\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u7684\u95ee\u9898\u548c\u5751\uff0c\u5e2e\u52a9\u8bfb\u8005\u4f7f\u7528 Python \u7f16\u7a0b\u8bed\u8a00\u5feb\u901f\u5f97\u5f00\u53d1\u5065\u58ee\u7684 Web\uff08API\uff09\u670d\u52a1\u7aef\u7a0b\u5e8f\u3002\u672c\u4e66\u5728\u7f16\u5199\u4e4b\u521d\u4ee5\u53ca\u7f16\u5199\u8fc7\u7a0b\u4e2d\u59cb\u7ec8\u575a\u6301\u4ee5\u4e0b\u51e0\u6761\u539f\u5219\uff1a\n\n\n\n\n\u8ba9 Python \u521d\u5b66\u8005/\u4f1a\u5176\u4ed6\u8bed\u8a00\u4f46\u6ca1\u7528\u8fc7 Python \u7684\u4eba\u80fd\u5feb\u901f\u5165\u624b\n\n\n\u5faa\u5e8f\u6e10\u8fdb\u5f97\u8ba9\u8bfb\u8005\u611f\u53d7 Flask \u7684\u7b80\u4fbf\u4e0e\u5f3a\u5927\n\n\n\u4ee5\u751f\u52a8\u6709\u8da3\u7684\u8bed\u8a00\u8bb2\u8ff0 Flask \u4ece\u5165\u95e8\u5230\u7740\u8ff7\n\n\n\n\nFlask \u7b80\u4ecb\n\n\nFlask \u662f\u4e00\u4e2a\u4f7f\u7528 Python \u7f16\u5199\u7684\u8f7b\u91cf\u7ea7 Web \u5e94\u7528\u6846\u67b6\uff0c\u6838\u5fc3\u7684\u601d\u60f3\u5c31\u662f\u81ea\u8eab\u5c3d\u53ef\u80fd\u63d0\u4f9b\u5c11\u7684\u4e1c\u897f\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5fae\u6846\u67b6\uff0c\u5c06\u66f4\u591a\u7684\u5185\u5bb9\u4ee5\u63d2\u4ef6\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u56e0\u6b64\uff0c\u884d\u751f\u51fa\u4e86\u4e00\u7cfb\u5217\u4ee5 Flask \u4e3a\u6838\u5fc3\u7684 \u63d2\u4ef6\u3002\u622a\u6b62\u81f32016\u5e7406\u670802\u65e5\uff0c\u5728 \nGithub\n \u4e0a\u5df2\u6709 \n20730\n \u4e2a\u661f\uff0c\n6426\n \u4e2a Fork \u4ee5\u53ca \n1511\n \u4e2a Watch\u3002\n\n\n\u901a\u8fc7\u4f7f\u7528 pip \u5305\u7ba1\u7406\u5de5\u5177\u7edf\u8ba1\uff0cFlask \u7684\u6269\u5c55\u5df2\u7ecf\u8fbe\u5230 \n800+\n\uff0c\u6db5\u76d6\u5927\u90e8\u5206\u65e5\u5e38\u5de5\u4f5c\u4f7f\u7528\u5230\u7684\u5185\u5bb9\u3002\n\n\n\u58f0\u660e\n\n\n\u672c\u6587\u7531 \nYetship\n \u7f16\u5199\uff0c\u4f7f\u7528 \nGNU FDL v1.3 Licence\n \u53d1\u5e03\uff0c\u5982\u6709\u8f6c\u8f7d\u3001\u5546\u4e1a\u4f7f\u7528\u7b49\u7528\u9014\uff0c\u8bf7\u5728 Licence \u7684\u7ea6\u675f\u4e0b\u8fdb\u884c\uff0c\u672c\u4eba\u4fdd\u7559\u4e00\u5207\u6743\u5229\u3002\n\n\n\u8054\u7cfb\u6211\n\n\n\u5982\u679c\u5bf9\u672c\u4e66\u63d0\u5230\u7684\u77e5\u8bc6\u70b9\u6709\u4e0d\u89e3\u6216\u8005\u89c9\u5f97\u6709\u8bef\uff0c\u53ef\u4ee5\u6839\u636e\u4ee5\u4e0b\u8054\u7cfb\u65b9\u5f0f\u4e0e\u6211\u8054\u7cfb\uff0c\u540c\u65f6\uff0c\u6b22\u8fce\u5927\u5bb6\u4e00\u8d77\u7f16\u64b0\u4fee\u6539\u672c\u4e66\uff0c\u8ba9\u66f4\u591a\u7684\u4eba\u80fd\u591f\u559c\u7231 Flask\u3002\n\n\n\n\n\u4e3b\u9875\uff1ahttps://liuliqiang.info\n\n\n\u90ae\u7bb1\uff1aliqianglau@outlook.com\n\n\nGitbook: https://luke0922.gitbooks.io/the-way-to-flask/content/\n\n\nGitHub: https://github.com/luke0922/the-way-to-flask.git\n\n\n\n\n\u66f4\u65b0\u8bb0\u5f55\n\n\nVersion 1.0\n\n\n\n\ndate\uff1a 2016-6-2\n\n\ndesc\uff1a \u7ec8\u4e8e\u5728\u4e00\u4e2a\u591a\u6708\u7684\u65f6\u95f4\u91cc\u5b8c\u6210\u4e86\u7b2c\u4e00\u7248\uff0c\u671f\u95f4\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\uff0c\u4f46\u662f\uff0c\u8fd8\u662f\u575a\u6301\u4e0b\u6765\u4e86\uff0c\u5b8c\u6210\u4e86\u7b2c\u4e00\u7248\u7684\u300aThe Way To Flask\u300b\uff0c\u867d\u7136\u4e2a\u4eba\u89c9\u5f97\u8fd8\u6709\u5f88\u5927\u7684\u6539\u8fdb\u7a7a\u95f4\uff0c\u4f46\u81f3\u5c11\u662f\u6709\u8fd9\u4e48\u7c97\u7cd9\u7684\u4e00\u7248\uff0c\u540e\u9762\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u53ef\u4ee5\u6839\u636e\u5927\u5bb6\u7684\u5efa\u8bae\u8fdb\u884c\u6539\u8fdb\u3002\n\n\n\n\nVersion 1.1\n\n\n\n\ndate: 2016-6-11\n\n\ndesc: \u5728 Pycon2016 \u4e0a\u89c2\u770b\u4e86\u300aFlask at Scale\u300b\u7684\u8bb2\u89e3\uff0c\u5bf9 Flask \u7684\u9879\u76ee\u6709\u4e86\u66f4\u591a\u7684\u4e00\u4e9b\u7406\u89e3\uff0c\u53d1\u73b0\u4e86 V1.0 \u7684\u5185\u5bb9\u5df2\u7ecf\u7b26\u5408\u53ef\u7ef4\u62a4\u6027\u7684\u8981\u6c42\uff0c\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\u65b0\u52a0\u5165\u4f18\u5316\u6027\u80fd\u7684\u90e8\u5206\u3002\n\n\n\n\nVersion 1.2\n\n\n\n\nbegin: 2017-03-01\n\n\nend: 2017-03-01\n\n\ndesc\uff1a\u4fee\u6539\u4e00\u4e9b\u6587\u6863\u7684\u9519\u8bef\n\n\n\n\nVersion1.3\n\n\n\n\nbegin: 2017-05-01\n\n\nend: 2017-05-01\n\n\ndesc\uff1a\u4f7f\u7528 mkdocs \u91cd\u6784\u6587\u6863", 
            "title": "\u524d\u8a00"
        }, 
        {
            "location": "/#the-way-to-flask", 
            "text": "", 
            "title": "The Way To Flask"
        }, 
        {
            "location": "/#_1", 
            "text": "\u901a\u8fc7\u8bb2\u89e3 Flask \u4ee5\u53ca\u5b83\u7684\u6269\u5c55\u4eec\uff0c\u4ecb\u7ecd\u901a\u7528\u7528\u6cd5\u4ee5\u53ca\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u7684\u95ee\u9898\u548c\u5751\uff0c\u5e2e\u52a9\u8bfb\u8005\u4f7f\u7528 Python \u7f16\u7a0b\u8bed\u8a00\u5feb\u901f\u5f97\u5f00\u53d1\u5065\u58ee\u7684 Web\uff08API\uff09\u670d\u52a1\u7aef\u7a0b\u5e8f\u3002\u672c\u4e66\u5728\u7f16\u5199\u4e4b\u521d\u4ee5\u53ca\u7f16\u5199\u8fc7\u7a0b\u4e2d\u59cb\u7ec8\u575a\u6301\u4ee5\u4e0b\u51e0\u6761\u539f\u5219\uff1a   \u8ba9 Python \u521d\u5b66\u8005/\u4f1a\u5176\u4ed6\u8bed\u8a00\u4f46\u6ca1\u7528\u8fc7 Python \u7684\u4eba\u80fd\u5feb\u901f\u5165\u624b  \u5faa\u5e8f\u6e10\u8fdb\u5f97\u8ba9\u8bfb\u8005\u611f\u53d7 Flask \u7684\u7b80\u4fbf\u4e0e\u5f3a\u5927  \u4ee5\u751f\u52a8\u6709\u8da3\u7684\u8bed\u8a00\u8bb2\u8ff0 Flask \u4ece\u5165\u95e8\u5230\u7740\u8ff7", 
            "title": "\u672c\u6587\u76ee\u6807"
        }, 
        {
            "location": "/#flask", 
            "text": "Flask \u662f\u4e00\u4e2a\u4f7f\u7528 Python \u7f16\u5199\u7684\u8f7b\u91cf\u7ea7 Web \u5e94\u7528\u6846\u67b6\uff0c\u6838\u5fc3\u7684\u601d\u60f3\u5c31\u662f\u81ea\u8eab\u5c3d\u53ef\u80fd\u63d0\u4f9b\u5c11\u7684\u4e1c\u897f\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5fae\u6846\u67b6\uff0c\u5c06\u66f4\u591a\u7684\u5185\u5bb9\u4ee5\u63d2\u4ef6\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u56e0\u6b64\uff0c\u884d\u751f\u51fa\u4e86\u4e00\u7cfb\u5217\u4ee5 Flask \u4e3a\u6838\u5fc3\u7684 \u63d2\u4ef6\u3002\u622a\u6b62\u81f32016\u5e7406\u670802\u65e5\uff0c\u5728  Github  \u4e0a\u5df2\u6709  20730  \u4e2a\u661f\uff0c 6426  \u4e2a Fork \u4ee5\u53ca  1511  \u4e2a Watch\u3002  \u901a\u8fc7\u4f7f\u7528 pip \u5305\u7ba1\u7406\u5de5\u5177\u7edf\u8ba1\uff0cFlask \u7684\u6269\u5c55\u5df2\u7ecf\u8fbe\u5230  800+ \uff0c\u6db5\u76d6\u5927\u90e8\u5206\u65e5\u5e38\u5de5\u4f5c\u4f7f\u7528\u5230\u7684\u5185\u5bb9\u3002", 
            "title": "Flask \u7b80\u4ecb"
        }, 
        {
            "location": "/#_2", 
            "text": "\u672c\u6587\u7531  Yetship  \u7f16\u5199\uff0c\u4f7f\u7528  GNU FDL v1.3 Licence  \u53d1\u5e03\uff0c\u5982\u6709\u8f6c\u8f7d\u3001\u5546\u4e1a\u4f7f\u7528\u7b49\u7528\u9014\uff0c\u8bf7\u5728 Licence \u7684\u7ea6\u675f\u4e0b\u8fdb\u884c\uff0c\u672c\u4eba\u4fdd\u7559\u4e00\u5207\u6743\u5229\u3002", 
            "title": "\u58f0\u660e"
        }, 
        {
            "location": "/#_3", 
            "text": "\u5982\u679c\u5bf9\u672c\u4e66\u63d0\u5230\u7684\u77e5\u8bc6\u70b9\u6709\u4e0d\u89e3\u6216\u8005\u89c9\u5f97\u6709\u8bef\uff0c\u53ef\u4ee5\u6839\u636e\u4ee5\u4e0b\u8054\u7cfb\u65b9\u5f0f\u4e0e\u6211\u8054\u7cfb\uff0c\u540c\u65f6\uff0c\u6b22\u8fce\u5927\u5bb6\u4e00\u8d77\u7f16\u64b0\u4fee\u6539\u672c\u4e66\uff0c\u8ba9\u66f4\u591a\u7684\u4eba\u80fd\u591f\u559c\u7231 Flask\u3002   \u4e3b\u9875\uff1ahttps://liuliqiang.info  \u90ae\u7bb1\uff1aliqianglau@outlook.com  Gitbook: https://luke0922.gitbooks.io/the-way-to-flask/content/  GitHub: https://github.com/luke0922/the-way-to-flask.git", 
            "title": "\u8054\u7cfb\u6211"
        }, 
        {
            "location": "/#_4", 
            "text": "", 
            "title": "\u66f4\u65b0\u8bb0\u5f55"
        }, 
        {
            "location": "/#version-10", 
            "text": "date\uff1a 2016-6-2  desc\uff1a \u7ec8\u4e8e\u5728\u4e00\u4e2a\u591a\u6708\u7684\u65f6\u95f4\u91cc\u5b8c\u6210\u4e86\u7b2c\u4e00\u7248\uff0c\u671f\u95f4\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\uff0c\u4f46\u662f\uff0c\u8fd8\u662f\u575a\u6301\u4e0b\u6765\u4e86\uff0c\u5b8c\u6210\u4e86\u7b2c\u4e00\u7248\u7684\u300aThe Way To Flask\u300b\uff0c\u867d\u7136\u4e2a\u4eba\u89c9\u5f97\u8fd8\u6709\u5f88\u5927\u7684\u6539\u8fdb\u7a7a\u95f4\uff0c\u4f46\u81f3\u5c11\u662f\u6709\u8fd9\u4e48\u7c97\u7cd9\u7684\u4e00\u7248\uff0c\u540e\u9762\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u53ef\u4ee5\u6839\u636e\u5927\u5bb6\u7684\u5efa\u8bae\u8fdb\u884c\u6539\u8fdb\u3002", 
            "title": "Version 1.0"
        }, 
        {
            "location": "/#version-11", 
            "text": "date: 2016-6-11  desc: \u5728 Pycon2016 \u4e0a\u89c2\u770b\u4e86\u300aFlask at Scale\u300b\u7684\u8bb2\u89e3\uff0c\u5bf9 Flask \u7684\u9879\u76ee\u6709\u4e86\u66f4\u591a\u7684\u4e00\u4e9b\u7406\u89e3\uff0c\u53d1\u73b0\u4e86 V1.0 \u7684\u5185\u5bb9\u5df2\u7ecf\u7b26\u5408\u53ef\u7ef4\u62a4\u6027\u7684\u8981\u6c42\uff0c\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\u65b0\u52a0\u5165\u4f18\u5316\u6027\u80fd\u7684\u90e8\u5206\u3002", 
            "title": "Version 1.1"
        }, 
        {
            "location": "/#version-12", 
            "text": "begin: 2017-03-01  end: 2017-03-01  desc\uff1a\u4fee\u6539\u4e00\u4e9b\u6587\u6863\u7684\u9519\u8bef", 
            "title": "Version 1.2"
        }, 
        {
            "location": "/#version13", 
            "text": "begin: 2017-05-01  end: 2017-05-01  desc\uff1a\u4f7f\u7528 mkdocs \u91cd\u6784\u6587\u6863", 
            "title": "Version1.3"
        }, 
        {
            "location": "/part001/", 
            "text": "\u7b2c\u4e00\u90e8\u5206\n\n\nFlask \u5feb\u901f\u5165\u95e8\n\n\n\n\n\u672c\u4e66\u6982\u8ff0\n\n\n\u7b80\u5355\u7684 Flask \u5e94\u7528\n\n\n\u7b80\u5355\u7684 REST \u670d\u52a1", 
            "title": "\u7b2c\u4e00\u90e8\u5206"
        }, 
        {
            "location": "/part001/#_1", 
            "text": "Flask \u5feb\u901f\u5165\u95e8   \u672c\u4e66\u6982\u8ff0  \u7b80\u5355\u7684 Flask \u5e94\u7528  \u7b80\u5355\u7684 REST \u670d\u52a1", 
            "title": "\u7b2c\u4e00\u90e8\u5206"
        }, 
        {
            "location": "/chapter001/", 
            "text": "\u672c\u4e66\u6982\u8ff0\n\n\n\u5728 Python \u4e2d\u6709\u5f88\u591a\u4f18\u79c0\u7684 Web \u5f00\u53d1\u6846\u67b6\uff0c\u4f8b\u5982 Django\u3001Flask\u548c Tornado\u7b49\u7b49\u3002\n\n\n\u6bcf\u79cd\u6846\u67b6\u90fd\u6709\u5176\u81ea\u8eab\u7684\u72ec\u7279\u4e4b\u5904\uff0c\n\n\n\n\nDjango \u81ea\u5df1\u96c6\u6210\u4e86\u4e30\u5bcc\u7684\u529f\u80fd\uff0c\u5c06\u6570\u636e\u5e93\u6a21\u5757\u3001\u6a21\u677f\u4ee5\u53ca\u540e\u53f0\u7ba1\u7406\u7b49\u6a21\u5757\u90fd\u96c6\u6210\u5728\u81ea\u8eab\u5185\u90e8\uff0c\u548c\u6846\u67b6\u4e00\u8d77\u6253\u5305\u53d1\u5e03\uff1b\n\n\n\u800c Flask \u5219\u4ee5\u6700\u7b80\u539f\u5219\uff0c\u81ea\u8eab\u6846\u67b6\u53ea\u9644\u5e26\u5f88\u7b80\u5355\u7684\u8def\u7531\u3001\u6a21\u677f\u529f\u80fd\uff0c\u800c\u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u6269\u5c55\u63a5\u53e3\uff0c\u4ece\u800c\u5c06\u5176\u4ed6\u7684\u529f\u80fd\u90fd\u4ee5\u6269\u5c55\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u5927\u91cf\u7684\u5f3a\u5927\u7684\u5404\u79cd\u6269\u5c55\uff0cFlask\u4e5f\u56e0\u6b64\u4ee5\u6269\u5c55\u4e30\u5bcc\u800c\u53d7\u6b22\u8fce\uff1b\n\n\nTornado \u5219\u4e0e Django \u548c Flask \u8d70\u4e0d\u540c\u7684\u9053\u8def\uff0cTornado \u7684\u4e3b\u6253\u529f\u80fd\u662f\u5f02\u6b65\u8bf7\u6c42\u5904\u7406\uff0c\u9002\u7528\u4e8e IO \u64cd\u4f5c\u7e41\u591a\u7684\u5e94\u7528\u3002\n\n\n\n\n\u8fd9\u4e2a\u7cfb\u5217\u6587\u7ae0\u7684\u4e3b\u8981\u4ecb\u7ecd\u5bf9\u8c61\u5c31\u662f Flask \u4ee5\u53ca\u5b83\u7684\u63d2\u4ef6\u4eec\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5176\u4ed6\u6846\u67b6\u4e5f\u5c31\u5728\u4e0a\u9762\u7b80\u7ea6\u5f97\u4e00\u8a00\u5e26\u8fc7\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u67e5\u627e\u8d44\u6599\u5b66\u4e60\u3002\n\n\n\u672c\u4e66\u7684\u6587\u7ae0\u987a\u5e8f\u4e3b\u8981\u6309\u7167\u4ee5\u4e0b\u7684\u9aa8\u67b6\u8fdb\u884c\u4ecb\u7ecd\uff1a\n\n\n\n\n\u7b2c\u4e00\u90e8\u5206\u8bb2\u89e3 Flask \u7684\u57fa\u7840\u529f\u80fd\n\n\n\u7b2c\u4e8c\u90e8\u5206\u8bb2\u89e3 Flask \u7684\u51e0\u4e2a\u91cd\u8981\u63d2\u4ef6\u4ee5\u53ca\u6ce8\u610f\u70b9\n\n\n\u7b2c\u4e09\u90e8\u5206\u5c06\u4ee5\u524d\u9762\u4ecb\u7ecd\u7684\u5185\u5bb9\u7efc\u5408\u8d77\u6765\u5b9e\u8df5\u4e00\u4e2a Todo \u7cfb\u7edf\n\n\n\n\n\u4e3a\u4e86\u8ba9\u540c\u5b66\u4eec\u5728\u9605\u8bfb\u7684\u65f6\u5019\u540c\u65f6\u5b9e\u8df5\u53ef\u4ee5\u4ea7\u751f\u548c\u6211\u8bb2\u89e3\u51fa\u73b0\u4e00\u6837\u7684\u6548\u679c\uff0c\u4e0b\u9762\u6211\u6709\u5fc5\u8981\u7f57\u5217\u4e00\u4e0b\u672c\u4e66\u4e2d\u4f7f\u7528\u5230\u7684\u6570\u636e\u5e93\u3001Python\u5e93\u7684\u7248\u672c\u7b49\u4fe1\u606f\u3002\n\n\n\u6570\u636e\u5e93\n\n\nMongoDB\uff1a\n    version\uff1a3.2.6\n    ip\uff1alocalhost\n    port\uff1a27017\nRedis\uff1a\n    version\uff1a3.0.5\n    ip\uff1alocalhost\n    port\uff1a6379\n\n\n\nPython \u4f9d\u8d56\u5e93\n\n\nFlask==0.10.1\nflask-mongoengine==0.7.5\nFlask-Login==0.3.2\nFlask-Admin==1.4.0\nFlask-Redis==0.1.0\nFlask-WTF==0.12", 
            "title": "\u672c\u4e66\u6982\u8ff0"
        }, 
        {
            "location": "/chapter001/#_1", 
            "text": "\u5728 Python \u4e2d\u6709\u5f88\u591a\u4f18\u79c0\u7684 Web \u5f00\u53d1\u6846\u67b6\uff0c\u4f8b\u5982 Django\u3001Flask\u548c Tornado\u7b49\u7b49\u3002  \u6bcf\u79cd\u6846\u67b6\u90fd\u6709\u5176\u81ea\u8eab\u7684\u72ec\u7279\u4e4b\u5904\uff0c   Django \u81ea\u5df1\u96c6\u6210\u4e86\u4e30\u5bcc\u7684\u529f\u80fd\uff0c\u5c06\u6570\u636e\u5e93\u6a21\u5757\u3001\u6a21\u677f\u4ee5\u53ca\u540e\u53f0\u7ba1\u7406\u7b49\u6a21\u5757\u90fd\u96c6\u6210\u5728\u81ea\u8eab\u5185\u90e8\uff0c\u548c\u6846\u67b6\u4e00\u8d77\u6253\u5305\u53d1\u5e03\uff1b  \u800c Flask \u5219\u4ee5\u6700\u7b80\u539f\u5219\uff0c\u81ea\u8eab\u6846\u67b6\u53ea\u9644\u5e26\u5f88\u7b80\u5355\u7684\u8def\u7531\u3001\u6a21\u677f\u529f\u80fd\uff0c\u800c\u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u6269\u5c55\u63a5\u53e3\uff0c\u4ece\u800c\u5c06\u5176\u4ed6\u7684\u529f\u80fd\u90fd\u4ee5\u6269\u5c55\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u5927\u91cf\u7684\u5f3a\u5927\u7684\u5404\u79cd\u6269\u5c55\uff0cFlask\u4e5f\u56e0\u6b64\u4ee5\u6269\u5c55\u4e30\u5bcc\u800c\u53d7\u6b22\u8fce\uff1b  Tornado \u5219\u4e0e Django \u548c Flask \u8d70\u4e0d\u540c\u7684\u9053\u8def\uff0cTornado \u7684\u4e3b\u6253\u529f\u80fd\u662f\u5f02\u6b65\u8bf7\u6c42\u5904\u7406\uff0c\u9002\u7528\u4e8e IO \u64cd\u4f5c\u7e41\u591a\u7684\u5e94\u7528\u3002   \u8fd9\u4e2a\u7cfb\u5217\u6587\u7ae0\u7684\u4e3b\u8981\u4ecb\u7ecd\u5bf9\u8c61\u5c31\u662f Flask \u4ee5\u53ca\u5b83\u7684\u63d2\u4ef6\u4eec\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5176\u4ed6\u6846\u67b6\u4e5f\u5c31\u5728\u4e0a\u9762\u7b80\u7ea6\u5f97\u4e00\u8a00\u5e26\u8fc7\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u81ea\u884c\u67e5\u627e\u8d44\u6599\u5b66\u4e60\u3002  \u672c\u4e66\u7684\u6587\u7ae0\u987a\u5e8f\u4e3b\u8981\u6309\u7167\u4ee5\u4e0b\u7684\u9aa8\u67b6\u8fdb\u884c\u4ecb\u7ecd\uff1a   \u7b2c\u4e00\u90e8\u5206\u8bb2\u89e3 Flask \u7684\u57fa\u7840\u529f\u80fd  \u7b2c\u4e8c\u90e8\u5206\u8bb2\u89e3 Flask \u7684\u51e0\u4e2a\u91cd\u8981\u63d2\u4ef6\u4ee5\u53ca\u6ce8\u610f\u70b9  \u7b2c\u4e09\u90e8\u5206\u5c06\u4ee5\u524d\u9762\u4ecb\u7ecd\u7684\u5185\u5bb9\u7efc\u5408\u8d77\u6765\u5b9e\u8df5\u4e00\u4e2a Todo \u7cfb\u7edf   \u4e3a\u4e86\u8ba9\u540c\u5b66\u4eec\u5728\u9605\u8bfb\u7684\u65f6\u5019\u540c\u65f6\u5b9e\u8df5\u53ef\u4ee5\u4ea7\u751f\u548c\u6211\u8bb2\u89e3\u51fa\u73b0\u4e00\u6837\u7684\u6548\u679c\uff0c\u4e0b\u9762\u6211\u6709\u5fc5\u8981\u7f57\u5217\u4e00\u4e0b\u672c\u4e66\u4e2d\u4f7f\u7528\u5230\u7684\u6570\u636e\u5e93\u3001Python\u5e93\u7684\u7248\u672c\u7b49\u4fe1\u606f\u3002", 
            "title": "\u672c\u4e66\u6982\u8ff0"
        }, 
        {
            "location": "/chapter001/#_2", 
            "text": "MongoDB\uff1a\n    version\uff1a3.2.6\n    ip\uff1alocalhost\n    port\uff1a27017\nRedis\uff1a\n    version\uff1a3.0.5\n    ip\uff1alocalhost\n    port\uff1a6379", 
            "title": "\u6570\u636e\u5e93"
        }, 
        {
            "location": "/chapter001/#python", 
            "text": "Flask==0.10.1\nflask-mongoengine==0.7.5\nFlask-Login==0.3.2\nFlask-Admin==1.4.0\nFlask-Redis==0.1.0\nFlask-WTF==0.12", 
            "title": "Python \u4f9d\u8d56\u5e93"
        }, 
        {
            "location": "/chapter002/", 
            "text": "\u7b80\u5355\u7684 Flask \u5e94\u7528\n\n\n\u4f5c\u4e3a\u672c\u4e66\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u4e5f\u53ef\u80fd\u662f\u4f60\u63a5\u89e6\u7684\u7b2c\u4e00\u4e2a Flask \u5e94\u7528\uff0c\u6211\u8fd8\u662f\u4ee5\u7a0b\u5e8f\u5c4a\u5e38\u89c4\u7684 Hello World \u4e3a\u4f8b\u6765\u7f16\u5199\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\u3002\n\n\n\u8fd9\u4e2a\u4f8b\u5b50\u7684\u529f\u80fd\u5c31\u662f\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165URL\uff1a\n\n\nhttp://localhost:5000\n\n\n\n\u7136\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\uff1a\n\n\nHello World\uff01\n\n\n\nSimple Flask App\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u7b80\u77ed\u7684\u4ee3\u7801\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return \"Hello World!\"\n\napp.run()\n\n\n\n\u5c06\u8fd9\u6bb5\u4ee3\u7801\u4fdd\u5b58\u4e3a \napp.py\n\uff0c\u7136\u540e\u518d\u4f7f\u7528 python \u8fd0\u884c\u8fd9\u4e2a\u6587\u4ef6\uff1a\n\n\npython app.py\n\n\n\n\u56de\u8f66\u4e4b\u540e\uff0c\u4f60\u5c06\u4f1a\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u8f93\u51fa\uff1a\n\n\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n\n\n\n\u5982\u679c\u6709\u5176\u5b83\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u4ed4\u7ec6\u770b\u770b\u662f\u4ec0\u4e48\u95ee\u9898\uff0c\u4ee3\u7801\u548c\u6211\u4e0a\u9762\u662f\u5426\u4e00\u81f4\uff0c\u8fd8\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u70b9\u5c31\u662f\uff0c\u4f60\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86 Flask \uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u90a3\u4e48\u5b89\u88c5\u4e00\u4e0b\uff1a\n\n\npip install Flask==0.10.1\n\n\n\n\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u7ee7\u7eed\u4f7f\u7528 Python \u8fd0\u884c\u4e0a\u8ff0\u6587\u4ef6\uff1a\n\n\npython app.py\n\n\n\n\u7136\u540e\u5728\u6d4f\u89c8\u5668\u4e0a\u6253\u5f00\u4ee5\u4e0bURL\uff1a\n\n\nhttp://localhost:5000\n\n\n\n\u4f60\u5c06\u4f1a\u770b\u5230\u8fd9\u4e2a\u754c\u9762\uff1a\n\n\n\n\n\u90a3\u5c31\u8bf4\u660e\u4f60\u7684\u7b2c\u4e00\u4e2a Flask \u5e94\u7528\u5df2\u7ecf\u8fd0\u884c\u6210\u529f\u4e86\u3002\n\n\n\u7b80\u6790\u7b2c\u4e00\u4e2a\u5e94\u7528\n\n\n\u5bf9\u4e8e\u4f60\u8fd0\u884c\u6210\u529f\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5c31\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5206\u6790\uff0c\u8ba9\u4f60\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u4e86\u89e3\u3002\n\n\n\u524d\u4e24\u884c\u7684\u7f16\u7801\u8bf4\u660e\u5c31\u4e0d\u8bf4\u4e86\uff0c\u8fd9\u662f Python \u7684\u7279\u6027\uff0c\u800c\u4e0d\u662f Flask \u7279\u6709\u7684\uff0c\u5982\u679c\u8bfb\u8005\u6709\u4e0d\u61c2\u7684\u8bdd\uff0c\u5efa\u8bae\u67e5\u770b Python \u7684\u6587\u4ef6\u7f16\u7801\u8bf4\u660e\u3002\n\n\n\u7136\u540e\u7ee7\u7eed\u770b\u4ee3\u7801\uff0c\u6211\u4eec\u7684\u6240\u6709\u4ee3\u7801\u53ea\u6709\u4e00\u4e2a \nimport\n\uff0c\u5c31\u662f \nFlask\n\uff0c\u8fd9\u662f Flask \u8fd9\u4e2a\u6846\u67b6\u7684\u6838\u5fc3\uff0c\u6211\u4eec\u628a\u5b83\u8ba4\u4e3a\u662f\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u4e86\uff0c\u76ee\u524d\u4e0d\u9700\u8981\u591a\u5173\u6ce8\uff1a\n\n\nfrom flask import Flask\n\n\n\n\u7136\u540e\u63a5\u4e0b\u53bb\u770b\uff0c\u89e3\u6790\u6765\u4e00\u53e5\u662f\u521d\u59cb\u5316\u4e86\u4e00\u4e2a Flask \u53d8\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u670d\u52a1\u5668\uff1b\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u4f20\u9012\u4e86\u4e00\u4e2a\u53c2\u6570 \nname\n\uff0c\u6211\u4eec\u77e5\u9053\u5728 Python \u4e2d \nname\n \u8fd9\u4e2a\u53d8\u91cf\u662f\u8868\u793a\u6a21\u5757\u7684\u540d\u79f0\uff0c\n\u8fd9\u4e2a\u53c2\u6570\u5bf9\u4e8e Flask \u5f88\u91cd\u8981\uff0c\u56e0\u4e3a Flask \u4f1a\u4f9d\u8d56\u4e8e\u5b83\u53bb\u5224\u65ad\u4ece\u54ea\u91cc\u627e\u6a21\u677f\u3001\u9759\u6001\u6587\u4ef6\n\u3002\n\n\napp = Flask(__name__)\n\n\n\n\u63a5\u4e0b\u6765\u4e09\u53e5\u76ee\u524d\u6765\u8bf4\u53ef\u80fd\u6709\u70b9\u8d85\u51fa\u6211\u4eec\u7684\u8ba8\u8bba\u8303\u56f4\uff0c\u4f46\u662f\u6211\u4eec\u8fd9\u91cc\u7a0d\u5fae\u8bb2\u89e3\u4e00\u4e0b\u597d\u4e86\uff0c\u8fd9\u4e09\u53e5\u4e2d\u5173\u952e\u662f\u7b2c\u4e00\u53e5\u548c\u7b2c\u4e09\u53e5\u3002\n\n\n@app.route('/')\ndef index():\n    return \"Hello World!\"\n\n\n\n\u7b2c\u4e00\u53e5\u4e2d\u5173\u952e\u7684\u662f \n'/'\n \u8fd9\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u7684\u4f5c\u7528\u662f\u8bf4\u4e0b\u9762\u7684\u8fd9\u4e2a\u51fd\u6570\u5bf9\u5e94\u4e8e\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\u7684\u5730\u5740\uff1a\n\n\nhttp://localhost:5000 + \u540e\u9762\u7684\u53c2\u6570\n\n\n\n\u8fd9\u6837\u8bf4\uff0c\u5927\u5bb6\u53ef\u80fd\u4e0d\u592a\u660e\u767d\uff0c\u5047\u8bbe\u6362\u6210\uff1a\n\n\n@app.route('/hello')\ndef hello():\n    return \"hello world\"\n\n\n\n\u7684\u8bdd\uff0c\u90a3\u4e48\u4e5f\u5c31\u8868\u793a\uff0c\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\uff1a\n\n\nhttp://localhost:5000/hello\n\n\n\n\u90a3\u4e48 Flask \u5c31\u4f1a\u8c03\u7528\u5230 hello \u8fd9\u4e2a\u51fd\u6570\u3002 \n\n\n\u90a3\u7b2c\u4e09\u53e5\u7684\u610f\u601d\u5927\u5bb6\u53ef\u80fd\u4f1a\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u6ca1\u9519\uff0creturn \u7684\u5185\u5bb9\u5c31\u662f\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u7684\u5185\u5bb9\u4e86\u3002\u6211\u4eec\u7684\u4ee3\u7801\u4e2d return \u7684\u662f \"Hello World\uff01\"\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u7684\u5c31\u662f Hello World\uff01\n\n\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec import \u4e86\u670d\u52a1\u5668\uff08\nimport Flask\n\uff09,\u521b\u5efa\u4e86\u670d\u52a1\u5668\uff08\nFlask(\nname\n)\n\uff09\uff0c\u662f\u65f6\u5019\u5c06\u670d\u52a1\u5668\u8fd0\u884c\u8d77\u6765\u4e86\uff0c\u662f\u7684\uff0c\u6700\u540e\u4e00\u53e5\n\n\napp.run()\n\n\n\n\u5c31\u662f\u8868\u793a\u5c06\u670d\u52a1\u5668\u8fd0\u884c\u8d77\u6765\uff0c\u63a5\u53d7\u6d4f\u89c8\u5668\u7684\u8bbf\u95ee\u3002\n\n\n\u90a3\u4e48\u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\u7684\uff0c\u5f53\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\n\n\nhttp://localhost:5000\n\n\n\n\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6d4f\u89c8\u5668\u9ed8\u9ed8\u5f97\u5728\u6211\u4eec\u7684 URL \u540e\u9762\u52a0\u5165\u4e86\u4e00\u4e2a \n/\n\uff0c\u771f\u5b9e\u8bbf\u95ee\u7684\u5c31\u662f \n\n\nhttp://localhost:5000/\n\n\n\n\u5176\u5b9e\u4e5f\u5c31\u662f\u5bf9\u5e94\u7740\u6211\u4eec\u7684\n\n\napp.route('/')\n\n\n\n\u51fd\u6570\u4e86\uff0c\u8fd9\u4e2a\u51fd\u6570\n\n\nreturn \"Hello World!\"\n\n\n\n\u6240\u4ee5\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u5c31\u770b\u5230\u4e86\uff1a\n\n\nHello World\uff01", 
            "title": "\u7b80\u5355\u7684 Flask \u5e94\u7528"
        }, 
        {
            "location": "/chapter002/#flask", 
            "text": "\u4f5c\u4e3a\u672c\u4e66\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\uff0c\u4e5f\u53ef\u80fd\u662f\u4f60\u63a5\u89e6\u7684\u7b2c\u4e00\u4e2a Flask \u5e94\u7528\uff0c\u6211\u8fd8\u662f\u4ee5\u7a0b\u5e8f\u5c4a\u5e38\u89c4\u7684 Hello World \u4e3a\u4f8b\u6765\u7f16\u5199\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\u3002  \u8fd9\u4e2a\u4f8b\u5b50\u7684\u529f\u80fd\u5c31\u662f\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165URL\uff1a  http://localhost:5000  \u7136\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\uff1a  Hello World\uff01", 
            "title": "\u7b80\u5355\u7684 Flask \u5e94\u7528"
        }, 
        {
            "location": "/chapter002/#simple-flask-app", 
            "text": "\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e2a\u7b80\u77ed\u7684\u4ee3\u7801  #!/usr/bin/env python\n# encoding: utf-8\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return \"Hello World!\"\n\napp.run()  \u5c06\u8fd9\u6bb5\u4ee3\u7801\u4fdd\u5b58\u4e3a  app.py \uff0c\u7136\u540e\u518d\u4f7f\u7528 python \u8fd0\u884c\u8fd9\u4e2a\u6587\u4ef6\uff1a  python app.py  \u56de\u8f66\u4e4b\u540e\uff0c\u4f60\u5c06\u4f1a\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u8f93\u51fa\uff1a  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)  \u5982\u679c\u6709\u5176\u5b83\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u4ed4\u7ec6\u770b\u770b\u662f\u4ec0\u4e48\u95ee\u9898\uff0c\u4ee3\u7801\u548c\u6211\u4e0a\u9762\u662f\u5426\u4e00\u81f4\uff0c\u8fd8\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u70b9\u5c31\u662f\uff0c\u4f60\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u4e86 Flask \uff0c\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u90a3\u4e48\u5b89\u88c5\u4e00\u4e0b\uff1a  pip install Flask==0.10.1  \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u7ee7\u7eed\u4f7f\u7528 Python \u8fd0\u884c\u4e0a\u8ff0\u6587\u4ef6\uff1a  python app.py  \u7136\u540e\u5728\u6d4f\u89c8\u5668\u4e0a\u6253\u5f00\u4ee5\u4e0bURL\uff1a  http://localhost:5000  \u4f60\u5c06\u4f1a\u770b\u5230\u8fd9\u4e2a\u754c\u9762\uff1a   \u90a3\u5c31\u8bf4\u660e\u4f60\u7684\u7b2c\u4e00\u4e2a Flask \u5e94\u7528\u5df2\u7ecf\u8fd0\u884c\u6210\u529f\u4e86\u3002", 
            "title": "Simple Flask App"
        }, 
        {
            "location": "/chapter002/#_1", 
            "text": "\u5bf9\u4e8e\u4f60\u8fd0\u884c\u6210\u529f\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5c31\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u5206\u6790\uff0c\u8ba9\u4f60\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u4e86\u89e3\u3002  \u524d\u4e24\u884c\u7684\u7f16\u7801\u8bf4\u660e\u5c31\u4e0d\u8bf4\u4e86\uff0c\u8fd9\u662f Python \u7684\u7279\u6027\uff0c\u800c\u4e0d\u662f Flask \u7279\u6709\u7684\uff0c\u5982\u679c\u8bfb\u8005\u6709\u4e0d\u61c2\u7684\u8bdd\uff0c\u5efa\u8bae\u67e5\u770b Python \u7684\u6587\u4ef6\u7f16\u7801\u8bf4\u660e\u3002  \u7136\u540e\u7ee7\u7eed\u770b\u4ee3\u7801\uff0c\u6211\u4eec\u7684\u6240\u6709\u4ee3\u7801\u53ea\u6709\u4e00\u4e2a  import \uff0c\u5c31\u662f  Flask \uff0c\u8fd9\u662f Flask \u8fd9\u4e2a\u6846\u67b6\u7684\u6838\u5fc3\uff0c\u6211\u4eec\u628a\u5b83\u8ba4\u4e3a\u662f\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u4e86\uff0c\u76ee\u524d\u4e0d\u9700\u8981\u591a\u5173\u6ce8\uff1a  from flask import Flask  \u7136\u540e\u63a5\u4e0b\u53bb\u770b\uff0c\u89e3\u6790\u6765\u4e00\u53e5\u662f\u521d\u59cb\u5316\u4e86\u4e00\u4e2a Flask \u53d8\u91cf\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f\u521b\u5efa\u4e86\u4e00\u4e2a\u670d\u52a1\u5668\uff1b\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u4f20\u9012\u4e86\u4e00\u4e2a\u53c2\u6570  name \uff0c\u6211\u4eec\u77e5\u9053\u5728 Python \u4e2d  name  \u8fd9\u4e2a\u53d8\u91cf\u662f\u8868\u793a\u6a21\u5757\u7684\u540d\u79f0\uff0c \u8fd9\u4e2a\u53c2\u6570\u5bf9\u4e8e Flask \u5f88\u91cd\u8981\uff0c\u56e0\u4e3a Flask \u4f1a\u4f9d\u8d56\u4e8e\u5b83\u53bb\u5224\u65ad\u4ece\u54ea\u91cc\u627e\u6a21\u677f\u3001\u9759\u6001\u6587\u4ef6 \u3002  app = Flask(__name__)  \u63a5\u4e0b\u6765\u4e09\u53e5\u76ee\u524d\u6765\u8bf4\u53ef\u80fd\u6709\u70b9\u8d85\u51fa\u6211\u4eec\u7684\u8ba8\u8bba\u8303\u56f4\uff0c\u4f46\u662f\u6211\u4eec\u8fd9\u91cc\u7a0d\u5fae\u8bb2\u89e3\u4e00\u4e0b\u597d\u4e86\uff0c\u8fd9\u4e09\u53e5\u4e2d\u5173\u952e\u662f\u7b2c\u4e00\u53e5\u548c\u7b2c\u4e09\u53e5\u3002  @app.route('/')\ndef index():\n    return \"Hello World!\"  \u7b2c\u4e00\u53e5\u4e2d\u5173\u952e\u7684\u662f  '/'  \u8fd9\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u7684\u4f5c\u7528\u662f\u8bf4\u4e0b\u9762\u7684\u8fd9\u4e2a\u51fd\u6570\u5bf9\u5e94\u4e8e\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165\u7684\u5730\u5740\uff1a  http://localhost:5000 + \u540e\u9762\u7684\u53c2\u6570  \u8fd9\u6837\u8bf4\uff0c\u5927\u5bb6\u53ef\u80fd\u4e0d\u592a\u660e\u767d\uff0c\u5047\u8bbe\u6362\u6210\uff1a  @app.route('/hello')\ndef hello():\n    return \"hello world\"  \u7684\u8bdd\uff0c\u90a3\u4e48\u4e5f\u5c31\u8868\u793a\uff0c\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u8bbf\u95ee\uff1a  http://localhost:5000/hello  \u90a3\u4e48 Flask \u5c31\u4f1a\u8c03\u7528\u5230 hello \u8fd9\u4e2a\u51fd\u6570\u3002   \u90a3\u7b2c\u4e09\u53e5\u7684\u610f\u601d\u5927\u5bb6\u53ef\u80fd\u4f1a\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u6ca1\u9519\uff0creturn \u7684\u5185\u5bb9\u5c31\u662f\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u7684\u5185\u5bb9\u4e86\u3002\u6211\u4eec\u7684\u4ee3\u7801\u4e2d return \u7684\u662f \"Hello World\uff01\"\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u7684\u5c31\u662f Hello World\uff01  \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec import \u4e86\u670d\u52a1\u5668\uff08 import Flask \uff09,\u521b\u5efa\u4e86\u670d\u52a1\u5668\uff08 Flask( name ) \uff09\uff0c\u662f\u65f6\u5019\u5c06\u670d\u52a1\u5668\u8fd0\u884c\u8d77\u6765\u4e86\uff0c\u662f\u7684\uff0c\u6700\u540e\u4e00\u53e5  app.run()  \u5c31\u662f\u8868\u793a\u5c06\u670d\u52a1\u5668\u8fd0\u884c\u8d77\u6765\uff0c\u63a5\u53d7\u6d4f\u89c8\u5668\u7684\u8bbf\u95ee\u3002  \u90a3\u4e48\u6574\u4e2a\u8fc7\u7a0b\u5c31\u662f\u8fd9\u6837\u7684\uff0c\u5f53\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165  http://localhost:5000  \u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6d4f\u89c8\u5668\u9ed8\u9ed8\u5f97\u5728\u6211\u4eec\u7684 URL \u540e\u9762\u52a0\u5165\u4e86\u4e00\u4e2a  / \uff0c\u771f\u5b9e\u8bbf\u95ee\u7684\u5c31\u662f   http://localhost:5000/  \u5176\u5b9e\u4e5f\u5c31\u662f\u5bf9\u5e94\u7740\u6211\u4eec\u7684  app.route('/')  \u51fd\u6570\u4e86\uff0c\u8fd9\u4e2a\u51fd\u6570  return \"Hello World!\"  \u6240\u4ee5\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u5c31\u770b\u5230\u4e86\uff1a  Hello World\uff01", 
            "title": "\u7b80\u6790\u7b2c\u4e00\u4e2a\u5e94\u7528"
        }, 
        {
            "location": "/chapter003/", 
            "text": "\u7b80\u5355\u7684 REST \u670d\u52a1\n\n\n\u968f\u7740\u79fb\u52a8\u8bbe\u5907\u7684\u4e0d\u65ad\u53d1\u5c55\uff0c\u79fb\u52a8\u7aef\u7684\u9700\u6c42\u65e5\u76ca\u589e\u5927\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u516c\u53f8\u6765\u8bf4\uff0c\u53ef\u80fd\u7528\u6237\u91cf\u5df2\u8d85\u8d8a PC \u7aef\u3002\u800c\u968f\u7740\u79fb\u52a8\u7aef\u53d1\u5c55\uff0c\u4f34\u968f\u800c\u6765\u7684\u662f\u5bf9\u4e8e\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7684\u4ea4\u4e92\u8d8a\u6765\u8d8a\u8f7b\u91cf\u5316\uff0c\u76f8\u5bf9 \u201c\u7b28\u91cd\u201d \u7684 HTML \u9875\u9762\u9010\u6e10\u88ab\u79fb\u52a8\u7aef\u629b\u5f03\uff08\u4f46\u662f H5 \u7684\u51fa\u73b0\uff0c\u8fd9\u4e00\u60c5\u51b5\u6709\u6240\u8f6c\u53d8\uff09\uff0c\u800c\u6b64\u65f6 REST \u670d\u52a1\u6a21\u5f0f\u88ab\u8d8a\u6765\u8d8a\u591a\u4eba\u63a5\u53d7\u3002\n\n\n\u901a\u4fd7\u6765\u8bf4\uff0cREST \u670d\u52a1\u6700\u5c11\u90fd\u9700\u8981\u63d0\u4f9b\u67e5\u8be2\u529f\u80fd\uff0c\u4e30\u5bcc\u4e00\u4e0b\u7684\u5219\u4f1a\u63d0\u4f9b\u589e\u5220\u6539\u67e5\u529f\u80fd\uff0c\u5176\u4e2d\u8fd8\u53ef\u80fd\u5305\u542b\u6279\u91cf\u7684\u64cd\u4f5c\u3002\u4f46\u662f\uff0c\u672c\u7ae0\u56e0\u4e3a\u662f\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Flask \u7f16\u5199\u4e00\u4e2a REST \u670d\u52a1\u5668\u7684\u793a\u4f8b\uff0c\u6240\u4ee5\u672c\u7ae0\u8981\u4ecb\u7ecd\u7684\u529f\u80fd\u662f\uff1a\n\n\n\n\n\u4f7f\u7528 PUT\u3001DELETE\u3001POST\u548cGET \u8fdb\u884c\u6570\u636e\u589e\u5220\u6539\u67e5\n\n\n\u8fd4\u56de json \u7ed3\u6784\u7684\u6570\u636e\n\n\n\n\n\u4fee\u6539\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\n\n\n\u6211\u4eec\u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4ed6\u7684\u529f\u80fd\u5c31\u662f\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 URL\n\n\nhttp://localhost:5000\n\n\n\n\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 \u201cHello World\uff01\u201d\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u60f3\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6362\u6210 json \u5e8f\u5217\uff1f\u8fd9\u6837\u4e0d\u5c31\u7b49\u4e8e\u6211\u4eec\u5b9e\u73b0\u4e86 REST \u7684\u67e5\u8be2 API \u4e86\uff1f\n\n\n\u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u80fd\u7b2c\u4e00\u51b2\u52a8\u5c31\u4f1a\u8fd9\u4e48\u5b9e\u73b0\uff1a\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return json.dumps({'name': 'tyrael',\n                       'email': 'liqianglau@outlook.com'})\n\napp.run()\n\n\n\n\u5176\u5b9e\u6211\u4eec\u5c31\u662f\u4fee\u6539\u4e86\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\uff0c\u5c06\u5b83\u4fee\u6539\u6210 JSON \u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e0a\u6253\u5f00\n\n\nhttp://localhost:5000\n\n\n\n\u770b\u5230\u7684\u662f\uff1a\n\n\n\n\n\u54c7\uff01\uff01\u597d\u50cf\u662f\u5b9e\u73b0\u4e86\u6211\u4eec\u60f3\u8981\u7684\u529f\u80fd\uff0c\u8fd4\u56de\u4e86 JSON \u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u6211\u4eec\u6253\u5f00 Chrome\uff08\u6211\u4f7f\u7528\u7684\u662f Chrome\uff0cSafari \u548c Firefox \u540c\u6837\u6709\u7c7b\u4f3c\u7684\u5de5\u5177\uff09\u7684\u8c03\u8bd5\u5de5\u5177\uff08Windows\u4e0b\u6309\uff1a Ctrl + Alt + I\uff0cMac \u4e0b\u6309\uff1aCmd + Shift + I\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5176\u5b9e\u8fd9\u4e2a\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u5c45\u7136\u662f html \u7c7b\u578b\uff1a\n\n\n\n\n\u4f60\u53ef\u80fd\u4f1a\u5947\u602a\u8fd9\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u8fd9\u4e2a\u5f71\u54cd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u4e0d\u5927\uff0c\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b\u79fb\u52a8\u7aef\u7684\u5e93\uff0c\u53ef\u80fd\u4f1a\u6839\u636e\u8fd9\u4e2a\u54cd\u5e94\u5934\u6765\u5904\u7406\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u60b2\u5267\u4e86\u3002\n\n\n\u8fd4\u56dejson\n\n\n\u5904\u7406\u8fd9\u4e2a\u60c5\u51b5\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5f97\u60f3\u628a\u8fd9\u4e2a\u54cd\u5e94\u5934\u8bbe\u7f6e\u6210 json \u683c\u5f0f\uff0c\u8fd9\u6837\u4fee\u8865 bug \u662f\u4f1a\u5bfc\u81f4\u5176\u4ed6 bug \u7684\uff0c\u8b6c\u5982\u5176\u4ed6\u6211\u4eec\u4e0d\u77e5\u9053\u7684\u5730\u65b9\u8fd8\u6709\u7c7b\u4f3c\u7684\u5751\u3002\n\n\n\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 Flask \u7684 jsonify \u51fd\u6570\uff0c\u6211\u8fd9\u91cc\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u4fee\u6539\u4e00\u4e0b\u4ee3\u7801\uff1a\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return jsonify({'name': 'tyrael',\n                    'email': 'liqianglau@outlook.com'})\n\napp.run()\n\n\n\n\u8fd9\u91cc\u505a\u4e86\u4e24\u5904\u4fee\u6539\uff0c\u5206\u522b\u662f\uff1a\n\n\nfrom flask import ...., jsonify\n... ...\nreturn jsonify({'name': 'tyrael',\n                'email': 'liqianglau@outlook.com'})\n\n\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u518d\u4fdd\u5b58\u4ee3\u7801\uff0c\u8fd0\u884c\u4ee3\u7801\uff0c\u5e76\u4e14\u8bbf\u95ee\u770b\u770b\uff1a\n\n\n\n\n\u6211\u4eec\u53d1\u73b0\u4ee3\u7801\u5c45\u7136\u6392\u597d\u4e86\u7248\u5f0f\uff0c\u7136\u540e\u518d\u770b\u770b\u54cd\u5e94\u5934\uff1a\n\n\n\n\n\u54cd\u5e94\u5934\u4e5f\u53d8\u6210\u4e86 \napplication/json\n \u4e86\u3002\n\n\n\u597d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8fd9\u91cc\u8fbe\u5230\u4e86\u7b2c\u4e00\u4e2a\u76ee\u7684\u4e86\uff0c\u8fd4\u56de json \u6570\u636e\u3002\u4f46\u662f\uff0c\u6211\u4eec\u7684\u53e6\u5916\u4e00\u4e2a\u76ee\u7684\u2014\u4f7f\u7528 DEL\uff0cPUT\u548c POST \u65b9\u6cd5\u600e\u4e48\u5904\u7406\uff1f\n\n\n\u8bf7\u6c42\u65b9\u6cd5\n\n\n\u6211\u4eec\u77e5\u9053\u5e38\u7528\u7684 HTTP \u8bf7\u6c42\u65b9\u6cd5\u6709 6 \u79cd\uff0c\u5206\u522b\u662f\n\n\n\n\nGET\n\n\nPOST\n\n\nPUT\n\n\nDELETE\n\n\nPATCH\n\n\nHEAD\n\n\n\n\n\u90a3\u4e48\u6211\u4eec\u521a\u521a\u7684\u4ee3\u7801\u53ea\u80fd\u9ed8\u8ba4\u5f97\u5904\u7406 GET \u7684\u60c5\u51b5\uff08\u6d4f\u89c8\u5668\u9ed8\u8ba4\u4f7f\u7528GET\uff09\uff0c\u90a3\u4e48\u5176\u4ed6\u60c5\u51b5\u600e\u4e48\u5904\u7406\uff1f\n\n\n\u8fd9\u65f6\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u65e2\u7136\u6211\u4eec\u7684 \nURL\n \u662f\u901a\u8fc7 \n\n\napp.route('...')\n\n\n\n\u6765\u62fc\u63a5\u7684\uff0c\u90a3\u4e48\uff0c\u8bf7\u6c42\u65b9\u6cd5\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u6307\u5b9a\uff1f\n\n\n\u4e8b\u5b9e\u4e0a\u5c31\u662f\u8fd9\u6837\u7684\uff0c\u8bf7\u6c42\u65b9\u6cd5\u901a\u8fc7\u4e00\u4e2a\u53eb\u505a methods \u7684\u53c2\u6570\u6307\u5b9a\uff0c\u4f8b\u5982\u4e0b\u9762\u5206\u522b\u5bf9\u5e94 POST\u3001DELETE\u3001PUT \u65b9\u6cd5\u3002\n\n\n@app.route('/', methods=['POST'])\n@app.route('/', methods=['DELETE'])\n@app.route('/', methods=['PUT'])\n\n\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6211\u4eec\u56e0\u4e3a\u8981\u505a\u6570\u636e\u7684\u589e\u5220\u6539\u67e5\uff0c\u6240\u4ee5\u9700\u8981\u8003\u8651\u6570\u636e\u7684\u4fdd\u5b58\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u5728\u672c\u7ae0\u53c8\u662f\u8d85\u51fa\u8303\u56f4\u7684\u8ba8\u8bba\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u5f97\u4ee5\u6587\u4ef6\u4f5c\u4e3a\u4fdd\u5b58\u6570\u636e\u7684\u5a92\u4ecb\u3002\u8fdb\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u4ee3\u7801\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n\n@app.route('/', methods=['GET'])\ndef query_records():\n    name = request.args.get('name')\n    print name\n    with open('/tmp/data.txt', 'r') as f:\n        data = f.read()\n        records = json.loads(data)\n        for record in records:\n            if record['name'] == name:\n                return jsonify(record)\n        return jsonify({'error': 'data not found'})\n\n\n@app.route('/', methods=['PUT'])\ndef create_record():\n    record = json.loads(request.data)\n    with open('/tmp/data.txt', 'r') as f:\n        data = f.read()\n\n    if not data:\n        records = [record]\n    else:\n        records = json.loads(data)\n        records.append(record)\n\n    with open('/tmp/data.txt', 'w') as f:\n        f.write(json.dumps(records, indent=2))\n    return jsonify(record)\n\n\n@app.route('/', methods=['POST'])\ndef update_record():\n    record = json.loads(request.data)\n    new_records = []\n    with open('/tmp/data.txt', 'r') as f:\n        data = f.read()\n        records = json.loads(data)\n\n    for r in records:\n        if r['name'] == record['name']:\n            r['email'] = record['email']\n        new_records.append(r)\n\n    with open('/tmp/data.txt', 'w') as f:\n        f.write(json.dumps(new_records, indent=2))\n    return jsonify(record)\n\n\n@app.route('/', methods=['DELETE'])\ndef delte_record():\n    record = json.loads(request.data)\n    new_records = []\n    with open('/tmp/data.txt', 'r') as f:\n        data = f.read()\n        records = json.loads(data)\n        for r in records:\n            if r['name'] == record['name']:\n                continue\n            new_records.append(r)\n\n    with open('/tmp/data.txt', 'w') as f:\n        f.write(json.dumps(new_records, indent=2))\n\n    return jsonify(record)\n\napp.run(debug=True)\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u867d\u7136\u5f88\u957f\uff0c\u4f46\u662f\u4ee3\u7801\u90fd\u6bd4\u8f83\u5bb9\u6613\u61c2\uff0c\u800c\u4e14\u90fd\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u6587\u4ef6\u64cd\u4f5c\u3002\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u70b9\u6709\u4ee5\u4e0b\u51e0\u70b9\uff1a\n\n\n\n\n\n\n\u5982\u4f55\u8bbe\u7f6e\u8bf7\u6c42\u65b9\u6cd5\n\n\n@app.route('/', methods=['GET'])\n@app.route('/', methods=['PUT'])\n@app.route('/', methods=['POST'])\n@app.route('/', methods=['DELETE'])\n\n\n\n\n\n\n\n\u5982\u4f55\u83b7\u53d6\u6570\u636e\n\n\n\n\n\n\n\u5728 Flask \u4e2d\u6709\u4e00\u4e2a request \u53d8\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u8bf7\u6c42\u4e0a\u4e0b\u6587\u7684\u53d8\u91cf\uff0c\u7136\u540e\u91cc\u9762\u5305\u542b\u591a\u4e2a\u5c5e\u6027\u662f\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u8bf7\u6c42\u7684\u53c2\u6570\u7684\uff0c\u4f8b\u5982\u6211\u4eec\u8fd9\u91cc\u7528\u5230\u4e86\u4e24\u79cd\u65b9\u5f0f\uff1a\n\n\n\n\n\n\nrequest.args.get('name')\n\n\nrequest.args\n \u8fd9\u4e2a\u5c5e\u6027\u7528\u4e8e\u8868\u793a GET \u8bf7\u6c42\u5728 URL \u4e0a\u9644\u5e26\u7684\u53c2\u6570\n\n\n\n\n\n\njson.loads(request.data)\n\n\nrequest.data\n \u8fd9\u4e2a\u5c5e\u6027\u7528\u4e8e\u8868\u793a POST \u7b49\u8bf7\u6c42\u7684\u8bf7\u6c42\u4f53\u4e2d\u7684\u6570\u636e\n\n\n\n\n\n\n\u6211\u4eec\u76ee\u524d\u5bf9 request \u53d8\u91cf\u5c31\u505a\u8fd9\u4e48\u591a\u4ecb\u7ecd\u5427\uff0c\u6bd5\u7adf\u6211\u4eec\u672c\u7ae0\u7684\u76ee\u6807\u662f\u8ba9\u5927\u5bb6\u4e86\u89e3\u5982\u4f55\u5904\u7406 GET\u3001POST\u3001PUT \u7b49\u4e0d\u540c\u7684\u8bf7\u6c42\u65b9\u5f0f\u5982\u4f55\u5904\u7406\u3002", 
            "title": "\u7b80\u5355\u7684 REST \u670d\u52a1"
        }, 
        {
            "location": "/chapter003/#rest", 
            "text": "\u968f\u7740\u79fb\u52a8\u8bbe\u5907\u7684\u4e0d\u65ad\u53d1\u5c55\uff0c\u79fb\u52a8\u7aef\u7684\u9700\u6c42\u65e5\u76ca\u589e\u5927\uff0c\u5bf9\u4e8e\u5927\u591a\u6570\u516c\u53f8\u6765\u8bf4\uff0c\u53ef\u80fd\u7528\u6237\u91cf\u5df2\u8d85\u8d8a PC \u7aef\u3002\u800c\u968f\u7740\u79fb\u52a8\u7aef\u53d1\u5c55\uff0c\u4f34\u968f\u800c\u6765\u7684\u662f\u5bf9\u4e8e\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7684\u4ea4\u4e92\u8d8a\u6765\u8d8a\u8f7b\u91cf\u5316\uff0c\u76f8\u5bf9 \u201c\u7b28\u91cd\u201d \u7684 HTML \u9875\u9762\u9010\u6e10\u88ab\u79fb\u52a8\u7aef\u629b\u5f03\uff08\u4f46\u662f H5 \u7684\u51fa\u73b0\uff0c\u8fd9\u4e00\u60c5\u51b5\u6709\u6240\u8f6c\u53d8\uff09\uff0c\u800c\u6b64\u65f6 REST \u670d\u52a1\u6a21\u5f0f\u88ab\u8d8a\u6765\u8d8a\u591a\u4eba\u63a5\u53d7\u3002  \u901a\u4fd7\u6765\u8bf4\uff0cREST \u670d\u52a1\u6700\u5c11\u90fd\u9700\u8981\u63d0\u4f9b\u67e5\u8be2\u529f\u80fd\uff0c\u4e30\u5bcc\u4e00\u4e0b\u7684\u5219\u4f1a\u63d0\u4f9b\u589e\u5220\u6539\u67e5\u529f\u80fd\uff0c\u5176\u4e2d\u8fd8\u53ef\u80fd\u5305\u542b\u6279\u91cf\u7684\u64cd\u4f5c\u3002\u4f46\u662f\uff0c\u672c\u7ae0\u56e0\u4e3a\u662f\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Flask \u7f16\u5199\u4e00\u4e2a REST \u670d\u52a1\u5668\u7684\u793a\u4f8b\uff0c\u6240\u4ee5\u672c\u7ae0\u8981\u4ecb\u7ecd\u7684\u529f\u80fd\u662f\uff1a   \u4f7f\u7528 PUT\u3001DELETE\u3001POST\u548cGET \u8fdb\u884c\u6570\u636e\u589e\u5220\u6539\u67e5  \u8fd4\u56de json \u7ed3\u6784\u7684\u6570\u636e", 
            "title": "\u7b80\u5355\u7684 REST \u670d\u52a1"
        }, 
        {
            "location": "/chapter003/#_1", 
            "text": "\u6211\u4eec\u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4ed6\u7684\u529f\u80fd\u5c31\u662f\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 URL  http://localhost:5000  \u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 \u201cHello World\uff01\u201d\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u60f3\uff0c\u6211\u4eec\u80fd\u4e0d\u80fd\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6362\u6210 json \u5e8f\u5217\uff1f\u8fd9\u6837\u4e0d\u5c31\u7b49\u4e8e\u6211\u4eec\u5b9e\u73b0\u4e86 REST \u7684\u67e5\u8be2 API \u4e86\uff1f  \u4e8e\u662f\uff0c\u6211\u4eec\u53ef\u80fd\u7b2c\u4e00\u51b2\u52a8\u5c31\u4f1a\u8fd9\u4e48\u5b9e\u73b0\uff1a  #!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return json.dumps({'name': 'tyrael',\n                       'email': 'liqianglau@outlook.com'})\n\napp.run()  \u5176\u5b9e\u6211\u4eec\u5c31\u662f\u4fee\u6539\u4e86\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\uff0c\u5c06\u5b83\u4fee\u6539\u6210 JSON \u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u6211\u4eec\u5728\u6d4f\u89c8\u5668\u4e0a\u6253\u5f00  http://localhost:5000  \u770b\u5230\u7684\u662f\uff1a   \u54c7\uff01\uff01\u597d\u50cf\u662f\u5b9e\u73b0\u4e86\u6211\u4eec\u60f3\u8981\u7684\u529f\u80fd\uff0c\u8fd4\u56de\u4e86 JSON \u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u6211\u4eec\u6253\u5f00 Chrome\uff08\u6211\u4f7f\u7528\u7684\u662f Chrome\uff0cSafari \u548c Firefox \u540c\u6837\u6709\u7c7b\u4f3c\u7684\u5de5\u5177\uff09\u7684\u8c03\u8bd5\u5de5\u5177\uff08Windows\u4e0b\u6309\uff1a Ctrl + Alt + I\uff0cMac \u4e0b\u6309\uff1aCmd + Shift + I\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5176\u5b9e\u8fd9\u4e2a\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\u5c45\u7136\u662f html \u7c7b\u578b\uff1a   \u4f60\u53ef\u80fd\u4f1a\u5947\u602a\u8fd9\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u8fd9\u4e2a\u5f71\u54cd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e94\u8be5\u4e0d\u5927\uff0c\u4f46\u662f\u5bf9\u4e8e\u67d0\u4e9b\u79fb\u52a8\u7aef\u7684\u5e93\uff0c\u53ef\u80fd\u4f1a\u6839\u636e\u8fd9\u4e2a\u54cd\u5e94\u5934\u6765\u5904\u7406\u6570\u636e\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u60b2\u5267\u4e86\u3002", 
            "title": "\u4fee\u6539\u7b2c\u4e00\u4e2a\u7a0b\u5e8f"
        }, 
        {
            "location": "/chapter003/#json", 
            "text": "\u5904\u7406\u8fd9\u4e2a\u60c5\u51b5\u6211\u4eec\u4e0d\u80fd\u7b80\u5355\u5f97\u60f3\u628a\u8fd9\u4e2a\u54cd\u5e94\u5934\u8bbe\u7f6e\u6210 json \u683c\u5f0f\uff0c\u8fd9\u6837\u4fee\u8865 bug \u662f\u4f1a\u5bfc\u81f4\u5176\u4ed6 bug \u7684\uff0c\u8b6c\u5982\u5176\u4ed6\u6211\u4eec\u4e0d\u77e5\u9053\u7684\u5730\u65b9\u8fd8\u6709\u7c7b\u4f3c\u7684\u5751\u3002  \u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 Flask \u7684 jsonify \u51fd\u6570\uff0c\u6211\u8fd9\u91cc\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u4fee\u6539\u4e00\u4e0b\u4ee3\u7801\uff1a  #!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n\n@app.route('/')\ndef index():\n    return jsonify({'name': 'tyrael',\n                    'email': 'liqianglau@outlook.com'})\n\napp.run()  \u8fd9\u91cc\u505a\u4e86\u4e24\u5904\u4fee\u6539\uff0c\u5206\u522b\u662f\uff1a  from flask import ...., jsonify\n... ...\nreturn jsonify({'name': 'tyrael',\n                'email': 'liqianglau@outlook.com'})  \u6b64\u65f6\uff0c\u6211\u4eec\u518d\u4fdd\u5b58\u4ee3\u7801\uff0c\u8fd0\u884c\u4ee3\u7801\uff0c\u5e76\u4e14\u8bbf\u95ee\u770b\u770b\uff1a   \u6211\u4eec\u53d1\u73b0\u4ee3\u7801\u5c45\u7136\u6392\u597d\u4e86\u7248\u5f0f\uff0c\u7136\u540e\u518d\u770b\u770b\u54cd\u5e94\u5934\uff1a   \u54cd\u5e94\u5934\u4e5f\u53d8\u6210\u4e86  application/json  \u4e86\u3002  \u597d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u8fd9\u91cc\u8fbe\u5230\u4e86\u7b2c\u4e00\u4e2a\u76ee\u7684\u4e86\uff0c\u8fd4\u56de json \u6570\u636e\u3002\u4f46\u662f\uff0c\u6211\u4eec\u7684\u53e6\u5916\u4e00\u4e2a\u76ee\u7684\u2014\u4f7f\u7528 DEL\uff0cPUT\u548c POST \u65b9\u6cd5\u600e\u4e48\u5904\u7406\uff1f", 
            "title": "\u8fd4\u56dejson"
        }, 
        {
            "location": "/chapter003/#_2", 
            "text": "\u6211\u4eec\u77e5\u9053\u5e38\u7528\u7684 HTTP \u8bf7\u6c42\u65b9\u6cd5\u6709 6 \u79cd\uff0c\u5206\u522b\u662f   GET  POST  PUT  DELETE  PATCH  HEAD   \u90a3\u4e48\u6211\u4eec\u521a\u521a\u7684\u4ee3\u7801\u53ea\u80fd\u9ed8\u8ba4\u5f97\u5904\u7406 GET \u7684\u60c5\u51b5\uff08\u6d4f\u89c8\u5668\u9ed8\u8ba4\u4f7f\u7528GET\uff09\uff0c\u90a3\u4e48\u5176\u4ed6\u60c5\u51b5\u600e\u4e48\u5904\u7406\uff1f  \u8fd9\u65f6\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u65e2\u7136\u6211\u4eec\u7684  URL  \u662f\u901a\u8fc7   app.route('...')  \u6765\u62fc\u63a5\u7684\uff0c\u90a3\u4e48\uff0c\u8bf7\u6c42\u65b9\u6cd5\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u6307\u5b9a\uff1f  \u4e8b\u5b9e\u4e0a\u5c31\u662f\u8fd9\u6837\u7684\uff0c\u8bf7\u6c42\u65b9\u6cd5\u901a\u8fc7\u4e00\u4e2a\u53eb\u505a methods \u7684\u53c2\u6570\u6307\u5b9a\uff0c\u4f8b\u5982\u4e0b\u9762\u5206\u522b\u5bf9\u5e94 POST\u3001DELETE\u3001PUT \u65b9\u6cd5\u3002  @app.route('/', methods=['POST'])\n@app.route('/', methods=['DELETE'])\n@app.route('/', methods=['PUT'])  \u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\u6211\u4eec\u56e0\u4e3a\u8981\u505a\u6570\u636e\u7684\u589e\u5220\u6539\u67e5\uff0c\u6240\u4ee5\u9700\u8981\u8003\u8651\u6570\u636e\u7684\u4fdd\u5b58\uff0c\u56e0\u4e3a\u6570\u636e\u5e93\u7684\u64cd\u4f5c\u5728\u672c\u7ae0\u53c8\u662f\u8d85\u51fa\u8303\u56f4\u7684\u8ba8\u8bba\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u5f97\u4ee5\u6587\u4ef6\u4f5c\u4e3a\u4fdd\u5b58\u6570\u636e\u7684\u5a92\u4ecb\u3002\u8fdb\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u4ee3\u7801\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a  #!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n\n@app.route('/', methods=['GET'])\ndef query_records():\n    name = request.args.get('name')\n    print name\n    with open('/tmp/data.txt', 'r') as f:\n        data = f.read()\n        records = json.loads(data)\n        for record in records:\n            if record['name'] == name:\n                return jsonify(record)\n        return jsonify({'error': 'data not found'})\n\n\n@app.route('/', methods=['PUT'])\ndef create_record():\n    record = json.loads(request.data)\n    with open('/tmp/data.txt', 'r') as f:\n        data = f.read()\n\n    if not data:\n        records = [record]\n    else:\n        records = json.loads(data)\n        records.append(record)\n\n    with open('/tmp/data.txt', 'w') as f:\n        f.write(json.dumps(records, indent=2))\n    return jsonify(record)\n\n\n@app.route('/', methods=['POST'])\ndef update_record():\n    record = json.loads(request.data)\n    new_records = []\n    with open('/tmp/data.txt', 'r') as f:\n        data = f.read()\n        records = json.loads(data)\n\n    for r in records:\n        if r['name'] == record['name']:\n            r['email'] = record['email']\n        new_records.append(r)\n\n    with open('/tmp/data.txt', 'w') as f:\n        f.write(json.dumps(new_records, indent=2))\n    return jsonify(record)\n\n\n@app.route('/', methods=['DELETE'])\ndef delte_record():\n    record = json.loads(request.data)\n    new_records = []\n    with open('/tmp/data.txt', 'r') as f:\n        data = f.read()\n        records = json.loads(data)\n        for r in records:\n            if r['name'] == record['name']:\n                continue\n            new_records.append(r)\n\n    with open('/tmp/data.txt', 'w') as f:\n        f.write(json.dumps(new_records, indent=2))\n\n    return jsonify(record)\n\napp.run(debug=True)  \u8fd9\u6bb5\u4ee3\u7801\u867d\u7136\u5f88\u957f\uff0c\u4f46\u662f\u4ee3\u7801\u90fd\u6bd4\u8f83\u5bb9\u6613\u61c2\uff0c\u800c\u4e14\u90fd\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u6587\u4ef6\u64cd\u4f5c\u3002  \u8fd9\u6bb5\u4ee3\u7801\u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u70b9\u6709\u4ee5\u4e0b\u51e0\u70b9\uff1a    \u5982\u4f55\u8bbe\u7f6e\u8bf7\u6c42\u65b9\u6cd5  @app.route('/', methods=['GET'])\n@app.route('/', methods=['PUT'])\n@app.route('/', methods=['POST'])\n@app.route('/', methods=['DELETE'])    \u5982\u4f55\u83b7\u53d6\u6570\u636e    \u5728 Flask \u4e2d\u6709\u4e00\u4e2a request \u53d8\u91cf\uff0c\u8fd9\u662f\u4e00\u4e2a\u8bf7\u6c42\u4e0a\u4e0b\u6587\u7684\u53d8\u91cf\uff0c\u7136\u540e\u91cc\u9762\u5305\u542b\u591a\u4e2a\u5c5e\u6027\u662f\u53ef\u4ee5\u7528\u6765\u83b7\u53d6\u8bf7\u6c42\u7684\u53c2\u6570\u7684\uff0c\u4f8b\u5982\u6211\u4eec\u8fd9\u91cc\u7528\u5230\u4e86\u4e24\u79cd\u65b9\u5f0f\uff1a    request.args.get('name')  request.args  \u8fd9\u4e2a\u5c5e\u6027\u7528\u4e8e\u8868\u793a GET \u8bf7\u6c42\u5728 URL \u4e0a\u9644\u5e26\u7684\u53c2\u6570    json.loads(request.data)  request.data  \u8fd9\u4e2a\u5c5e\u6027\u7528\u4e8e\u8868\u793a POST \u7b49\u8bf7\u6c42\u7684\u8bf7\u6c42\u4f53\u4e2d\u7684\u6570\u636e    \u6211\u4eec\u76ee\u524d\u5bf9 request \u53d8\u91cf\u5c31\u505a\u8fd9\u4e48\u591a\u4ecb\u7ecd\u5427\uff0c\u6bd5\u7adf\u6211\u4eec\u672c\u7ae0\u7684\u76ee\u6807\u662f\u8ba9\u5927\u5bb6\u4e86\u89e3\u5982\u4f55\u5904\u7406 GET\u3001POST\u3001PUT \u7b49\u4e0d\u540c\u7684\u8bf7\u6c42\u65b9\u5f0f\u5982\u4f55\u5904\u7406\u3002", 
            "title": "\u8bf7\u6c42\u65b9\u6cd5"
        }, 
        {
            "location": "/part002/", 
            "text": "\u7b2c\u4e8c\u90e8\u5206\n\n\nFlask \u63d2\u4ef6\u4f7f\u7528\u6307\u5357\n\n\n\n\n\u96c6\u6210\u6570\u636e\u5e93\n\n\n\u6ce8\u518c\u767b\u5f55\n\n\n\u6743\u9650\u63a7\u5236\n\n\n\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\n\n\n\u914d\u7f6e\u7ba1\u7406", 
            "title": "\u7b2c\u4e8c\u90e8\u5206"
        }, 
        {
            "location": "/part002/#_1", 
            "text": "Flask \u63d2\u4ef6\u4f7f\u7528\u6307\u5357   \u96c6\u6210\u6570\u636e\u5e93  \u6ce8\u518c\u767b\u5f55  \u6743\u9650\u63a7\u5236  \u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801  \u914d\u7f6e\u7ba1\u7406", 
            "title": "\u7b2c\u4e8c\u90e8\u5206"
        }, 
        {
            "location": "/chapter004/", 
            "text": "\u4f7f\u7528 Flask-MongoEngine \u96c6\u6210\u6570\u636e\u5e93\n\n\n\u5728\u524d\u9762\u4e00\u7ae0 \n\u7b80\u5355\u7684 REST \u670d\u52a1\n \u4e2d\uff0c\u6211\u4eec\u7684\u6570\u636e\u90fd\u662f\u4fdd\u5b58\u5728\u6587\u4ef6\u4e2d\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6837\u5f88\u662f\u7e41\u7410\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u4e2d\u90fd\u9700\u8981\u8fdb\u884c\u8bfb\u53d6\u6587\u4ef6\uff0c\u5199\u51fa\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u867d\u7136\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5bf9\u6587\u4ef6\u64cd\u4f5c\u8fdb\u884c\u4e00\u4e2a\u5c01\u88c5\uff0c\u4f46\u662f\uff0c\u6bd5\u7adf\u662f\u6587\u4ef6\u5b58\u50a8\uff0c\u6570\u636e\u7a0d\u5fae\u591a\u4e00\u70b9\u67e5\u8be2\u7b49\u64cd\u4f5c\u5fc5\u7136\u65f6\u95f4\u53d8\u957f\u3002\n\n\n\u9762\u5bf9\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u91cc\u5f15\u5165\u4e86\u5bf9\u6570\u636e\u5e93\u7684\u4f9d\u8d56\uff0c\u5728\u6211\u4eec\u7684 \n\u672c\u4e66\u6982\u8ff0\n \u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86\u6570\u636e\u5e93\u7684\u7248\u672c\u4fe1\u606f\uff0c\u672c\u7ae0\u4f7f\u7528\u7684\u662f MongoDB\uff0c\u5177\u4f53\u7684\u7248\u672c\u8fd8\u6709\u6570\u636e\u5e93\u5730\u5740\u4fe1\u606f\u4e3a\uff1a\n\n\nversion\uff1a3.2.6\nip\uff1alocalhost\nport\uff1a27017\n\n\n\n\u521b\u5efa\u6570\u636e\u6a21\u578b\n\n\n\u65e2\u7136\u6211\u4eec\u60f3\u4f7f\u7528\u6570\u636e\u5e93\u6765\u4fdd\u5b58\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u539f\u751f\u7684 pymongo \u6765\u64cd\u4f5c MongoDB\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u4e3a\u4e86\u66f4\u8fdb\u4e00\u6b65\u5f97\u7b80\u5316\u6211\u4eec\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u521b\u5efa\u6570\u636e\u6a21\u578b\u3002\n\n\n\u6570\u636e\u6a21\u578b\u4e3b\u8981\u7684\u529f\u80fd\u662f\u7528\u4e8e\u8bf4\u660e\u6211\u4eec\u7684\u6570\u636e\u5305\u542b\u54ea\u4e9b\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u5206\u522b\u662f\u4ec0\u4e48\u7c7b\u578b\uff0c\u6709\u4ec0\u4e48\u5c5e\u6027\uff08\u552f\u4e00\u7684\uff0c\u8fd8\u662f\u56fa\u5b9a\u51e0\u4e2a\u503c\u4e2d\u7684\u4e00\u4e2a\uff09\u7b49\u7b49\u3002\u8fd9\u6837\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728\u64cd\u4f5c\u6570\u636e\u7684\u65f6\u5019\u53ef\u4ee5\u65f6\u523b\u5f88\u6e05\u6670\u5f97\u77e5\u9053\u6211\u4eec\u7684\u6570\u636e\u7684\u4fe1\u606f\uff0c\u5373\u4f7f\u6211\u4eec\u4e0d\u770b\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u3002\n\n\n\u8fd9\u91cc\u6211\u4eec\u8981\u4ecb\u7ecd\u7684\u64cd\u4f5c MongoDB \u7684 Flask \u6269\u5c55\u662f Flask-MongoEngine\uff0c\u8fd9\u4e2a\u6269\u5c55\u662f MongoEngine \u5728 Flask \u4e0a\u7684\u6269\u5c55\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 MongoEngine \u800c\u4e0d\u4f9d\u8d56\u4e8e Flask\uff0c\u4f46\u4f9d\u4e0d\u4f9d\u8d56\u76f8\u5dee\u4e0d\u591a\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e\u914d\u7f6e\u5982\u4f55\u5904\u7f6e\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u4f9d\u8d56 Flask \u7684\u6269\u5c55\u3002\n\n\n\u8981\u5728 Flask \u4e2d\u4f7f\u7528 MongoEngine\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u5148\u5728 Flask \u4e2d\u914d\u7f6e MongoDB \u7684\u4fe1\u606f\uff0c\u7136\u540e\u518d\u4f7f\u7528\u6211\u4eec\u7684\u670d\u52a1\u5668\u521d\u59cb\u5316 MongoEngine\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u6570\u636e\u5e93\u548c\u670d\u52a1\u5668\u5efa\u7acb\u4e86\u8054\u7cfb\uff0c\u8fd9\u4e2a\u5728\u4ee3\u7801\u4e2d\u53ef\u4ee5\u8fd9\u6837\u6765\u8868\u793a\uff1a\n\n\napp.config['MONGODB_SETTINGS'] = {\n    'db': 'the_way_to_flask',\n    'host': 'localhost',\n    'port': 27017\n}\n\ndb = MongoEngine()\ndb.init_app(app)\n\n\n\n\u5efa\u7acb\u8054\u7cfb\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 MongoEngine \u521b\u5efa\u6570\u636e\u6a21\u578b\u4e86\u3002\n\n\n\u6211\u4eec\u8fd9\u91cc\u8fd8\u662f\u7ee7\u627f\u4e0a\u4e00\u7ae0\u4e2d\u7684\u6570\u636e\u6a21\u578b\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5206\u522b\u662f name \u548c email\uff1a\n\n\nclass User(db.Document):\n    name = db.StringField()\n    email = db.StringField()\n\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u7684\u6570\u636e\u6a21\u578b\u521b\u5efa\u597d\u4e86\uff0c\u6574\u6bb5\u5b8c\u6574\u7684\u4ee3\u7801\u662f\uff1a\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\n\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    'db': 'the_way_to_flask',\n    'host': 'localhost',\n    'port': 27017\n}\n\ndb = MongoEngine()\ndb.init_app(app)\n\n\nclass User(db.Document):\n    name = db.StringField()\n    email = db.StringField()\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n\n\n\u64cd\u4f5c\u6570\u636e\n\n\n\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u6570\u636e\u6a21\u578b(Model)\u548c\u6570\u636e\u5e93\u5173\u8054\u8d77\u6765\u4e86\uff0c\u90a3\u5149\u6709\u5173\u8054\u6ca1\u7528\u554a\uff0c\u6211\u4eec\u6ca1\u529e\u6cd5\u64cd\u4f5c\u554a\u3002\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u5c31\u662f\u8bb2\u89e3\u5982\u4f55\u901a\u8fc7 Model \u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u589e\u5220\u6539\u67e5\u3002\n\n\n\u67e5\u8be2\n\n\nMongoEngine \u7684\u589e\u5220\u6539\u67e5\u975e\u5e38\u7b80\u5355\uff0c\u4f8b\u5982\u67e5\u8be2\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\uff1a\n\n\nUser.objects(name=\"zhangsan\").first()\n\n\n\n\u8fd9\u4e2a\u8bed\u53e5\u5c31\u5c06\u6570\u636e\u5e93\u4e2d\u540d\u5b57\u4e3a zhangsan \u7684\u7528\u6237\u67e5\u8be2\u51fa\u6765\u4e86\u3002\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u8bed\u53e5\u662f\u600e\u4e48\u67e5\u8be2\u7684\u3002\n\n\n\u9996\u5148\u662f \nUser.objects\n\uff0c\u8fd9\u91cc\u7684 \nUser\n \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u662f\u6211\u4eec\u7684 Model\uff0c\u90a3\u65e2\u7136 User \u90fd\u5df2\u7ecf\u662f Model \u4e86\u4e3a\u4ec0\u4e48\u8fd8\u8981 objects \u5462\uff1f\n\n\n\u5c31\u662f\u56e0\u4e3a User \u662f Model\uff0c\u56e0\u4e3a Model \u672c\u8eab\u53ea\u4ee3\u8868\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u548c\u6211\u4eec\u67e5\u8be2\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u6240\u4ee5\u8fd9\u91cc\u5f15\u5165\u4e86\u4e00\u4e2a objects \u5c5e\u6027\uff0c\u8868\u793a\u4e00\u4e2a\u67e5\u8be2\u96c6\uff0c\u8fd9\u4e2a\u96c6\u5408\u9ed8\u8ba4\u5c31\u8868\u793a User \u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u540e\u9762\u7684 \nname=\u201czhangsan\u201d\n \u5c31\u6709\u70b9\u597d\u7406\u89e3\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u4ece User \u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\u4e2d\u8fc7\u6ee4\u51fa name \u7684\u503c\u4e3a zhangsan \u7684\u8bb0\u5f55\uff0c\u522b\u5fd8\u4e86\uff0c\u8fc7\u6ee4\u51fa\u6765\u7684\u6570\u636e\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a User \u5bf9\u8c61\uff0c\u6240\u4ee5\u6211\u4eec\u540e\u9762\u8fd8\u52a0\u4e86\u4e00\u4e2a \nfirst\n \u83b7\u53d6\u8fd9\u4e2a\u96c6\u5408\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u67e5\u8be2\u5230\u4e86\u4e00\u4e2a User \u5bf9\u8c61\u3002\n\n\n\u65b0\u589e\n\n\n\u589e\u52a0\u65b0\u8bb0\u5f55\u5c31\u66f4\u7b80\u5355\u4e86\uff0c\u4f8b\u5982\u6211\u60f3\u63d2\u5165\u4e00\u4e2a \nname\n \u4e3a \nlisi\n\uff0c\nemail\n \u4e3a \nlisi@gmail.com\n \u7684\u7528\u6237\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a\n\n\nUser(name='lisi', email='lisi@gmail.com').save()\n\n\n\n\u5c31\u8fd9\u4e48\u7b80\u5355\uff0c\u9996\u5148\uff0c\u6211\u4eec\u60f3\u521b\u5efa\u4e86\u4e00\u4e2a User \u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528 save \u65b9\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u5220\u9664\n\n\n\u8003\u8651\u4e00\u4e0b\u5982\u679c\u6211\u4eec\u8981\u5220\u9664\u4e00\u4e2a\u8bb0\u5f55\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u9700\u8981\u5148\u627e\u5230\u8fd9\u4e2a\u9700\u8981\u5220\u9664\u7684\u8bb0\u5f55\uff1f\u5728 MongoEngine \u4e2d\u5c31\u662f\u8fd9\u6837\u7684\uff0c\u5982\u679c\u6211\u4eec\u8981\u5220\u9664\u4e00\u4e2a\u8bb0\u5f55\uff0c\u6211\u4eec\u60f3\u627e\u5230\u5b83\uff0c\u4f7f\u7528\u7684\u662f\u67e5\u8be2\uff1a\n\n\nuser = User.objects(name=\"zhangsan\").first()\n\n\n\n\u627e\u5230\u4e4b\u540e\uff0c\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8c03\u7528 delete \u65b9\u6cd5\u5373\u53ef\uff1a\n\n\nuser.delete()\n\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5c06 zhangsan \u8fd9\u4e2a\u7528\u6237\u5220\u9664\u6389\u4e86\u3002\n\n\n\u66f4\u65b0\n\n\n\u548c\u5220\u9664\u4e00\u6837\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u4e00\u6761\u8bb0\u5f55\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u5148\u9700\u8981\u627e\u5230\u4ed6\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u66f4\u65b0 lisi \u7684\u90ae\u7bb1\u4e3a\uff1a lisi@outlook.com\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\n\n\nuser = User.objects(name=\"zhangsan\").first()\nuser.update(email=\"lisi@outlook.com\")\n\n\n\n\u7b2c\u4e00\u53e5\u8fd8\u662f\u67e5\u8be2\u5566\uff0c\u7b2c\u4e8c\u53e5\u8fd9\u91cc\u4f7f\u7528\u4e86 update \u65b9\u6cd5\uff0c\u76f4\u63a5\u5c06\u9700\u8981\u4fee\u6539\u7684\u5c5e\u6027\u4ee5\u53ca\u6539\u53d8\u540e\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u5373\u53ef\u5b8c\u6210\u66f4\u65b0\u64cd\u4f5c\u3002\n\n\n\u5b8c\u6574\u4ee3\u7801\n\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u5982\u4f55\u5229\u7528\u6a21\u578b\u8fdb\u884c\u589e\u5220\u6539\u67e5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u77e5\u8bc6\u90fd\u5e94\u7528\u5230\u6211\u4eec\u7684 REST \u670d\u52a1\u4e2d\uff0c\u6539\u5199\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask, request, jsonify\nfrom flask_mongoengine import MongoEngine\n\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    'db': 'the_way_to_flask',\n    'host': 'localhost',\n    'port': 27017\n}\n\ndb = MongoEngine()\ndb.init_app(app)\n\n\nclass User(db.Document):\n    name = db.StringField()\n    email = db.StringField()\n\n    def to_json(self):\n        return {\"name\": self.name,\n                \"email\": self.email}\n\n\n@app.route('/', methods=['GET'])\ndef query_records():\n    name = request.args.get('name')\n    user = User.objects(name=name).first()\n\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        return jsonify(user.to_json())\n\n\n@app.route('/', methods=['PUT'])\ndef create_record():\n    record = json.loads(request.data)\n    user = User(name=record['name'],\n                email=record['email'])\n    user.save()\n    return jsonify(user.to_json())\n\n\n@app.route('/', methods=['POST'])\ndef update_record():\n    record = json.loads(request.data)\n    user = User.objects(name=record['name']).first()\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        user.update(email=record['email'])\n    return jsonify(user.to_json())\n\n\n@app.route('/', methods=['DELETE'])\ndef delte_record():\n    record = json.loads(request.data)\n    user = User.objects(name=record['name']).first()\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        user.delete()\n    return jsonify(user.to_json())\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n\n\nCRUD \u4f7f\u7528\u7684\u57fa\u672c\u4e0a\u90fd\u662f\u6211\u4eec\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u5f97\u7f16\u5199\u4e00\u4e9b\u3002", 
            "title": "\u96c6\u6210\u6570\u636e\u5e93"
        }, 
        {
            "location": "/chapter004/#flask-mongoengine", 
            "text": "\u5728\u524d\u9762\u4e00\u7ae0  \u7b80\u5355\u7684 REST \u670d\u52a1  \u4e2d\uff0c\u6211\u4eec\u7684\u6570\u636e\u90fd\u662f\u4fdd\u5b58\u5728\u6587\u4ef6\u4e2d\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6837\u5f88\u662f\u7e41\u7410\uff0c\u6bcf\u4e2a\u8bf7\u6c42\u4e2d\u90fd\u9700\u8981\u8fdb\u884c\u8bfb\u53d6\u6587\u4ef6\uff0c\u5199\u51fa\u6587\u4ef6\u7684\u64cd\u4f5c\uff0c\u867d\u7136\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u5bf9\u6587\u4ef6\u64cd\u4f5c\u8fdb\u884c\u4e00\u4e2a\u5c01\u88c5\uff0c\u4f46\u662f\uff0c\u6bd5\u7adf\u662f\u6587\u4ef6\u5b58\u50a8\uff0c\u6570\u636e\u7a0d\u5fae\u591a\u4e00\u70b9\u67e5\u8be2\u7b49\u64cd\u4f5c\u5fc5\u7136\u65f6\u95f4\u53d8\u957f\u3002  \u9762\u5bf9\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u91cc\u5f15\u5165\u4e86\u5bf9\u6570\u636e\u5e93\u7684\u4f9d\u8d56\uff0c\u5728\u6211\u4eec\u7684  \u672c\u4e66\u6982\u8ff0  \u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86\u6570\u636e\u5e93\u7684\u7248\u672c\u4fe1\u606f\uff0c\u672c\u7ae0\u4f7f\u7528\u7684\u662f MongoDB\uff0c\u5177\u4f53\u7684\u7248\u672c\u8fd8\u6709\u6570\u636e\u5e93\u5730\u5740\u4fe1\u606f\u4e3a\uff1a  version\uff1a3.2.6\nip\uff1alocalhost\nport\uff1a27017", 
            "title": "\u4f7f\u7528 Flask-MongoEngine \u96c6\u6210\u6570\u636e\u5e93"
        }, 
        {
            "location": "/chapter004/#_1", 
            "text": "\u65e2\u7136\u6211\u4eec\u60f3\u4f7f\u7528\u6570\u636e\u5e93\u6765\u4fdd\u5b58\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u539f\u751f\u7684 pymongo \u6765\u64cd\u4f5c MongoDB\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u8fd9\u91cc\u4e3a\u4e86\u66f4\u8fdb\u4e00\u6b65\u5f97\u7b80\u5316\u6211\u4eec\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u521b\u5efa\u6570\u636e\u6a21\u578b\u3002  \u6570\u636e\u6a21\u578b\u4e3b\u8981\u7684\u529f\u80fd\u662f\u7528\u4e8e\u8bf4\u660e\u6211\u4eec\u7684\u6570\u636e\u5305\u542b\u54ea\u4e9b\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u5206\u522b\u662f\u4ec0\u4e48\u7c7b\u578b\uff0c\u6709\u4ec0\u4e48\u5c5e\u6027\uff08\u552f\u4e00\u7684\uff0c\u8fd8\u662f\u56fa\u5b9a\u51e0\u4e2a\u503c\u4e2d\u7684\u4e00\u4e2a\uff09\u7b49\u7b49\u3002\u8fd9\u6837\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5728\u64cd\u4f5c\u6570\u636e\u7684\u65f6\u5019\u53ef\u4ee5\u65f6\u523b\u5f88\u6e05\u6670\u5f97\u77e5\u9053\u6211\u4eec\u7684\u6570\u636e\u7684\u4fe1\u606f\uff0c\u5373\u4f7f\u6211\u4eec\u4e0d\u770b\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u3002  \u8fd9\u91cc\u6211\u4eec\u8981\u4ecb\u7ecd\u7684\u64cd\u4f5c MongoDB \u7684 Flask \u6269\u5c55\u662f Flask-MongoEngine\uff0c\u8fd9\u4e2a\u6269\u5c55\u662f MongoEngine \u5728 Flask \u4e0a\u7684\u6269\u5c55\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528 MongoEngine \u800c\u4e0d\u4f9d\u8d56\u4e8e Flask\uff0c\u4f46\u4f9d\u4e0d\u4f9d\u8d56\u76f8\u5dee\u4e0d\u591a\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e\u914d\u7f6e\u5982\u4f55\u5904\u7f6e\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u4f9d\u8d56 Flask \u7684\u6269\u5c55\u3002  \u8981\u5728 Flask \u4e2d\u4f7f\u7528 MongoEngine\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u5148\u5728 Flask \u4e2d\u914d\u7f6e MongoDB \u7684\u4fe1\u606f\uff0c\u7136\u540e\u518d\u4f7f\u7528\u6211\u4eec\u7684\u670d\u52a1\u5668\u521d\u59cb\u5316 MongoEngine\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u6570\u636e\u5e93\u548c\u670d\u52a1\u5668\u5efa\u7acb\u4e86\u8054\u7cfb\uff0c\u8fd9\u4e2a\u5728\u4ee3\u7801\u4e2d\u53ef\u4ee5\u8fd9\u6837\u6765\u8868\u793a\uff1a  app.config['MONGODB_SETTINGS'] = {\n    'db': 'the_way_to_flask',\n    'host': 'localhost',\n    'port': 27017\n}\n\ndb = MongoEngine()\ndb.init_app(app)  \u5efa\u7acb\u8054\u7cfb\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 MongoEngine \u521b\u5efa\u6570\u636e\u6a21\u578b\u4e86\u3002  \u6211\u4eec\u8fd9\u91cc\u8fd8\u662f\u7ee7\u627f\u4e0a\u4e00\u7ae0\u4e2d\u7684\u6570\u636e\u6a21\u578b\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u4e24\u4e2a\u5b57\u6bb5\uff0c\u5206\u522b\u662f name \u548c email\uff1a  class User(db.Document):\n    name = db.StringField()\n    email = db.StringField()  \u8fd9\u6837\uff0c\u6211\u4eec\u7684\u6570\u636e\u6a21\u578b\u521b\u5efa\u597d\u4e86\uff0c\u6574\u6bb5\u5b8c\u6574\u7684\u4ee3\u7801\u662f\uff1a  #!/usr/bin/env python\n# encoding: utf-8\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\n\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    'db': 'the_way_to_flask',\n    'host': 'localhost',\n    'port': 27017\n}\n\ndb = MongoEngine()\ndb.init_app(app)\n\n\nclass User(db.Document):\n    name = db.StringField()\n    email = db.StringField()\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)", 
            "title": "\u521b\u5efa\u6570\u636e\u6a21\u578b"
        }, 
        {
            "location": "/chapter004/#_2", 
            "text": "\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u6709\u6570\u636e\u6a21\u578b(Model)\u548c\u6570\u636e\u5e93\u5173\u8054\u8d77\u6765\u4e86\uff0c\u90a3\u5149\u6709\u5173\u8054\u6ca1\u7528\u554a\uff0c\u6211\u4eec\u6ca1\u529e\u6cd5\u64cd\u4f5c\u554a\u3002\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u5c31\u662f\u8bb2\u89e3\u5982\u4f55\u901a\u8fc7 Model \u5bf9\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u589e\u5220\u6539\u67e5\u3002", 
            "title": "\u64cd\u4f5c\u6570\u636e"
        }, 
        {
            "location": "/chapter004/#_3", 
            "text": "MongoEngine \u7684\u589e\u5220\u6539\u67e5\u975e\u5e38\u7b80\u5355\uff0c\u4f8b\u5982\u67e5\u8be2\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\uff1a  User.objects(name=\"zhangsan\").first()  \u8fd9\u4e2a\u8bed\u53e5\u5c31\u5c06\u6570\u636e\u5e93\u4e2d\u540d\u5b57\u4e3a zhangsan \u7684\u7528\u6237\u67e5\u8be2\u51fa\u6765\u4e86\u3002\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u8bed\u53e5\u662f\u600e\u4e48\u67e5\u8be2\u7684\u3002  \u9996\u5148\u662f  User.objects \uff0c\u8fd9\u91cc\u7684  User  \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u662f\u6211\u4eec\u7684 Model\uff0c\u90a3\u65e2\u7136 User \u90fd\u5df2\u7ecf\u662f Model \u4e86\u4e3a\u4ec0\u4e48\u8fd8\u8981 objects \u5462\uff1f  \u5c31\u662f\u56e0\u4e3a User \u662f Model\uff0c\u56e0\u4e3a Model \u672c\u8eab\u53ea\u4ee3\u8868\u6570\u636e\u7ed3\u6784\uff0c\u90a3\u548c\u6211\u4eec\u67e5\u8be2\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\uff1f\u6240\u4ee5\u8fd9\u91cc\u5f15\u5165\u4e86\u4e00\u4e2a objects \u5c5e\u6027\uff0c\u8868\u793a\u4e00\u4e2a\u67e5\u8be2\u96c6\uff0c\u8fd9\u4e2a\u96c6\u5408\u9ed8\u8ba4\u5c31\u8868\u793a User \u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\uff0c\u6240\u4ee5\u6211\u4eec\u540e\u9762\u7684  name=\u201czhangsan\u201d  \u5c31\u6709\u70b9\u597d\u7406\u89e3\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u4ece User \u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\u4e2d\u8fc7\u6ee4\u51fa name \u7684\u503c\u4e3a zhangsan \u7684\u8bb0\u5f55\uff0c\u522b\u5fd8\u4e86\uff0c\u8fc7\u6ee4\u51fa\u6765\u7684\u6570\u636e\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a User \u5bf9\u8c61\uff0c\u6240\u4ee5\u6211\u4eec\u540e\u9762\u8fd8\u52a0\u4e86\u4e00\u4e2a  first  \u83b7\u53d6\u8fd9\u4e2a\u96c6\u5408\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002  \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u67e5\u8be2\u5230\u4e86\u4e00\u4e2a User \u5bf9\u8c61\u3002", 
            "title": "\u67e5\u8be2"
        }, 
        {
            "location": "/chapter004/#_4", 
            "text": "\u589e\u52a0\u65b0\u8bb0\u5f55\u5c31\u66f4\u7b80\u5355\u4e86\uff0c\u4f8b\u5982\u6211\u60f3\u63d2\u5165\u4e00\u4e2a  name  \u4e3a  lisi \uff0c email  \u4e3a  lisi@gmail.com  \u7684\u7528\u6237\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a  User(name='lisi', email='lisi@gmail.com').save()  \u5c31\u8fd9\u4e48\u7b80\u5355\uff0c\u9996\u5148\uff0c\u6211\u4eec\u60f3\u521b\u5efa\u4e86\u4e00\u4e2a User \u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528 save \u65b9\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002", 
            "title": "\u65b0\u589e"
        }, 
        {
            "location": "/chapter004/#_5", 
            "text": "\u8003\u8651\u4e00\u4e0b\u5982\u679c\u6211\u4eec\u8981\u5220\u9664\u4e00\u4e2a\u8bb0\u5f55\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u9700\u8981\u5148\u627e\u5230\u8fd9\u4e2a\u9700\u8981\u5220\u9664\u7684\u8bb0\u5f55\uff1f\u5728 MongoEngine \u4e2d\u5c31\u662f\u8fd9\u6837\u7684\uff0c\u5982\u679c\u6211\u4eec\u8981\u5220\u9664\u4e00\u4e2a\u8bb0\u5f55\uff0c\u6211\u4eec\u60f3\u627e\u5230\u5b83\uff0c\u4f7f\u7528\u7684\u662f\u67e5\u8be2\uff1a  user = User.objects(name=\"zhangsan\").first()  \u627e\u5230\u4e4b\u540e\uff0c\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8c03\u7528 delete \u65b9\u6cd5\u5373\u53ef\uff1a  user.delete()  \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u5c06 zhangsan \u8fd9\u4e2a\u7528\u6237\u5220\u9664\u6389\u4e86\u3002", 
            "title": "\u5220\u9664"
        }, 
        {
            "location": "/chapter004/#_6", 
            "text": "\u548c\u5220\u9664\u4e00\u6837\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u4e00\u6761\u8bb0\u5f55\uff0c\u90a3\u4e48\u6211\u4eec\u4e5f\u5148\u9700\u8981\u627e\u5230\u4ed6\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u66f4\u65b0 lisi \u7684\u90ae\u7bb1\u4e3a\uff1a lisi@outlook.com\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a  user = User.objects(name=\"zhangsan\").first()\nuser.update(email=\"lisi@outlook.com\")  \u7b2c\u4e00\u53e5\u8fd8\u662f\u67e5\u8be2\u5566\uff0c\u7b2c\u4e8c\u53e5\u8fd9\u91cc\u4f7f\u7528\u4e86 update \u65b9\u6cd5\uff0c\u76f4\u63a5\u5c06\u9700\u8981\u4fee\u6539\u7684\u5c5e\u6027\u4ee5\u53ca\u6539\u53d8\u540e\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\uff0c\u5373\u53ef\u5b8c\u6210\u66f4\u65b0\u64cd\u4f5c\u3002", 
            "title": "\u66f4\u65b0"
        }, 
        {
            "location": "/chapter004/#_7", 
            "text": "\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u5982\u4f55\u5229\u7528\u6a21\u578b\u8fdb\u884c\u589e\u5220\u6539\u67e5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u77e5\u8bc6\u90fd\u5e94\u7528\u5230\u6211\u4eec\u7684 REST \u670d\u52a1\u4e2d\uff0c\u6539\u5199\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a  #!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask, request, jsonify\nfrom flask_mongoengine import MongoEngine\n\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    'db': 'the_way_to_flask',\n    'host': 'localhost',\n    'port': 27017\n}\n\ndb = MongoEngine()\ndb.init_app(app)\n\n\nclass User(db.Document):\n    name = db.StringField()\n    email = db.StringField()\n\n    def to_json(self):\n        return {\"name\": self.name,\n                \"email\": self.email}\n\n\n@app.route('/', methods=['GET'])\ndef query_records():\n    name = request.args.get('name')\n    user = User.objects(name=name).first()\n\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        return jsonify(user.to_json())\n\n\n@app.route('/', methods=['PUT'])\ndef create_record():\n    record = json.loads(request.data)\n    user = User(name=record['name'],\n                email=record['email'])\n    user.save()\n    return jsonify(user.to_json())\n\n\n@app.route('/', methods=['POST'])\ndef update_record():\n    record = json.loads(request.data)\n    user = User.objects(name=record['name']).first()\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        user.update(email=record['email'])\n    return jsonify(user.to_json())\n\n\n@app.route('/', methods=['DELETE'])\ndef delte_record():\n    record = json.loads(request.data)\n    user = User.objects(name=record['name']).first()\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        user.delete()\n    return jsonify(user.to_json())\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)  CRUD \u4f7f\u7528\u7684\u57fa\u672c\u4e0a\u90fd\u662f\u6211\u4eec\u4ecb\u7ecd\u7684\u65b9\u6cd5\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u5f97\u7f16\u5199\u4e00\u4e9b\u3002", 
            "title": "\u5b8c\u6574\u4ee3\u7801"
        }, 
        {
            "location": "/chapter005/", 
            "text": "\u4f7f\u7528 Flask-Login \u6ce8\u518c\u767b\u5f55\n\n\n\u5728\u6211\u4eec\u7684\u524d\u51e0\u7ae0\u4e2d\uff0c\u56f4\u7ed5\u7740\u8981\u8bb2\u89e3\u7684\u5185\u5bb9\u6301\u7eed\u5f97\u518d\u4e30\u5bcc\u4e00\u4e2a REST \u670d\u52a1\u3002\u4f46\u662f\uff0c\u622a\u6b62\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u8fd9\u4e2a REST \u670d\u52a1\u90fd\u662f\u6ca1\u6709\u6743\u9650\u63a7\u5236\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5c06\u8fd9\u4e2a REST \u670d\u52a1\u53d1\u5e03\u5230\u5916\u7f51\u4e0a\u53bb\uff0c\u90a3\u4e48\u5c06\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u64cd\u4f5c\uff0c\u589e\u5220\u6539\u67e5\u90fd\u4e0d\u662f\u95ee\u9898\u3002\n\n\n\u4f5c\u4e3a\u6211\u4eec\u7684\u91cd\u8981\u670d\u52a1\uff08\u771f\u7684\u5f88\u91cd\u8981:-D\uff09\uff0c\u6211\u4eec\u600e\u4e48\u80fd\u8ba9\u522b\u4eba\u968f\u4fbf\u64cd\u4f5c\u6211\u4eec\u7684\u6570\u636e\u5462\uff0c\u6240\u4ee5\u8fd9\u4e00\u7ae0\u5c31\u8bb2\u89e3\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 Flask \u7684\u53c8\u4e00\u6269\u5c55 \nFlask-Login\n \u6765\u8fdb\u884c\u8bbf\u95ee\u63a7\u5236\u3002\n\n\n\u5b89\u88c5 Flask-Login\n\n\n\u6839\u636e\u5728 \u300a\n\u672c\u4e66\u6982\u8ff0\n\u300b\u4e2d\u5217\u4e3e\u7684\u90a3\u6837\uff0c\u6211\u4eec\u4f7f\u7528\u7684 \nFlask-Login \n\u7684\u7248\u672c\u662f \n\n\nFlask-Login==0.3.2\n\n\n\n\u6240\u4ee5\u5b89\u88c5\u7684\u8bdd\u76f4\u63a5\u4f7f\u7528 pip \u5b89\u88c5\u5373\u53ef\uff1a\n\n\npip install Flask-Login==0.3.2\n\n\n\n\u521d\u59cb\u5316 Flask-Login\n\n\n\u548c\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4f7f\u7528 Flask-MongoEngine \u4e00\u6837\uff0c\u4f7f\u7528 Flask-Login \u8fd8\u662f\u4f9d\u8d56\u4e8e Flask\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u9700\u8981\u548c app \u8fd9\u6837\u670d\u52a1\u5668\u7ed1\u5b9a\u8d77\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u8fd8\u662f\u9700\u8981\u8fd9\u6837\u548c\u670d\u52a1\u5668\u7ed1\u5b9a\u7684\uff1a\n\n\nfrom flask.ext.login import LoginManager\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n\n\n\n\u8fd9\u6837\u5c31\u5c06 Flask-Login \u548c\u670d\u52a1\u5668\u7ed1\u5b9a\u8d77\u6765\u4e86\u3002\u4f46\u662f\uff0c\u8fd9\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff0c\u6211\u4eec\u8981\u600e\u4e48\u767b\u9646\u5462\uff1fFlask-Login \u600e\u4e48\u624d\u77e5\u9053\u767b\u5f55\u7684 URL \u7684\u662f\u54ea\u4e2a\uff1f\u600e\u4e48\u9a8c\u8bc1\u6211\u4eec\u7684\u8d26\u53f7\u5bc6\u7801\uff1f\u600e\u4e48\u624d\u80fd\u77e5\u9053\u767b\u9646\u7684\u7528\u6237\u662f\u8c01\uff1f\u8fd9\u4e9b\u90fd\u662f\u5173\u952e\u7684\u95ee\u9898\u554a\u3002\n\n\n\u8bbe\u7f6e Flask-Login\n\n\n\u5bf9\u4e8e\u524d\u9762\u63d0\u5230\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u4e00\u89e3\u51b3\uff0c\u89e3\u51b3\u5b8c\u4e4b\u540e\u6211\u4eec\u7684 Flask-Login \u5c31\u5dee\u4e0d\u591a\u7b97\u662f\u4f1a\u4f7f\u7528\u4e86\u3002\n\n\n\u9996\u5148\u662f\u767b\u9646\u7684 URL \u662f\u4ec0\u4e48\uff1f\u8fd9\u4e2a\u5728 Flask-Login \u4e2d\u662f\u6ca1\u6709\u9ed8\u8ba4\u7684\u767b\u9646 URL \u7684\uff0c\u6240\u4ee5\u9700\u8981\u6211\u4eec\u6307\u5b9a\uff1a\n\n\nfrom flask.ext.login import login_user\n\nlogin_manager.login_view = 'login'\n\n@app.route('/login', methods=['POST'])\ndef login():\n    info = json.loads(request.data)\n    username = info.get('username', 'guest')\n    password = info.get('password', '')\n\n    user = User.objects(name=username,\n                        password=password).first()\n    if user:\n        login_user(user)\n        return jsonify(user.to_json())\n    else:\n        return jsonify({\"status\": 401,\n                        \"reason\": \"Username or Password Error\"})\n\n\n\n\u8fd9\u91cc\u5176\u5b9e\u5c31\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a\n\n\n\n\n\u6307\u5b9a\u4e86 login_view \u4e3a 'login'\n\n\n\u7f16\u5199\u7684\u767b\u9646\u7684\u4ee3\u7801\u903b\u8f91\n\n\n\n\n\u90a3\u6211\u4eec\u6765\u770b\u7b2c\u4e00\u70b9\uff0c\u6307\u5b9a login_view\uff0c\u4e5f\u5c31\u662f\u544a\u8bc9 Flask \u6211\u4eec\u7684\u5904\u7406\u7684\u767b\u9646\u7684 URL \u662f\u54ea\u4e2a\u3002\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u662f 'login'\uff0c\u90a3\u4e48 Flask \u662f\u600e\u4e48\u6839\u636e login \u627e\u5230\u6211\u4eec\u7684\u767b\u9646\u903b\u8f91\u6240\u5728\u7684\u4f4d\u7f6e\u7684\u5462\uff1f\u8fd9\u91cc\u9664\u4e86 'login' \u6211\u4eec\u8fd8\u80fd\u586b\u5199\u5176\u4ed6\u7684\u5b57\u7b26\u4e32\u5417\uff1f\n\n\n\u8fd9\u91cc\u5148\u7ed9\u51fa\u7b54\u6848\uff0c\u662f\u4e0d\u80fd\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6211\u4eec\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u5fc5\u987b\u6307\u5b9a\u4e3a 'login'\uff0c\u8fd9\u91cc\u7684 'login' \u7684\u610f\u601d\u5c31\u662f\u5728\u5f53\u524d\u6587\u4ef6\u627e\u5230 \n\n\ndef login(self, xxx)\n\n\n\n\u8fd9\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u5b83\u5c31\u662f\u6211\u4eec\u5904\u7406\u767b\u9646\u903b\u8f91\u4ee3\u7801\u6240\u5728\u7684\u5730\u65b9\u3002\n\n\n\u5047\u5982\u8bf4\u6211\u4eec\u5904\u7406\u767b\u9646\u903b\u8f91\u7684\u4ee3\u7801\u6ca1\u6709\u653e\u5728\u8fd9\u4e2a\u6587\u4ef6\uff0c\u800c\u662f\u653e\u5728\u4e86\u5176\u4ed6\u6587\u4ef6\uff0c\u4f8b\u5982 auth.py \u91cc\u9762\u7684 login \u51fd\u6570\u91cc\u9762\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u6307\u5b9a\u4e3a\uff1a\n\n\nlogin_view = 'auth.login'\n\n\n\n\u767b\u9646\u903b\u8f91\n\n\n\u8fd8\u662f\u770b\u56de\u4e0a\u4e00\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684 Flask \u5904\u7406\u8bf7\u6c42\u7684\u51fd\u6570\uff0c\u8bf4\u666e\u901a\u5728\u4e8e\uff1a\n\n\n\n\n\u4ece\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4e2d\u83b7\u5f97\u53c2\u6570\uff0c\u548c\u4e4b\u524d\u7684 CRUD \u4e00\u6837\n\n\n\u65e0\u8bba\u662f\u767b\u9646\u6210\u529f\u8fd8\u662f\u5931\u8d25\u90fd\u8fd4\u56de json \u4e32\u7ed9\u5ba2\u6237\u7aef\n\n\n\n\n\u90a3\u4e48\u51ed\u4ec0\u4e48\u8fd9\u6bb5\u4ee3\u7801\u5c31\u80fd\u80dc\u4efb\u767b\u9646\u7528\u6237\u7684\u804c\u8d23\u5462\uff1f\u95ee\u9898\u7684\u5173\u952e\u5c31\u5728\u4e8e \n\n\nlogin_user(user)\n\n\n\n\u8fd9\u4e00\u53e5\uff0c\u4ec5\u4ec5\u662f\u901a\u8fc7\u8fd9\u7b80\u5355\u7684\u4e00\u53e5\uff0c\u5c31\u5c06\u5f53\u524d\u7528\u6237\u7684\u72b6\u6001\u8bbe\u7f6e\u6210\u5df2\u767b\u5f55\u3002\u8fd9\u91cc\u4e0d\u505a\u8fc7\u6df1\u5165\u7684\u8bb2\u89e3\uff0c\u53ea\u9700\u8981\u77e5\u9053\u5f53\u8fd9\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u4e4b\u540e\uff0c\u7528\u6237\u7684\u72b6\u6001\u5c31\u662f\u767b\u9646\u72b6\u6001\u4e86\u3002\n\n\n\u90a3\u73b0\u5728\u95ee\u9898\u662f\uff0c\u4e0b\u6b21\u6709\u8bf7\u6c42\u8fc7\u6765\uff0c\u6211\u4eec\u600e\u4e48\u77e5\u9053\u662f\u4e0d\u662f\u6709\u7528\u6237\u767b\u9646\u4e86\uff0c\u600e\u4e48\u77e5\u9053\u662f\u54ea\u4e2a\u7528\u6237\uff1f\u8fd9\u65f6\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u7684 Model \u8fd8\u4e0d\u591f\u5b8c\u5584\uff0c\u9700\u8981\u5b8c\u5584\u4e00\u4e0b Model\u3002\u5177\u4f53\u5e94\u8be5\u8fd9\u6837\u5b8c\u5584\u4e00\u4e0b\uff1a\n\n\nclass User(db.Document):   \n    name = db.StringField()\n    password = db.StringField()\n    email = db.StringField()\n\n    def to_json(self):        \n        return {\"name\": self.name,\n                \"email\": self.email}\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):   \n        return True\n\n    def is_anonymous(self):\n        return False\n\n    def get_id(self):         \n        return str(self.id)\n\n\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u589e\u52a0\u4e86\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5206\u522b\u662f\uff1a\n\n\n\n\nis_authenticated\uff1a\u5f53\u524d\u7528\u6237\u662f\u5426\u88ab\u6388\u6743\uff0c\u56e0\u4e3a\u6211\u4eec\u767b\u9646\u4e86\u5c31\u53ef\u4ee5\u64cd\u4f5c\uff0c\u6240\u4ee5\u9ed8\u8ba4\u90fd\u662f\u88ab\u6388\u6743\u7684\n\n\nis_anonymous: \u7528\u4e8e\u5224\u65ad\u5f53\u524d\u7528\u6237\u662f\u5426\u662f\u533f\u540d\u7528\u6237\uff0c\u5f88\u660e\u663e\uff0c\u5982\u679c\u8fd9\u4e2a\u7528\u6237\u767b\u9646\u4e86\uff0c\u5c31\u5fc5\u987b\u4e0d\u662f\n\n\nis_active\uff1a \u7528\u4e8e\u5224\u65ad\u5f53\u524d\u7528\u6237\u662f\u5426\u5df2\u7ecf\u6fc0\u6d3b\uff0c\u5df2\u7ecf\u6fc0\u6d3b\u7684\u7528\u6237\u624d\u80fd\u767b\u9646\n\n\nget_id\uff1a \u83b7\u53d6\u6539\u7528\u6237\u7684\u552f\u4e00\u6807\u793a\n\n\n\n\n\u8fd9\u91cc\uff0c\u6211\u4eec\u4ec5\u4ec5\u53ef\u4ee5\u901a\u8fc7 is_authenticated \u6765\u5224\u65ad\u7528\u6237\u65f6\u5019\u6709\u6743\u9650\u64cd\u4f5c\u6211\u4eec\u7684 API\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u8fd8\u4e0d\u80fd\u77e5\u9053\u5f53\u524d\u7684\u767b\u9646\u7528\u6237\u662f\u8c01\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u544a\u8bc9 Flask-Login \u5982\u4f55\u901a\u8fc7\u4e00\u4e2a id \u83b7\u53d6\u5230\u7528\u6237\u7684\u65b9\u6cd5\uff1a\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.objects(id=user_id).first()\n\n\n\n\u901a\u8fc7\u6307\u5b9a user_loader\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u8be2\u5230\u5f53\u524d\u7684\u767b\u9646\u7528\u6237\u662f\u8c01\u4e86\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u767b\u9646\u3001\u5224\u65ad\u7528\u6237\u662f\u5426\u767b\u9646\u90fd\u5b8c\u5584\u8d77\u6765\u4e86\u3002\n\n\n\u767b\u9646\u53ef\u89c1\n\n\n\u65e2\u7136\u90fd\u767b\u9646\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u63a7\u5236\u767b\u9646\u7684\u6743\u9650\u4e86\uff0c\u6211\u4eec\u8bbe\u7f6e\u589e\u52a0\u3001\u5220\u9664\u548c\u4fee\u6539\u7684 REST API \u4e3a\u767b\u9646\u624d\u80fd\u4f7f\u7528\uff0c\u552f\u6709\u67e5\u8be2\u7684 API \u624d\u80fd\u968f\u4fbf\u53ef\u89c1\u3002\n\n\n\u63a7\u5236\u767b\u9646\u53ef\u7528\u7684\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u52a0\u4e00\u4e2a login_required \u7684\u88c5\u9970\u5668\u5373\u53ef\u3002\u6211\u4eec\u8fd8\u662f\u4ee5\u4e4b\u524d\u90a3\u4e9b\u7ae0\u8282\u7684 REST DEMO \u4e3a\u4f8b\u8fdb\u884c\u6539\u5199\uff1a\n\n\nfrom flask.ext.login import login_required\n\n@app.route('/', methods=['PUT'])      \n@login_required                       \ndef create_record(): \n    ......\n\n@app.route('/', methods=['POST'])                                                                                            \n@login_required\ndef update_record():\n    ......\n\n@app.route('/', methods=['DELETE'])\n@login_required\ndef delte_record():\n    ......\n\n\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u9650\u5236\u4e86\u589e\u52a0\u3001\u4fee\u6539\u548c\u5220\u9664\u64cd\u4f5c\u5fc5\u987b\u767b\u9646\u7528\u6237\u624d\u80fd\u64cd\u4f5c\uff0c\u800c\u6211\u4eec\u4e5f\u80fd\u8bb0\u5f55\u662f\u54ea\u4e2a\u7528\u6237\u505a\u7684\u64cd\u4f5c\u4e86\u3002\n\n\n\u7528\u6237\u4fe1\u606f\n\n\n\u65e2\u7136\u670d\u52a1\u5668\u63d0\u4f9b\u4e86\u767b\u9646\u7684\u652f\u6301\uff0c\u90a3\u4e48\u80af\u5b9a\u5c11\u4e0d\u4e86\u9000\u51fa\u767b\u9646\u7684\u652f\u6301\uff1b\u540c\u65f6\uff0c\u4f5c\u4e3a\u5ba2\u6237\u7aef\uff0c\u53ef\u80fd\u5173\u6ce8\u7684\u662f\u60f3\u77e5\u9053\u5230\u5e95\u6709\u6ca1\u6709\u767b\u9646\uff1f\n\n\n\u5bf9\u4e8e\u9000\u51fa\u767b\u9646\uff0c\u5f88\u7b80\u5355\uff0c\u90fd\u6839\u672c\u4e0d\u9700\u8981\u4f7f\u7528\u5230 User \u7684\u8fd9\u4e2a Model \u4e86\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\nfrom flask.ext.login import logout_user\n\n@app.route('/logout', methods=['POST'])\ndef logout():\n    logout_user()\n    return jsonify(**{'result': 200,\n                      'data': {'message': 'logout success'}})\n\n\n\n\u8fd9\u91cc\u5c31\u8c03\u7528\u4e86\u4e00\u4e2a  \nlogout_user\n \u7684\u65b9\u6cd5\u5c31\u9000\u51fa\u4e86\u767b\u9646\u3002\n\n\n\u7136\u800c\u5373\u4f7f\u9000\u51fa\u4e86\u767b\u9646\u5ba2\u6237\u7aef\u4e5f\u4e0d\u77e5\u9053\uff0c\u9664\u975e\u5c1d\u8bd5\u8bf7\u6c42\u4e00\u4e0b\u65b0\u589e\u3001\u4fee\u6539\u6216\u8005\u5220\u9664\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u65e0\u6cd5\u64cd\u4f5c\u4e86\uff0c\u8fd9\u65f6\u5c31\u77e5\u9053\u4e86\u6211\u5df2\u7ecf\u9000\u51fa\u767b\u9646\u4e86\uff0c\u8fd9\u6837\u660e\u663e\u4e0d\u5408\u7406\uff01\u6240\u4ee5\uff0c\u8fd9\u91cc\u518d\u589e\u52a0\u4e00\u4e2a\u83b7\u53d6\u5f53\u524d\u767b\u9646\u7528\u6237\u4fe1\u606f\u7684\u63a5\u53e3\uff1a\n\n\nfrom flask.ext.login import current_user\n\n@app.route('/user_info', methods=['POST'])\ndef user_info():\n    if current_user.is_authenticated:\n        resp = {\"result\": 200,\n                \"data\": current_user.to_json()}\n    else:                                                                                                                    \n        resp = {\"result\": 401,\n                \"data\": {\"message\": \"user no login\"}}\n    return jsonify(**resp)\n\n\n\n\u8fd9\u91cc\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\u5c31\u662f\u7b2c\u4e00\u53e5\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u6210\u5458\u53eb\u505a \ncurrent_user\n\uff0c\u8fd9\u4e2a\u53d8\u91cf\u8868\u793a\u7684\u662f\u5f53\u524d\u8bf7\u6c42\u7684\u767b\u9646\u7528\u6237\uff0c\u5982\u679c\u767b\u9646\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u6211\u4eec\u8bbe\u7f6e\u7684 Model User \u7684\u5bf9\u8c61\uff0c\u6839\u636e\u6211\u4eec\u7684 Model \u5b9a\u4e49\uff0c is_authenticated \u4e00\u76f4\u4e3a True\uff0c\u8868\u793a\u767b\u9646\u4e86\uff1b\u5982\u679c\u6ca1\u6709\u767b\u9646\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u9ed8\u8ba4\u7684\u533f\u540d\u7528\u6237 AnonymousUserMixin \u7684\u5bf9\u8c61\uff0cis_authenticated \u5c31\u4e3a False\uff0c\u5c31\u8868\u793a\u6ca1\u6709\u767b\u9646\u3002\n\n\n\u5982\u679c\u767b\u9646\u7684\u8bdd\uff0c\u90a3\u4e48 current_user \u5c31\u662f User \u7684\u5bf9\u8c61\u4e86\uff0c\u90a3\u4e48 to_json \u65b9\u6cd5\u5c31\u53ef\u4ee5\u8fd4\u56de\u5f53\u524d\u767b\u9646\u7528\u6237\u7684\u7528\u6237\u4fe1\u606f\u4e86\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u7684 API \u4e86\u3002\n\n\n\u672c\u7ae0\u7684\u5b8c\u6574\u4ee3\u7801\u4e3a\uff1a\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask, request, jsonify\nfrom flask.ext.login import (current_user, LoginManager,\n                             login_user, logout_user,\n                             login_required)\nfrom flask_mongoengine import MongoEngine\n\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    'db': 'the_way_to_flask',\n    'host': 'localhost',\n    'port': 27017\n}\napp.secret_key = 'youdontknowme'\n\ndb = MongoEngine()\nlogin_manager = LoginManager()\ndb.init_app(app)\nlogin_manager.init_app(app)\n\n\nlogin_manager.login_view = 'login'\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.objects(id=user_id).first()\n\n\n@app.route('/login', methods=['POST'])\ndef login():\n    info = json.loads(request.data)\n    username = info.get('username', 'guest')\n    password = info.get('password', '')\n\n    user = User.objects(name=username,\n                        password=password).first()\n    if user:\n        login_user(user)\n        return jsonify(user.to_json())\n    else:\n        return jsonify({\"status\": 401,\n                        \"reason\": \"Username or Password Error\"})\n\n\n@app.route('/logout', methods=['POST'])\ndef logout():\n    logout_user()\n    return jsonify(**{'result': 200,\n                      'data': {'message': 'logout success'}})\n\n\n@app.route('/user_info', methods=['POST'])\ndef user_info():\n    if current_user.is_authenticated:\n        resp = {\"result\": 200,\n                \"data\": current_user.to_json()}\n    else:\n        resp = {\"result\": 401,\n                \"data\": {\"message\": \"user no login\"}}\n    return jsonify(**resp)\n\n\nclass User(db.Document):\n    name = db.StringField()\n    password = db.StringField()\n    email = db.StringField()\n\n    def to_json(self):\n        return {\"name\": self.name,\n                \"email\": self.email}\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):\n        return True\n\n    def is_anonymous(self):\n        return False\n\n    def get_id(self):\n        return str(self.id)\n\n\n@app.route('/', methods=['GET'])\ndef query_records():\n    name = request.args.get('name')\n    user = User.objects(name=name).first()\n\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        return jsonify(user.to_json())\n\n\n@app.route('/', methods=['PUT'])\n@login_required\ndef create_record():\n    record = json.loads(request.data)\n    user = User(name=record['name'],\n                password=record['password'],\n                email=record['email'])\n    user.save()\n    return jsonify(user.to_json())\n\n\n@app.route('/', methods=['POST'])\n@login_required\ndef update_record():\n    record = json.loads(request.data)\n    user = User.objects(name=record['name']).first()\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        user.update(email=record['email'],\n                    password=record['password'])\n    return jsonify(user.to_json())\n\n\n@app.route('/', methods=['DELETE'])\n@login_required\ndef delte_record():\n    record = json.loads(request.data)\n    user = User.objects(name=record['name']).first()\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        user.delete()\n    return jsonify(user.to_json())\n\n\nif __name__ == \"__main__\":\n    app.run(port=8080, debug=True)", 
            "title": "\u6ce8\u518c\u767b\u5f55"
        }, 
        {
            "location": "/chapter005/#flask-login", 
            "text": "\u5728\u6211\u4eec\u7684\u524d\u51e0\u7ae0\u4e2d\uff0c\u56f4\u7ed5\u7740\u8981\u8bb2\u89e3\u7684\u5185\u5bb9\u6301\u7eed\u5f97\u518d\u4e30\u5bcc\u4e00\u4e2a REST \u670d\u52a1\u3002\u4f46\u662f\uff0c\u622a\u6b62\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u8fd9\u4e2a REST \u670d\u52a1\u90fd\u662f\u6ca1\u6709\u6743\u9650\u63a7\u5236\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5c06\u8fd9\u4e2a REST \u670d\u52a1\u53d1\u5e03\u5230\u5916\u7f51\u4e0a\u53bb\uff0c\u90a3\u4e48\u5c06\u53ef\u4ee5\u88ab\u4efb\u4f55\u4eba\u64cd\u4f5c\uff0c\u589e\u5220\u6539\u67e5\u90fd\u4e0d\u662f\u95ee\u9898\u3002  \u4f5c\u4e3a\u6211\u4eec\u7684\u91cd\u8981\u670d\u52a1\uff08\u771f\u7684\u5f88\u91cd\u8981:-D\uff09\uff0c\u6211\u4eec\u600e\u4e48\u80fd\u8ba9\u522b\u4eba\u968f\u4fbf\u64cd\u4f5c\u6211\u4eec\u7684\u6570\u636e\u5462\uff0c\u6240\u4ee5\u8fd9\u4e00\u7ae0\u5c31\u8bb2\u89e3\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 Flask \u7684\u53c8\u4e00\u6269\u5c55  Flask-Login  \u6765\u8fdb\u884c\u8bbf\u95ee\u63a7\u5236\u3002", 
            "title": "\u4f7f\u7528 Flask-Login \u6ce8\u518c\u767b\u5f55"
        }, 
        {
            "location": "/chapter005/#flask-login_1", 
            "text": "\u6839\u636e\u5728 \u300a \u672c\u4e66\u6982\u8ff0 \u300b\u4e2d\u5217\u4e3e\u7684\u90a3\u6837\uff0c\u6211\u4eec\u4f7f\u7528\u7684  Flask-Login  \u7684\u7248\u672c\u662f   Flask-Login==0.3.2  \u6240\u4ee5\u5b89\u88c5\u7684\u8bdd\u76f4\u63a5\u4f7f\u7528 pip \u5b89\u88c5\u5373\u53ef\uff1a  pip install Flask-Login==0.3.2", 
            "title": "\u5b89\u88c5 Flask-Login"
        }, 
        {
            "location": "/chapter005/#flask-login_2", 
            "text": "\u548c\u6211\u4eec\u5728\u4e0a\u4e00\u7ae0\u4f7f\u7528 Flask-MongoEngine \u4e00\u6837\uff0c\u4f7f\u7528 Flask-Login \u8fd8\u662f\u4f9d\u8d56\u4e8e Flask\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u9700\u8981\u548c app \u8fd9\u6837\u670d\u52a1\u5668\u7ed1\u5b9a\u8d77\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u8fd8\u662f\u9700\u8981\u8fd9\u6837\u548c\u670d\u52a1\u5668\u7ed1\u5b9a\u7684\uff1a  from flask.ext.login import LoginManager\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)  \u8fd9\u6837\u5c31\u5c06 Flask-Login \u548c\u670d\u52a1\u5668\u7ed1\u5b9a\u8d77\u6765\u4e86\u3002\u4f46\u662f\uff0c\u8fd9\u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff0c\u6211\u4eec\u8981\u600e\u4e48\u767b\u9646\u5462\uff1fFlask-Login \u600e\u4e48\u624d\u77e5\u9053\u767b\u5f55\u7684 URL \u7684\u662f\u54ea\u4e2a\uff1f\u600e\u4e48\u9a8c\u8bc1\u6211\u4eec\u7684\u8d26\u53f7\u5bc6\u7801\uff1f\u600e\u4e48\u624d\u80fd\u77e5\u9053\u767b\u9646\u7684\u7528\u6237\u662f\u8c01\uff1f\u8fd9\u4e9b\u90fd\u662f\u5173\u952e\u7684\u95ee\u9898\u554a\u3002", 
            "title": "\u521d\u59cb\u5316 Flask-Login"
        }, 
        {
            "location": "/chapter005/#flask-login_3", 
            "text": "\u5bf9\u4e8e\u524d\u9762\u63d0\u5230\u7684\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u4e00\u89e3\u51b3\uff0c\u89e3\u51b3\u5b8c\u4e4b\u540e\u6211\u4eec\u7684 Flask-Login \u5c31\u5dee\u4e0d\u591a\u7b97\u662f\u4f1a\u4f7f\u7528\u4e86\u3002  \u9996\u5148\u662f\u767b\u9646\u7684 URL \u662f\u4ec0\u4e48\uff1f\u8fd9\u4e2a\u5728 Flask-Login \u4e2d\u662f\u6ca1\u6709\u9ed8\u8ba4\u7684\u767b\u9646 URL \u7684\uff0c\u6240\u4ee5\u9700\u8981\u6211\u4eec\u6307\u5b9a\uff1a  from flask.ext.login import login_user\n\nlogin_manager.login_view = 'login'\n\n@app.route('/login', methods=['POST'])\ndef login():\n    info = json.loads(request.data)\n    username = info.get('username', 'guest')\n    password = info.get('password', '')\n\n    user = User.objects(name=username,\n                        password=password).first()\n    if user:\n        login_user(user)\n        return jsonify(user.to_json())\n    else:\n        return jsonify({\"status\": 401,\n                        \"reason\": \"Username or Password Error\"})  \u8fd9\u91cc\u5176\u5b9e\u5c31\u505a\u4e86\u4e24\u4ef6\u4e8b\uff1a   \u6307\u5b9a\u4e86 login_view \u4e3a 'login'  \u7f16\u5199\u7684\u767b\u9646\u7684\u4ee3\u7801\u903b\u8f91   \u90a3\u6211\u4eec\u6765\u770b\u7b2c\u4e00\u70b9\uff0c\u6307\u5b9a login_view\uff0c\u4e5f\u5c31\u662f\u544a\u8bc9 Flask \u6211\u4eec\u7684\u5904\u7406\u7684\u767b\u9646\u7684 URL \u662f\u54ea\u4e2a\u3002\u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u662f 'login'\uff0c\u90a3\u4e48 Flask \u662f\u600e\u4e48\u6839\u636e login \u627e\u5230\u6211\u4eec\u7684\u767b\u9646\u903b\u8f91\u6240\u5728\u7684\u4f4d\u7f6e\u7684\u5462\uff1f\u8fd9\u91cc\u9664\u4e86 'login' \u6211\u4eec\u8fd8\u80fd\u586b\u5199\u5176\u4ed6\u7684\u5b57\u7b26\u4e32\u5417\uff1f  \u8fd9\u91cc\u5148\u7ed9\u51fa\u7b54\u6848\uff0c\u662f\u4e0d\u80fd\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6211\u4eec\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u5fc5\u987b\u6307\u5b9a\u4e3a 'login'\uff0c\u8fd9\u91cc\u7684 'login' \u7684\u610f\u601d\u5c31\u662f\u5728\u5f53\u524d\u6587\u4ef6\u627e\u5230   def login(self, xxx)  \u8fd9\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u5b83\u5c31\u662f\u6211\u4eec\u5904\u7406\u767b\u9646\u903b\u8f91\u4ee3\u7801\u6240\u5728\u7684\u5730\u65b9\u3002  \u5047\u5982\u8bf4\u6211\u4eec\u5904\u7406\u767b\u9646\u903b\u8f91\u7684\u4ee3\u7801\u6ca1\u6709\u653e\u5728\u8fd9\u4e2a\u6587\u4ef6\uff0c\u800c\u662f\u653e\u5728\u4e86\u5176\u4ed6\u6587\u4ef6\uff0c\u4f8b\u5982 auth.py \u91cc\u9762\u7684 login \u51fd\u6570\u91cc\u9762\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u6307\u5b9a\u4e3a\uff1a  login_view = 'auth.login'", 
            "title": "\u8bbe\u7f6e Flask-Login"
        }, 
        {
            "location": "/chapter005/#_1", 
            "text": "\u8fd8\u662f\u770b\u56de\u4e0a\u4e00\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684 Flask \u5904\u7406\u8bf7\u6c42\u7684\u51fd\u6570\uff0c\u8bf4\u666e\u901a\u5728\u4e8e\uff1a   \u4ece\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4e2d\u83b7\u5f97\u53c2\u6570\uff0c\u548c\u4e4b\u524d\u7684 CRUD \u4e00\u6837  \u65e0\u8bba\u662f\u767b\u9646\u6210\u529f\u8fd8\u662f\u5931\u8d25\u90fd\u8fd4\u56de json \u4e32\u7ed9\u5ba2\u6237\u7aef   \u90a3\u4e48\u51ed\u4ec0\u4e48\u8fd9\u6bb5\u4ee3\u7801\u5c31\u80fd\u80dc\u4efb\u767b\u9646\u7528\u6237\u7684\u804c\u8d23\u5462\uff1f\u95ee\u9898\u7684\u5173\u952e\u5c31\u5728\u4e8e   login_user(user)  \u8fd9\u4e00\u53e5\uff0c\u4ec5\u4ec5\u662f\u901a\u8fc7\u8fd9\u7b80\u5355\u7684\u4e00\u53e5\uff0c\u5c31\u5c06\u5f53\u524d\u7528\u6237\u7684\u72b6\u6001\u8bbe\u7f6e\u6210\u5df2\u767b\u5f55\u3002\u8fd9\u91cc\u4e0d\u505a\u8fc7\u6df1\u5165\u7684\u8bb2\u89e3\uff0c\u53ea\u9700\u8981\u77e5\u9053\u5f53\u8fd9\u4e2a\u51fd\u6570\u88ab\u8c03\u7528\u4e4b\u540e\uff0c\u7528\u6237\u7684\u72b6\u6001\u5c31\u662f\u767b\u9646\u72b6\u6001\u4e86\u3002  \u90a3\u73b0\u5728\u95ee\u9898\u662f\uff0c\u4e0b\u6b21\u6709\u8bf7\u6c42\u8fc7\u6765\uff0c\u6211\u4eec\u600e\u4e48\u77e5\u9053\u662f\u4e0d\u662f\u6709\u7528\u6237\u767b\u9646\u4e86\uff0c\u600e\u4e48\u77e5\u9053\u662f\u54ea\u4e2a\u7528\u6237\uff1f\u8fd9\u65f6\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u6211\u4eec\u7684 Model \u8fd8\u4e0d\u591f\u5b8c\u5584\uff0c\u9700\u8981\u5b8c\u5584\u4e00\u4e0b Model\u3002\u5177\u4f53\u5e94\u8be5\u8fd9\u6837\u5b8c\u5584\u4e00\u4e0b\uff1a  class User(db.Document):   \n    name = db.StringField()\n    password = db.StringField()\n    email = db.StringField()\n\n    def to_json(self):        \n        return {\"name\": self.name,\n                \"email\": self.email}\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):   \n        return True\n\n    def is_anonymous(self):\n        return False\n\n    def get_id(self):         \n        return str(self.id)  \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u91cc\u589e\u52a0\u4e86\u4e24\u4e2a\u65b9\u6cd5\uff0c\u5206\u522b\u662f\uff1a   is_authenticated\uff1a\u5f53\u524d\u7528\u6237\u662f\u5426\u88ab\u6388\u6743\uff0c\u56e0\u4e3a\u6211\u4eec\u767b\u9646\u4e86\u5c31\u53ef\u4ee5\u64cd\u4f5c\uff0c\u6240\u4ee5\u9ed8\u8ba4\u90fd\u662f\u88ab\u6388\u6743\u7684  is_anonymous: \u7528\u4e8e\u5224\u65ad\u5f53\u524d\u7528\u6237\u662f\u5426\u662f\u533f\u540d\u7528\u6237\uff0c\u5f88\u660e\u663e\uff0c\u5982\u679c\u8fd9\u4e2a\u7528\u6237\u767b\u9646\u4e86\uff0c\u5c31\u5fc5\u987b\u4e0d\u662f  is_active\uff1a \u7528\u4e8e\u5224\u65ad\u5f53\u524d\u7528\u6237\u662f\u5426\u5df2\u7ecf\u6fc0\u6d3b\uff0c\u5df2\u7ecf\u6fc0\u6d3b\u7684\u7528\u6237\u624d\u80fd\u767b\u9646  get_id\uff1a \u83b7\u53d6\u6539\u7528\u6237\u7684\u552f\u4e00\u6807\u793a   \u8fd9\u91cc\uff0c\u6211\u4eec\u4ec5\u4ec5\u53ef\u4ee5\u901a\u8fc7 is_authenticated \u6765\u5224\u65ad\u7528\u6237\u65f6\u5019\u6709\u6743\u9650\u64cd\u4f5c\u6211\u4eec\u7684 API\uff0c\u4f46\u662f\uff0c\u6211\u4eec\u8fd8\u4e0d\u80fd\u77e5\u9053\u5f53\u524d\u7684\u767b\u9646\u7528\u6237\u662f\u8c01\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u544a\u8bc9 Flask-Login \u5982\u4f55\u901a\u8fc7\u4e00\u4e2a id \u83b7\u53d6\u5230\u7528\u6237\u7684\u65b9\u6cd5\uff1a  @login_manager.user_loader\ndef load_user(user_id):\n    return User.objects(id=user_id).first()  \u901a\u8fc7\u6307\u5b9a user_loader\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u8be2\u5230\u5f53\u524d\u7684\u767b\u9646\u7528\u6237\u662f\u8c01\u4e86\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5c06\u767b\u9646\u3001\u5224\u65ad\u7528\u6237\u662f\u5426\u767b\u9646\u90fd\u5b8c\u5584\u8d77\u6765\u4e86\u3002", 
            "title": "\u767b\u9646\u903b\u8f91"
        }, 
        {
            "location": "/chapter005/#_2", 
            "text": "\u65e2\u7136\u90fd\u767b\u9646\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u63a7\u5236\u767b\u9646\u7684\u6743\u9650\u4e86\uff0c\u6211\u4eec\u8bbe\u7f6e\u589e\u52a0\u3001\u5220\u9664\u548c\u4fee\u6539\u7684 REST API \u4e3a\u767b\u9646\u624d\u80fd\u4f7f\u7528\uff0c\u552f\u6709\u67e5\u8be2\u7684 API \u624d\u80fd\u968f\u4fbf\u53ef\u89c1\u3002  \u63a7\u5236\u767b\u9646\u53ef\u7528\u7684\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u52a0\u4e00\u4e2a login_required \u7684\u88c5\u9970\u5668\u5373\u53ef\u3002\u6211\u4eec\u8fd8\u662f\u4ee5\u4e4b\u524d\u90a3\u4e9b\u7ae0\u8282\u7684 REST DEMO \u4e3a\u4f8b\u8fdb\u884c\u6539\u5199\uff1a  from flask.ext.login import login_required\n\n@app.route('/', methods=['PUT'])      \n@login_required                       \ndef create_record(): \n    ......\n\n@app.route('/', methods=['POST'])                                                                                            \n@login_required\ndef update_record():\n    ......\n\n@app.route('/', methods=['DELETE'])\n@login_required\ndef delte_record():\n    ......  \u8fd9\u6837\u6211\u4eec\u5c31\u9650\u5236\u4e86\u589e\u52a0\u3001\u4fee\u6539\u548c\u5220\u9664\u64cd\u4f5c\u5fc5\u987b\u767b\u9646\u7528\u6237\u624d\u80fd\u64cd\u4f5c\uff0c\u800c\u6211\u4eec\u4e5f\u80fd\u8bb0\u5f55\u662f\u54ea\u4e2a\u7528\u6237\u505a\u7684\u64cd\u4f5c\u4e86\u3002", 
            "title": "\u767b\u9646\u53ef\u89c1"
        }, 
        {
            "location": "/chapter005/#_3", 
            "text": "\u65e2\u7136\u670d\u52a1\u5668\u63d0\u4f9b\u4e86\u767b\u9646\u7684\u652f\u6301\uff0c\u90a3\u4e48\u80af\u5b9a\u5c11\u4e0d\u4e86\u9000\u51fa\u767b\u9646\u7684\u652f\u6301\uff1b\u540c\u65f6\uff0c\u4f5c\u4e3a\u5ba2\u6237\u7aef\uff0c\u53ef\u80fd\u5173\u6ce8\u7684\u662f\u60f3\u77e5\u9053\u5230\u5e95\u6709\u6ca1\u6709\u767b\u9646\uff1f  \u5bf9\u4e8e\u9000\u51fa\u767b\u9646\uff0c\u5f88\u7b80\u5355\uff0c\u90fd\u6839\u672c\u4e0d\u9700\u8981\u4f7f\u7528\u5230 User \u7684\u8fd9\u4e2a Model \u4e86\u3002\u4ee3\u7801\u5982\u4e0b\uff1a  from flask.ext.login import logout_user\n\n@app.route('/logout', methods=['POST'])\ndef logout():\n    logout_user()\n    return jsonify(**{'result': 200,\n                      'data': {'message': 'logout success'}})  \u8fd9\u91cc\u5c31\u8c03\u7528\u4e86\u4e00\u4e2a   logout_user  \u7684\u65b9\u6cd5\u5c31\u9000\u51fa\u4e86\u767b\u9646\u3002  \u7136\u800c\u5373\u4f7f\u9000\u51fa\u4e86\u767b\u9646\u5ba2\u6237\u7aef\u4e5f\u4e0d\u77e5\u9053\uff0c\u9664\u975e\u5c1d\u8bd5\u8bf7\u6c42\u4e00\u4e0b\u65b0\u589e\u3001\u4fee\u6539\u6216\u8005\u5220\u9664\u7684\u64cd\u4f5c\uff0c\u53d1\u73b0\u65e0\u6cd5\u64cd\u4f5c\u4e86\uff0c\u8fd9\u65f6\u5c31\u77e5\u9053\u4e86\u6211\u5df2\u7ecf\u9000\u51fa\u767b\u9646\u4e86\uff0c\u8fd9\u6837\u660e\u663e\u4e0d\u5408\u7406\uff01\u6240\u4ee5\uff0c\u8fd9\u91cc\u518d\u589e\u52a0\u4e00\u4e2a\u83b7\u53d6\u5f53\u524d\u767b\u9646\u7528\u6237\u4fe1\u606f\u7684\u63a5\u53e3\uff1a  from flask.ext.login import current_user\n\n@app.route('/user_info', methods=['POST'])\ndef user_info():\n    if current_user.is_authenticated:\n        resp = {\"result\": 200,\n                \"data\": current_user.to_json()}\n    else:                                                                                                                    \n        resp = {\"result\": 401,\n                \"data\": {\"message\": \"user no login\"}}\n    return jsonify(**resp)  \u8fd9\u91cc\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\u5c31\u662f\u7b2c\u4e00\u53e5\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u6210\u5458\u53eb\u505a  current_user \uff0c\u8fd9\u4e2a\u53d8\u91cf\u8868\u793a\u7684\u662f\u5f53\u524d\u8bf7\u6c42\u7684\u767b\u9646\u7528\u6237\uff0c\u5982\u679c\u767b\u9646\u4e86\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u6211\u4eec\u8bbe\u7f6e\u7684 Model User \u7684\u5bf9\u8c61\uff0c\u6839\u636e\u6211\u4eec\u7684 Model \u5b9a\u4e49\uff0c is_authenticated \u4e00\u76f4\u4e3a True\uff0c\u8868\u793a\u767b\u9646\u4e86\uff1b\u5982\u679c\u6ca1\u6709\u767b\u9646\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u9ed8\u8ba4\u7684\u533f\u540d\u7528\u6237 AnonymousUserMixin \u7684\u5bf9\u8c61\uff0cis_authenticated \u5c31\u4e3a False\uff0c\u5c31\u8868\u793a\u6ca1\u6709\u767b\u9646\u3002  \u5982\u679c\u767b\u9646\u7684\u8bdd\uff0c\u90a3\u4e48 current_user \u5c31\u662f User \u7684\u5bf9\u8c61\u4e86\uff0c\u90a3\u4e48 to_json \u65b9\u6cd5\u5c31\u53ef\u4ee5\u8fd4\u56de\u5f53\u524d\u767b\u9646\u7528\u6237\u7684\u7528\u6237\u4fe1\u606f\u4e86\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u7684 API \u4e86\u3002  \u672c\u7ae0\u7684\u5b8c\u6574\u4ee3\u7801\u4e3a\uff1a  #!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom flask import Flask, request, jsonify\nfrom flask.ext.login import (current_user, LoginManager,\n                             login_user, logout_user,\n                             login_required)\nfrom flask_mongoengine import MongoEngine\n\n\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {\n    'db': 'the_way_to_flask',\n    'host': 'localhost',\n    'port': 27017\n}\napp.secret_key = 'youdontknowme'\n\ndb = MongoEngine()\nlogin_manager = LoginManager()\ndb.init_app(app)\nlogin_manager.init_app(app)\n\n\nlogin_manager.login_view = 'login'\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.objects(id=user_id).first()\n\n\n@app.route('/login', methods=['POST'])\ndef login():\n    info = json.loads(request.data)\n    username = info.get('username', 'guest')\n    password = info.get('password', '')\n\n    user = User.objects(name=username,\n                        password=password).first()\n    if user:\n        login_user(user)\n        return jsonify(user.to_json())\n    else:\n        return jsonify({\"status\": 401,\n                        \"reason\": \"Username or Password Error\"})\n\n\n@app.route('/logout', methods=['POST'])\ndef logout():\n    logout_user()\n    return jsonify(**{'result': 200,\n                      'data': {'message': 'logout success'}})\n\n\n@app.route('/user_info', methods=['POST'])\ndef user_info():\n    if current_user.is_authenticated:\n        resp = {\"result\": 200,\n                \"data\": current_user.to_json()}\n    else:\n        resp = {\"result\": 401,\n                \"data\": {\"message\": \"user no login\"}}\n    return jsonify(**resp)\n\n\nclass User(db.Document):\n    name = db.StringField()\n    password = db.StringField()\n    email = db.StringField()\n\n    def to_json(self):\n        return {\"name\": self.name,\n                \"email\": self.email}\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):\n        return True\n\n    def is_anonymous(self):\n        return False\n\n    def get_id(self):\n        return str(self.id)\n\n\n@app.route('/', methods=['GET'])\ndef query_records():\n    name = request.args.get('name')\n    user = User.objects(name=name).first()\n\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        return jsonify(user.to_json())\n\n\n@app.route('/', methods=['PUT'])\n@login_required\ndef create_record():\n    record = json.loads(request.data)\n    user = User(name=record['name'],\n                password=record['password'],\n                email=record['email'])\n    user.save()\n    return jsonify(user.to_json())\n\n\n@app.route('/', methods=['POST'])\n@login_required\ndef update_record():\n    record = json.loads(request.data)\n    user = User.objects(name=record['name']).first()\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        user.update(email=record['email'],\n                    password=record['password'])\n    return jsonify(user.to_json())\n\n\n@app.route('/', methods=['DELETE'])\n@login_required\ndef delte_record():\n    record = json.loads(request.data)\n    user = User.objects(name=record['name']).first()\n    if not user:\n        return jsonify({'error': 'data not found'})\n    else:\n        user.delete()\n    return jsonify(user.to_json())\n\n\nif __name__ == \"__main__\":\n    app.run(port=8080, debug=True)", 
            "title": "\u7528\u6237\u4fe1\u606f"
        }, 
        {
            "location": "/chapter006/", 
            "text": "\u81ea\u5efa\u88c5\u9970\u5668\u5b9e\u73b0\u6743\u9650\u63a7\u5236\n\n\n\u5728\u4e0a\u4e00\u7ae0 \n\u300a\u767b\u9646\u6ce8\u518c\u300b\n\u4e2d\uff0c\u6211\u4eec\u4e3a REST \u7684 API \u8bbe\u7f6e\u4e86\u65b0\u589e\u3001\u66f4\u65b0\u548c\u5220\u9664\u7684\u64cd\u4f5c\u9700\u8981\u767b\u9646\u624d\u80fd\u5b8c\u6210\u3002\u7ec6\u60f3\u4e00\u4e0b\uff0c\u8fd9\u6837\u672a\u514d\u592a\u8fc7\u8349\u7387\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u7cfb\u7edf\u6765\u8bf4\uff0c\u7528\u6237\u80af\u5b9a\u662f\u5206\u4e3a\u4e0d\u540c\u7684\u7ea7\u522b\u7684\uff0c\u4f8b\u5982\u666e\u901a\u7684\u7528\u6237\u4e5f\u5c31\u53ea\u80fd\u67e5\u67e5\u6570\u636e\uff0c\u7136\u540e\u4e00\u4e9b\u7528\u6237\u8fd8\u80fd\u591a\u4e00\u4e2a\u589e\u52a0\u6570\u636e\u7684\u6743\u9650\uff0c\u518d\u9ad8\u7ea7\u4e00\u70b9\u7684\u8fd8\u80fd\u4fee\u6539\u6570\u636e\uff0c\u6700\u9ad8\u7ea7\u7684\u5c31\u662f\u589e\u5220\u6539\u67e5\u90fd\u80fd\u3002\n\n\n\u5bf9\u4e8e\u8fd9\u4e9b\u66f4\u52a0\u4e30\u5bcc\u7684\u9700\u6c42\uff0c\u6211\u4eec\u76ee\u524d\u7684\u767b\u9646\u53ef\u7528\u660e\u663e\u8fd8\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u56e0\u6b64\uff0c\u6309\u5e38\u89c4\u672c\u7ae0\u5e94\u8be5\u4f1a\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u6269\u5c55\uff0c\u800c Flask \u786e\u5b9e\u662f\u6709\u4e00\u6b3e\u53eb\u505a \nFlask-Principal\n\uff0c\u7684\u6269\u5c55\u53ef\u4ee5\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6269\u5c55\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u8fbe\u5230\u66f4\u7ec6\u7c92\u5ea6\u5f97\u63a7\u5236\u7528\u6237\u7684\u6743\u9650\u3002\u4f46\u662f\uff0c\u6211\n\u5acc\u5f03\u8fd9\u4e2a\u6269\u5c55\u592a\u7d2f\u8d58\n\u4e86\uff0c\u6240\u4ee5\u672c\u7ae0\u4e0d\u51c6\u5907\u4f7f\u7528\u8fd9\u4e2a\u6269\u5c55\uff0c\u800c\u662f\u81ea\u5df1\u7f16\u5199\u4e00\u4e2a\u6743\u9650\u63a7\u5236\u7684\u6269\u5c55\u8fdb\u884c\u6743\u9650\u7684\u63a7\u5236\u3002\n\n\n\u6743\u9650\u63a7\u5236\u8bbe\u8ba1\n\n\n\u6211\u4eec\u8fd9\u91cc\u7684\u6743\u9650\u63a7\u5236\u91c7\u7528 \nRBAC\n \u7684\u65b9\u5f0f\uff0c\u9996\u5148\uff0c\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a Role \u7684 Model\uff0c\u7136\u540e\u7ed9\u6bcf\u4e2a User \u5206\u914d\u4e00\u4e2a Role\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9650\u5236\u67d0\u4e2a\u64cd\u4f5c\u9700\u8981\u67d0\u79cd Role \u624d\u80fd\u6267\u884c\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u5b9e\u73b0\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684\u6743\u9650\u63a7\u5236\u3002\n\n\n\u8fd9\u91cc\u8fd8\u6709\u4e2a\u5b9e\u73b0\u7ec6\u8282\u9700\u8981\u5148\u8bf4\u660e\u4e00\u4e0b\uff0c\u6211\u4eec\u7684 Role \u7684\u6743\u9650\u662f\u4ee5\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\u7684\uff0c\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a\u4e00\u79cd\u6743\u9650\uff1a\n\n\n\n\n\u7b2c\u4e00\u4f4d\u8868\u793a\u53ef\u4ee5\u8bfb\u53d6\u8bb0\u5f55\n\n\n\u7b2c\u4e8c\u4f4d\u8868\u793a\u53ef\u4ee5\u65b0\u5efa\u8bb0\u5f55\n\n\n\u7b2c\u4e09\u4f4d\u8868\u793a\u53ef\u4ee5\u66f4\u65b0\u8bb0\u5f55\n\n\n\u7b2c\u56db\u4f4d\u8868\u793a\u53ef\u4ee5\u5220\u9664\u8bb0\u5f55\n\n\n\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u4e00\u4e2a\u7528\u6237\u53ea\u80fd\u8bfb\u53d6\u8bb0\u5f55\uff0c\u90a3\u4e48\u4ed6\u5bf9\u5e94\u7684 Role \u7684\u6743\u9650\u5e94\u8be5\u662f \n0000 0001b\n \uff0c\u6362\u7b97\u6210\u5341\u516d\u8fdb\u5236\u7684\u8bdd\u5c31\u662f\uff1a 0x01\n\n\n\u5982\u679c\u4e00\u4e2a\u7528\u6237\u6240\u6709\u64cd\u4f5c\u90fd\u53ef\u4ee5\u6267\u884c\uff0c\u90a3\u4e48\u5b83\u7684\u6743\u9650\u5e94\u8be5\u5bf9\u5e94\u4e8e \n0000 1111b\n\uff0c\u6362\u7b97\u6210\u5341\u516d\u8fdb\u5236\u7684\u8bdd\u5c31\u662f\uff1a0x0f \n\n\n\u90a3\u4e48\uff0c\u5047\u5982\u6211\u4eec\u8981\u5224\u65ad\u4e00\u4e2a\u7528\u6237\u65f6\u5019\u53ef\u4ee5\u8fdb\u884c\u65b0\u5efa\u64cd\u4f5c\uff0c\u90a3\u4e48\u5e94\u8be5\u600e\u4e48\u5b9e\u73b0\u8fd9\u4e2a\u903b\u8f91\uff1f\u6211\u8fd9\u91cc\u7684\u5b9e\u73b0\u673a\u5236\u662f\u5982\u679c\u662f\u53ea\u6709\u65b0\u5efa\u64cd\u4f5c\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u6743\u9650\u5c31\u662f\uff1a\n0000 0010b\n\uff0c\u90a3\u5982\u679c\u6211\u8981\u5224\u65ad\u4e00\u4e2a\u7528\u6237\u65f6\u5019\u6709\u65b0\u5efa\u7684\u6743\u9650\uff0c\u90a3\u4e48\u6211\u53ea\u9700\u8981\u5bf9\u8fd9\u4e2a\n\u7528\u6237\u7684\u6743\u9650\n\u548c\u8fd9\u4e2a\u64cd\u4f5c\u6240\n\u9700\u8981\u7684\u6743\u9650\n\u8fdb\u884c \nand \u64cd\u4f5c\n\uff0c\u5982\u679c\u5f97\u5230\u7684\u7ed3\u679c\u7b49\u4e8e\u9700\u8981\u7684\u6743\u9650\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8868\u793a\u8be5\u7528\u6237\u62e5\u6709\u6743\u9650\uff0c\u53ef\u80fd\u8bf4\u5f97\u6709\u70b9\u590d\u6742\uff0c\u4e0a\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\n\n\n\u7528\u6237 A \u7684\u6743\u9650\uff1a      0000 0001b      \u53ea\u6709\u8bfb\u53d6\u8bb0\u5f55\u7684\u6743\u9650\n\u7528\u6237 B \u7684\u6743\u9650\uff1a      0000 1111b      \u62e5\u6709\u6240\u6709\u6743\u9650\n\u65b0\u5efa\u8bb0\u5f55\u9700\u8981\u6743\u9650\uff1a    0000 0010b      \u9700\u8981\u65b0\u5efa\u6743\u9650\n\u7528\u6237A\u662f\u5426\u53ef\u4ee5\u65b0\u5efa\uff1a   0000 0001b and 0000 0010b = 0000 0000b \uff01= \u65b0\u5efa\u6743\u9650\uff0c\u6240\u4ee5\u4e0d\u80fd\u65b0\u5efa\n\u7528\u6237B\u65f6\u5019\u53ef\u4ee5\u65b0\u5efa\uff1a   0000 1111b and 0000 0010b = 0000 0010b  == \u65b0\u5efa\u6743\u9650\uff0c\u6240\u4ee5\u53ef\u4ee5\u65b0\u5efa\n\n\n\n\u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u52a8\u624b\u6f14\u7ec3\u6f14\u7ec3\uff0c\u770b\u4e0b\u662f\u5426\u53ef\u884c\u3002\n\n\n\u521b\u5efa Role Model\n\n\n\u4e4b\u524d\u5df2\u7ecf\u5728 \n\u300a\u96c6\u6210\u6570\u636e\u5e93\u300b\n \u7ae0\u8282\u4e2d\u8bb2\u89e3\u8fc7\u4e86\u5982\u4f55\u521b\u5efa Model\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u6839\u636e\u4e4b\u524d\u7684\u7ecf\u9a8c\u521b\u5efa Role Model\uff0c\u7136\u540e\u518d\u5f80 User \u4e2d\u52a0\u4e0a\u4e00\u4e2a Role \u5b57\u6bb5\u3002\n\n\nclass Permission:\n    READ = 0x01  \n    CREATE = 0x02\n    UPDATE = 0x04     \n    DELETE = 0x08\n    DEFAULT = READ\n\nclass Role(db.Document):\n    name = db.StringField()\n    permission = db.IntField()\n\nclass User(db.Document):\n    name = db.StringField()\n    password = db.StringField()\n    email = db.StringField()\n    role = db.ReferenceField('Role'\uff0c default=DEFAULT_ROLE)\n\n\n\n\u8fd9\u91cc\u5c31\u7b80\u5355\u5f97\u521b\u5efa\u4e86\u4e00\u4e2a Role \u7684 Model\uff0c\u800c Role \u53ea\u6709\u4e00\u4e2a\u540d\u79f0\uff0c\u7528\u4e8e\u6807\u793a\u8fd9\u4e2a\u89d2\u8272\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u8be5\u89d2\u8272\u62e5\u6709\u7684\u6743\u9650\u4e86\u3002\u7136\u540e\u5c31\u662f\u5728 User \u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a ReferenceField\uff0c\u8fd9\u4e2a\u5728 MongoEngine \u91cc\u9762\u5c31\u8868\u793a\u662f\u5916\u5f15\u7528\u7684\u610f\u601d\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8fd9\u4e2a\u6210\u5458\u53d8\u91cf\u8bbf\u95ee\u5230\u7528\u6237\u7684 Role \u7684 permission\u3002\n\n\n\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\uff0c\u6211\u4eec\u5c06 permission \u90fd\u5199\u5728\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u8fd8\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6743\u9650\uff0c\u9ed8\u8ba4\u4e3a READ\u3002\n\n\n\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u7684\u6570\u636e\u5e93\u4e2d\u8fd8\u6ca1\u6709 Role \u76f8\u5173\u7684\u8bb0\u5f55\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u542f\u52a8\u5e94\u7528\u7684\u65f6\u5019\u8fdb\u884c\u63d2\u5165\u6570\u636e\uff0c\u6240\u4ee5\u6211\u505a\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u64cd\u4f5c\uff1a\n\n\n# init roles     \nif Role.objects.count() \n= 0:  \n    READ_ROLE = Role('READER', Permission.READ)\n    CREATE_ROLE = Role('CREATER', Permission.CREATE)\n    UPDATE_ROLE = Role('UPDATER', Permission.UPDATE)\n    DELETE_ROLE = Role('DELETER', Permission.DELETE)\n    DEFAULT_ROLE = Role('DEFAULT', Permission.DEFAULT)\n\n    READ_ROLE.save()\n    CREATE_ROLE.save()\n    UPDATE_ROLE.save()\n    DELETE_ROLE.save()\n    DEFAULT_ROLE.save()\nelse:            \n    READ_ROLE = Role.objects(permission=Permission.READ).first()\n    CREATE_ROLE = Role.objects(permission=Permission.CREATE).first()\n    UPDATE_ROLE = Role.objects(permission=Permission.UPDATE).first()\n    DELETE_ROLE = Role.objects(permission=Permission.DELETE).first()\n    DEFAULT_ROLE = Role.objects(permission=Permission.DEFAULT).first()\n\n\n\n\u867d\u7136\u8fd9\u6bb5\u4ee3\u7801\u6709\u4e0d\u4e25\u8c28\u7684\u5730\u65b9\uff0c\u4f46\u662f\u4f5c\u4e3a\u8bb2\u89e3\u7684\u8bdd\u65e0\u5173\u5927\u96c5\uff0c\u901a\u8fc7\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u6709\u4e94\u79cd Role \u7684\u5bf9\u8c61\uff0c\u5206\u522b\u5bf9\u5e94\u7740\u589e\u5220\u6539\u67e5\uff0c\u8fd8\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684\u89d2\u8272\uff0c\u4ed6\u4e3a\u8bfb\u53d6\u6743\u9650\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u5e94\u8be5\u4fee\u6539\u4e00\u4e0b\u6211\u4eec\u7684 API\uff0c\u8ba9\u4ed6\u80fd\u591f\u589e\u52a0\u7528\u6237\u7684\u9ed8\u8ba4\u6743\u9650\u3002\n\n\n@app.route('/', methods=['POST'])\n@login_required \ndef create_record():\n    record = json.loads(request.data)\n    user = User(name=record['name'],\n                password=record['password'],\n                email=record['email'],\n                role=DEFAULT_ROLE)\n    user.save() \n    return jsonify(user.to_json())\n\n\n\n\u8fd9\u6bb5\u4ee3\u7801\u53ea\u589e\u52a0\u4e86\u4e00\u884c\uff0c\u5c31\u662f\uff1a\n\n\nrole=DEFAULT_ROLE\n\n\n\n\u6743\u9650\u63a7\u5236\n\n\n\u597d\uff0c\u5230\u8fd9\u91cc\u7b97\u662f\u5b8c\u6210\u4e86\u4e00\u534a\u4e86\uff0c\u6211\u4eec\u7684\u89d2\u8272\u5df2\u7ecf\u7b97\u662f\u6709\u4e86\uff0c\u7136\u540e\u5c31\u662f\u600e\u4e48\u8fdb\u884c\u6743\u9650\u63a7\u5236\u4e86\uff0c\u6211\u5e0c\u671b\u6743\u9650\u63a7\u5236\u4ee3\u7801\u80fd\u591f\u7adf\u53ef\u80fd\u5f97\u7b80\u5355\uff0c\u6700\u597d\u662f\u80fd\u7528\u88c5\u9970\u5668\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u9ed8\u8ba4\u6743\u9650\u5c31\u80fd\u8bbf\u95ee\u7684\uff0c\u6211\u5e0c\u671b\u4e0d\u7528\u52a0\u6743\u9650\u63a7\u5236\u7684\u4ee3\u7801\u5c31\u597d\u4e86\u3002\u6ca1\u6709\u4e0d\u80fd\u5b9e\u73b0\u7684\u9700\u6c42\uff0c\u53ea\u662f\u5b9e\u73b0\u5f97\u597d\u574f\u800c\u5df2\uff0c\u6240\u4ee5\uff0c\u65e2\u7136\u6211\u4eec\u90fd\u80fd\u63cf\u8ff0\u51fa\u9700\u6c42\uff0c\u90a3\u4e48\u5c31\u80fd\u591f\u5199\u51fa\u6ee1\u8db3\u9700\u6c42\u7684\u4ee3\u7801\u3002\n\n\n\u9996\u5148\uff0c\u6211\u4eec\u662f\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u6743\u9650\u63a7\u5236\u7684\n\u88c5\u9970\u5668\n\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\n\u88c5\u9970\u5668\n\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5f97\u8fdb\u884c\u6743\u9650\u63a7\u5236\uff0c\u6700\u597d\u662f\u53ef\u4ee5\u8fd9\u6837\uff1a\n\n\n@creater_required()\ndef create_model():\n    ... ...\n\n\n\n\u6216\u8005\u8fd9\u6837\u4e5f\u53ef\u4ee5\u63a5\u53d7\uff1a\n\n\n@permission_required(CREATE_PERMISSION):\ndef create_model():\n    ... ...\n\n\n\n\u90a3\u4e48\uff0c\u5c31\u5148\u5199\u4e00\u4e2a\u8f83\u4e3a\u7b80\u5355\u7684\u7248\u672c\u8bd5\u8bd5\u5148\uff1a\n\n\ndef permission_required(permission):\n    def decorator(func):           \n        @wraps(func)               \n        def decorated_function(*args, **kwargs):\n            if not current_user.is_authenticated:\n                abort(401) \n            user_permission = current_user.role.permission\n            if user_permission \n permission == permission:\n                return func(*args, **kwargs)\n            else:                  \n                abort(403)         \n        return decorated_function\n    return decorator\n\n\n\n\u8fd9\u4e00\u7248\u672c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5f97\u770b\u8fd9\u51e0\u53e5\u5173\u952e\u7684\u4ee3\u7801\uff1a\n\n\nif not current_user.is_authenticated:\n    abort(401) \nuser_permission = current_user.role.permission\nif user_permission \n permission == permission:\n    return func(*args, **kwargs)\nelse:                  \n    abort(403)\n\n\n\n\u9996\u5148\u7528\u6237\u6ca1\u6709\u767b\u9646\u80af\u5b9a\u662f\u6ca1\u6709\u6743\u9650\u7684\u4e86\uff0c\u6240\u4ee5\u8fd4\u56de 401 \u672a\u6388\u6743\u9519\u8bef\uff0c\u5982\u679c\u7528\u6237\u6ca1\u6709\u6743\u9650\uff08\u6743\u9650\u8bbe\u8ba1\u4e2d\u7684\u63cf\u8ff0\uff09\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de 403 \u7981\u6b62\u8bbf\u95ee\u3002\n\n\n\u63a5\u7740\u6211\u4eec\u5c31\u5728\u6211\u4eec\u7684 REST API \u4e2d\u5c1d\u8bd5\u4e00\u4e0b\u8fd9\u4e2a\u6743\u9650\uff0c\u8fd9\u91cc\u76f8\u5bf9\u65b0\u589e\u7528\u6237\u8fdb\u884c\u5c1d\u8bd5\uff1a\n\n\n@app.route('/', methods=['POST'])\n@permission_required(Permission.CREATE)   \ndef create_record():               \n    record = json.loads(request.data) \n    user = User(name=record['name'],  \n                password=record['password'],\n                email=record['email'],\n                role=DEFAULT_ROLE)  \n    user.save()                     \n    return jsonify(user.to_json()\n\n\n\n\u8fd9\u91cc\u53ea\u5c06 \n@login_required\n \u7684\u88c5\u9970\u5668\u6362\u6210\u4e86\n\n\n@permission_required(Permission.CREATE)\n\n\n\n\u7136\u540e\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u65b0\u5efa\u8bb0\u5f55\uff1a\n\n\nPOST http://localhost:8080\n\n{\n  \"email\": \"liqianglau@outlook.com\",\n  \"name\": \"tyrael\",\n  \"password\": \"password\"\n}\n\n\n\n\u7136\u540e\u53d1\u73b0\u54cd\u5e94\u662f\uff1a\n\n\n\n\n\u8bf4\u660e\u6211\u4eec\u7684\u6743\u9650\u63a7\u5236\u751f\u6548\u5566\u3002", 
            "title": "\u6743\u9650\u63a7\u5236"
        }, 
        {
            "location": "/chapter006/#_1", 
            "text": "\u5728\u4e0a\u4e00\u7ae0  \u300a\u767b\u9646\u6ce8\u518c\u300b \u4e2d\uff0c\u6211\u4eec\u4e3a REST \u7684 API \u8bbe\u7f6e\u4e86\u65b0\u589e\u3001\u66f4\u65b0\u548c\u5220\u9664\u7684\u64cd\u4f5c\u9700\u8981\u767b\u9646\u624d\u80fd\u5b8c\u6210\u3002\u7ec6\u60f3\u4e00\u4e0b\uff0c\u8fd9\u6837\u672a\u514d\u592a\u8fc7\u8349\u7387\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e00\u4e2a\u7cfb\u7edf\u6765\u8bf4\uff0c\u7528\u6237\u80af\u5b9a\u662f\u5206\u4e3a\u4e0d\u540c\u7684\u7ea7\u522b\u7684\uff0c\u4f8b\u5982\u666e\u901a\u7684\u7528\u6237\u4e5f\u5c31\u53ea\u80fd\u67e5\u67e5\u6570\u636e\uff0c\u7136\u540e\u4e00\u4e9b\u7528\u6237\u8fd8\u80fd\u591a\u4e00\u4e2a\u589e\u52a0\u6570\u636e\u7684\u6743\u9650\uff0c\u518d\u9ad8\u7ea7\u4e00\u70b9\u7684\u8fd8\u80fd\u4fee\u6539\u6570\u636e\uff0c\u6700\u9ad8\u7ea7\u7684\u5c31\u662f\u589e\u5220\u6539\u67e5\u90fd\u80fd\u3002  \u5bf9\u4e8e\u8fd9\u4e9b\u66f4\u52a0\u4e30\u5bcc\u7684\u9700\u6c42\uff0c\u6211\u4eec\u76ee\u524d\u7684\u767b\u9646\u53ef\u7528\u660e\u663e\u8fd8\u4e0d\u80fd\u6ee1\u8db3\u9700\u6c42\uff0c\u56e0\u6b64\uff0c\u6309\u5e38\u89c4\u672c\u7ae0\u5e94\u8be5\u4f1a\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u6269\u5c55\uff0c\u800c Flask \u786e\u5b9e\u662f\u6709\u4e00\u6b3e\u53eb\u505a  Flask-Principal \uff0c\u7684\u6269\u5c55\u53ef\u4ee5\u6ee1\u8db3\u6211\u4eec\u7684\u9700\u6c42\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6269\u5c55\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u8fbe\u5230\u66f4\u7ec6\u7c92\u5ea6\u5f97\u63a7\u5236\u7528\u6237\u7684\u6743\u9650\u3002\u4f46\u662f\uff0c\u6211 \u5acc\u5f03\u8fd9\u4e2a\u6269\u5c55\u592a\u7d2f\u8d58 \u4e86\uff0c\u6240\u4ee5\u672c\u7ae0\u4e0d\u51c6\u5907\u4f7f\u7528\u8fd9\u4e2a\u6269\u5c55\uff0c\u800c\u662f\u81ea\u5df1\u7f16\u5199\u4e00\u4e2a\u6743\u9650\u63a7\u5236\u7684\u6269\u5c55\u8fdb\u884c\u6743\u9650\u7684\u63a7\u5236\u3002", 
            "title": "\u81ea\u5efa\u88c5\u9970\u5668\u5b9e\u73b0\u6743\u9650\u63a7\u5236"
        }, 
        {
            "location": "/chapter006/#_2", 
            "text": "\u6211\u4eec\u8fd9\u91cc\u7684\u6743\u9650\u63a7\u5236\u91c7\u7528  RBAC  \u7684\u65b9\u5f0f\uff0c\u9996\u5148\uff0c\u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a Role \u7684 Model\uff0c\u7136\u540e\u7ed9\u6bcf\u4e2a User \u5206\u914d\u4e00\u4e2a Role\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u9650\u5236\u67d0\u4e2a\u64cd\u4f5c\u9700\u8981\u67d0\u79cd Role \u624d\u80fd\u6267\u884c\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u5b9e\u73b0\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684\u6743\u9650\u63a7\u5236\u3002  \u8fd9\u91cc\u8fd8\u6709\u4e2a\u5b9e\u73b0\u7ec6\u8282\u9700\u8981\u5148\u8bf4\u660e\u4e00\u4e0b\uff0c\u6211\u4eec\u7684 Role \u7684\u6743\u9650\u662f\u4ee5\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\u7684\uff0c\u6bcf\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u8868\u793a\u4e00\u79cd\u6743\u9650\uff1a   \u7b2c\u4e00\u4f4d\u8868\u793a\u53ef\u4ee5\u8bfb\u53d6\u8bb0\u5f55  \u7b2c\u4e8c\u4f4d\u8868\u793a\u53ef\u4ee5\u65b0\u5efa\u8bb0\u5f55  \u7b2c\u4e09\u4f4d\u8868\u793a\u53ef\u4ee5\u66f4\u65b0\u8bb0\u5f55  \u7b2c\u56db\u4f4d\u8868\u793a\u53ef\u4ee5\u5220\u9664\u8bb0\u5f55   \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u4e00\u4e2a\u7528\u6237\u53ea\u80fd\u8bfb\u53d6\u8bb0\u5f55\uff0c\u90a3\u4e48\u4ed6\u5bf9\u5e94\u7684 Role \u7684\u6743\u9650\u5e94\u8be5\u662f  0000 0001b  \uff0c\u6362\u7b97\u6210\u5341\u516d\u8fdb\u5236\u7684\u8bdd\u5c31\u662f\uff1a 0x01  \u5982\u679c\u4e00\u4e2a\u7528\u6237\u6240\u6709\u64cd\u4f5c\u90fd\u53ef\u4ee5\u6267\u884c\uff0c\u90a3\u4e48\u5b83\u7684\u6743\u9650\u5e94\u8be5\u5bf9\u5e94\u4e8e  0000 1111b \uff0c\u6362\u7b97\u6210\u5341\u516d\u8fdb\u5236\u7684\u8bdd\u5c31\u662f\uff1a0x0f   \u90a3\u4e48\uff0c\u5047\u5982\u6211\u4eec\u8981\u5224\u65ad\u4e00\u4e2a\u7528\u6237\u65f6\u5019\u53ef\u4ee5\u8fdb\u884c\u65b0\u5efa\u64cd\u4f5c\uff0c\u90a3\u4e48\u5e94\u8be5\u600e\u4e48\u5b9e\u73b0\u8fd9\u4e2a\u903b\u8f91\uff1f\u6211\u8fd9\u91cc\u7684\u5b9e\u73b0\u673a\u5236\u662f\u5982\u679c\u662f\u53ea\u6709\u65b0\u5efa\u64cd\u4f5c\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u6743\u9650\u5c31\u662f\uff1a 0000 0010b \uff0c\u90a3\u5982\u679c\u6211\u8981\u5224\u65ad\u4e00\u4e2a\u7528\u6237\u65f6\u5019\u6709\u65b0\u5efa\u7684\u6743\u9650\uff0c\u90a3\u4e48\u6211\u53ea\u9700\u8981\u5bf9\u8fd9\u4e2a \u7528\u6237\u7684\u6743\u9650 \u548c\u8fd9\u4e2a\u64cd\u4f5c\u6240 \u9700\u8981\u7684\u6743\u9650 \u8fdb\u884c  and \u64cd\u4f5c \uff0c\u5982\u679c\u5f97\u5230\u7684\u7ed3\u679c\u7b49\u4e8e\u9700\u8981\u7684\u6743\u9650\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8868\u793a\u8be5\u7528\u6237\u62e5\u6709\u6743\u9650\uff0c\u53ef\u80fd\u8bf4\u5f97\u6709\u70b9\u590d\u6742\uff0c\u4e0a\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50  \u7528\u6237 A \u7684\u6743\u9650\uff1a      0000 0001b      \u53ea\u6709\u8bfb\u53d6\u8bb0\u5f55\u7684\u6743\u9650\n\u7528\u6237 B \u7684\u6743\u9650\uff1a      0000 1111b      \u62e5\u6709\u6240\u6709\u6743\u9650\n\u65b0\u5efa\u8bb0\u5f55\u9700\u8981\u6743\u9650\uff1a    0000 0010b      \u9700\u8981\u65b0\u5efa\u6743\u9650\n\u7528\u6237A\u662f\u5426\u53ef\u4ee5\u65b0\u5efa\uff1a   0000 0001b and 0000 0010b = 0000 0000b \uff01= \u65b0\u5efa\u6743\u9650\uff0c\u6240\u4ee5\u4e0d\u80fd\u65b0\u5efa\n\u7528\u6237B\u65f6\u5019\u53ef\u4ee5\u65b0\u5efa\uff1a   0000 1111b and 0000 0010b = 0000 0010b  == \u65b0\u5efa\u6743\u9650\uff0c\u6240\u4ee5\u53ef\u4ee5\u65b0\u5efa  \u5927\u6982\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u52a8\u624b\u6f14\u7ec3\u6f14\u7ec3\uff0c\u770b\u4e0b\u662f\u5426\u53ef\u884c\u3002", 
            "title": "\u6743\u9650\u63a7\u5236\u8bbe\u8ba1"
        }, 
        {
            "location": "/chapter006/#role-model", 
            "text": "\u4e4b\u524d\u5df2\u7ecf\u5728  \u300a\u96c6\u6210\u6570\u636e\u5e93\u300b  \u7ae0\u8282\u4e2d\u8bb2\u89e3\u8fc7\u4e86\u5982\u4f55\u521b\u5efa Model\uff0c\u6240\u4ee5\u8fd9\u91cc\u76f4\u63a5\u6839\u636e\u4e4b\u524d\u7684\u7ecf\u9a8c\u521b\u5efa Role Model\uff0c\u7136\u540e\u518d\u5f80 User \u4e2d\u52a0\u4e0a\u4e00\u4e2a Role \u5b57\u6bb5\u3002  class Permission:\n    READ = 0x01  \n    CREATE = 0x02\n    UPDATE = 0x04     \n    DELETE = 0x08\n    DEFAULT = READ\n\nclass Role(db.Document):\n    name = db.StringField()\n    permission = db.IntField()\n\nclass User(db.Document):\n    name = db.StringField()\n    password = db.StringField()\n    email = db.StringField()\n    role = db.ReferenceField('Role'\uff0c default=DEFAULT_ROLE)  \u8fd9\u91cc\u5c31\u7b80\u5355\u5f97\u521b\u5efa\u4e86\u4e00\u4e2a Role \u7684 Model\uff0c\u800c Role \u53ea\u6709\u4e00\u4e2a\u540d\u79f0\uff0c\u7528\u4e8e\u6807\u793a\u8fd9\u4e2a\u89d2\u8272\uff0c\u53e6\u5916\u4e00\u4e2a\u5c31\u662f\u8be5\u89d2\u8272\u62e5\u6709\u7684\u6743\u9650\u4e86\u3002\u7136\u540e\u5c31\u662f\u5728 User \u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a ReferenceField\uff0c\u8fd9\u4e2a\u5728 MongoEngine \u91cc\u9762\u5c31\u8868\u793a\u662f\u5916\u5f15\u7528\u7684\u610f\u601d\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u8fd9\u4e2a\u6210\u5458\u53d8\u91cf\u8bbf\u95ee\u5230\u7528\u6237\u7684 Role \u7684 permission\u3002  \u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\uff0c\u6211\u4eec\u5c06 permission \u90fd\u5199\u5728\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u8fd8\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6743\u9650\uff0c\u9ed8\u8ba4\u4e3a READ\u3002  \u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u7684\u6570\u636e\u5e93\u4e2d\u8fd8\u6ca1\u6709 Role \u76f8\u5173\u7684\u8bb0\u5f55\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5728\u542f\u52a8\u5e94\u7528\u7684\u65f6\u5019\u8fdb\u884c\u63d2\u5165\u6570\u636e\uff0c\u6240\u4ee5\u6211\u505a\u4e86\u8fd9\u6837\u7684\u4e00\u4e2a\u64cd\u4f5c\uff1a  # init roles     \nif Role.objects.count()  = 0:  \n    READ_ROLE = Role('READER', Permission.READ)\n    CREATE_ROLE = Role('CREATER', Permission.CREATE)\n    UPDATE_ROLE = Role('UPDATER', Permission.UPDATE)\n    DELETE_ROLE = Role('DELETER', Permission.DELETE)\n    DEFAULT_ROLE = Role('DEFAULT', Permission.DEFAULT)\n\n    READ_ROLE.save()\n    CREATE_ROLE.save()\n    UPDATE_ROLE.save()\n    DELETE_ROLE.save()\n    DEFAULT_ROLE.save()\nelse:            \n    READ_ROLE = Role.objects(permission=Permission.READ).first()\n    CREATE_ROLE = Role.objects(permission=Permission.CREATE).first()\n    UPDATE_ROLE = Role.objects(permission=Permission.UPDATE).first()\n    DELETE_ROLE = Role.objects(permission=Permission.DELETE).first()\n    DEFAULT_ROLE = Role.objects(permission=Permission.DEFAULT).first()  \u867d\u7136\u8fd9\u6bb5\u4ee3\u7801\u6709\u4e0d\u4e25\u8c28\u7684\u5730\u65b9\uff0c\u4f46\u662f\u4f5c\u4e3a\u8bb2\u89e3\u7684\u8bdd\u65e0\u5173\u5927\u96c5\uff0c\u901a\u8fc7\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u6709\u4e94\u79cd Role \u7684\u5bf9\u8c61\uff0c\u5206\u522b\u5bf9\u5e94\u7740\u589e\u5220\u6539\u67e5\uff0c\u8fd8\u6709\u4e00\u4e2a\u9ed8\u8ba4\u7684\u89d2\u8272\uff0c\u4ed6\u4e3a\u8bfb\u53d6\u6743\u9650\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u5e94\u8be5\u4fee\u6539\u4e00\u4e0b\u6211\u4eec\u7684 API\uff0c\u8ba9\u4ed6\u80fd\u591f\u589e\u52a0\u7528\u6237\u7684\u9ed8\u8ba4\u6743\u9650\u3002  @app.route('/', methods=['POST'])\n@login_required \ndef create_record():\n    record = json.loads(request.data)\n    user = User(name=record['name'],\n                password=record['password'],\n                email=record['email'],\n                role=DEFAULT_ROLE)\n    user.save() \n    return jsonify(user.to_json())  \u8fd9\u6bb5\u4ee3\u7801\u53ea\u589e\u52a0\u4e86\u4e00\u884c\uff0c\u5c31\u662f\uff1a  role=DEFAULT_ROLE", 
            "title": "\u521b\u5efa Role Model"
        }, 
        {
            "location": "/chapter006/#_3", 
            "text": "\u597d\uff0c\u5230\u8fd9\u91cc\u7b97\u662f\u5b8c\u6210\u4e86\u4e00\u534a\u4e86\uff0c\u6211\u4eec\u7684\u89d2\u8272\u5df2\u7ecf\u7b97\u662f\u6709\u4e86\uff0c\u7136\u540e\u5c31\u662f\u600e\u4e48\u8fdb\u884c\u6743\u9650\u63a7\u5236\u4e86\uff0c\u6211\u5e0c\u671b\u6743\u9650\u63a7\u5236\u4ee3\u7801\u80fd\u591f\u7adf\u53ef\u80fd\u5f97\u7b80\u5355\uff0c\u6700\u597d\u662f\u80fd\u7528\u88c5\u9970\u5668\u5b9e\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u9ed8\u8ba4\u6743\u9650\u5c31\u80fd\u8bbf\u95ee\u7684\uff0c\u6211\u5e0c\u671b\u4e0d\u7528\u52a0\u6743\u9650\u63a7\u5236\u7684\u4ee3\u7801\u5c31\u597d\u4e86\u3002\u6ca1\u6709\u4e0d\u80fd\u5b9e\u73b0\u7684\u9700\u6c42\uff0c\u53ea\u662f\u5b9e\u73b0\u5f97\u597d\u574f\u800c\u5df2\uff0c\u6240\u4ee5\uff0c\u65e2\u7136\u6211\u4eec\u90fd\u80fd\u63cf\u8ff0\u51fa\u9700\u6c42\uff0c\u90a3\u4e48\u5c31\u80fd\u591f\u5199\u51fa\u6ee1\u8db3\u9700\u6c42\u7684\u4ee3\u7801\u3002  \u9996\u5148\uff0c\u6211\u4eec\u662f\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u6743\u9650\u63a7\u5236\u7684 \u88c5\u9970\u5668 \u7684\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a \u88c5\u9970\u5668 \u53ef\u4ee5\u5f88\u65b9\u4fbf\u5f97\u8fdb\u884c\u6743\u9650\u63a7\u5236\uff0c\u6700\u597d\u662f\u53ef\u4ee5\u8fd9\u6837\uff1a  @creater_required()\ndef create_model():\n    ... ...  \u6216\u8005\u8fd9\u6837\u4e5f\u53ef\u4ee5\u63a5\u53d7\uff1a  @permission_required(CREATE_PERMISSION):\ndef create_model():\n    ... ...  \u90a3\u4e48\uff0c\u5c31\u5148\u5199\u4e00\u4e2a\u8f83\u4e3a\u7b80\u5355\u7684\u7248\u672c\u8bd5\u8bd5\u5148\uff1a  def permission_required(permission):\n    def decorator(func):           \n        @wraps(func)               \n        def decorated_function(*args, **kwargs):\n            if not current_user.is_authenticated:\n                abort(401) \n            user_permission = current_user.role.permission\n            if user_permission   permission == permission:\n                return func(*args, **kwargs)\n            else:                  \n                abort(403)         \n        return decorated_function\n    return decorator  \u8fd9\u4e00\u7248\u672c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5f97\u770b\u8fd9\u51e0\u53e5\u5173\u952e\u7684\u4ee3\u7801\uff1a  if not current_user.is_authenticated:\n    abort(401) \nuser_permission = current_user.role.permission\nif user_permission   permission == permission:\n    return func(*args, **kwargs)\nelse:                  \n    abort(403)  \u9996\u5148\u7528\u6237\u6ca1\u6709\u767b\u9646\u80af\u5b9a\u662f\u6ca1\u6709\u6743\u9650\u7684\u4e86\uff0c\u6240\u4ee5\u8fd4\u56de 401 \u672a\u6388\u6743\u9519\u8bef\uff0c\u5982\u679c\u7528\u6237\u6ca1\u6709\u6743\u9650\uff08\u6743\u9650\u8bbe\u8ba1\u4e2d\u7684\u63cf\u8ff0\uff09\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de 403 \u7981\u6b62\u8bbf\u95ee\u3002  \u63a5\u7740\u6211\u4eec\u5c31\u5728\u6211\u4eec\u7684 REST API \u4e2d\u5c1d\u8bd5\u4e00\u4e0b\u8fd9\u4e2a\u6743\u9650\uff0c\u8fd9\u91cc\u76f8\u5bf9\u65b0\u589e\u7528\u6237\u8fdb\u884c\u5c1d\u8bd5\uff1a  @app.route('/', methods=['POST'])\n@permission_required(Permission.CREATE)   \ndef create_record():               \n    record = json.loads(request.data) \n    user = User(name=record['name'],  \n                password=record['password'],\n                email=record['email'],\n                role=DEFAULT_ROLE)  \n    user.save()                     \n    return jsonify(user.to_json()  \u8fd9\u91cc\u53ea\u5c06  @login_required  \u7684\u88c5\u9970\u5668\u6362\u6210\u4e86  @permission_required(Permission.CREATE)  \u7136\u540e\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e0b\u65b0\u5efa\u8bb0\u5f55\uff1a  POST http://localhost:8080\n\n{\n  \"email\": \"liqianglau@outlook.com\",\n  \"name\": \"tyrael\",\n  \"password\": \"password\"\n}  \u7136\u540e\u53d1\u73b0\u54cd\u5e94\u662f\uff1a   \u8bf4\u660e\u6211\u4eec\u7684\u6743\u9650\u63a7\u5236\u751f\u6548\u5566\u3002", 
            "title": "\u6743\u9650\u63a7\u5236"
        }, 
        {
            "location": "/chapter007/", 
            "text": "\u89c4\u8303\u7ed3\u6784\u7ef4\u62a4\u4ee3\u7801\n\n\n\u5230\u672c\u7ae0\u4e3a\u6b62\uff0c\u6211\u4eec\u7684 DEMO \u7a0b\u5e8f\u529f\u80fd\u5df2\u7ecf\u65e5\u76ca\u5f3a\u5927\uff0c\u589e\u5220\u6539\u67e5\uff0c\u7528\u6237\u767b\u5f55\uff0c\u6743\u9650\u63a7\u5236\uff0c\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u529f\u80fd\u5df2\u7ecf\u6709\u70b9\u590d\u6742\u4e86\uff0c\u7136\u540e\u770b\u770b\u4ee3\u7801\uff0c\u53d1\u73b0\u4e5f\u5df2\u7ecf\u5dee\u4e0d\u591a 200 \u884c\u4e86\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u4e0d\u7981\u8981\u60f3\uff0c\u96be\u9053\u6211\u4eec\u8981\u5728\u8fd9\u4e00\u4e2a \napp.py\n \u6587\u4ef6\u4e2d\u7ee7\u7eed\u7f16\u5199\u4e0b\u53bb\u5417\uff1f\u611f\u89c9\u6bcf\u6b21\u6dfb\u52a0\u65b0\u7684\u529f\u80fd\u597d\u50cf\u90fd\u662f\u5728\u5934(\u6dfb\u52a0\u5f15\u7528)\u5728\u5c3e(\u6dfb\u52a0\u903b\u8f91)\u6dfb\u52a0\u4ee3\u7801\uff0c\u96be\u9053\u8fd9\u662f\u6b63\u786e\u7684\u505a\u6cd5\u5417\uff1f\n\n\n\u5f88\u663e\u7136\uff0c\u4f5c\u4e3a\u6709\u6d01\u7656\u7684\u5de5\u7a0b\u5e08\uff0c\u80af\u5b9a\u4e0d\u80fd\u5bb9\u5fcd\u6240\u6709\u4ee3\u7801\u90fd\u8fd9\u4e48\u4e00\u56e2\u585e\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u81f3\u5c11\u4f1a\u60f3\u5230\u62c6\u5206\u4ee3\u7801\u7136\u540e\u653e\u5230\u51e0\u4e2a\u6a21\u5757\u91cc\u9762\uff0c\u4f8b\u5982\u4ec0\u4e48 model.py, controller.py \u554a\u4e4b\u7c7b\u7684\u3002\u4f46\u662f\uff0c\u4f5c\u4e3a\u6709\u6df1\u5ea6\u6d01\u7656\u7684\u4eba\uff0c\u89c9\u5f97\u628a\u4e00\u5927\u5806\u6587\u4ef6\u653e\u5728\u4e00\u4e2a\u76ee\u5f55\u91cc\u9762\u4e5f\u662f\u4ef6\u7cdf\u5fc3\u7684\u4e8b\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u8981\u4ecb\u7ecd\u4e00\u4e0b\u6211\u6bd4\u8f83\u63a8\u8350\u7684\u4ee3\u7801\u76ee\u5f55\u7ed3\u6784\u3002\n\n\nFlask \u4ee3\u7801\u76ee\u5f55\u7ed3\u6784\n\n\n\u867d\u7136\u76ee\u5f55\u7ed3\u6784\u89c1\u4ec1\u89c1\u667a\uff0c\u4e2a\u4eba\u6709\u4e2a\u4eba\u7684\u770b\u6cd5\u548c\u4e60\u60ef\uff0c\u4f46\u603b\u7684\u6765\u8bf4\uff0c\u7ecf\u8fc7\u5f88\u591a\u4eba\u7684\u5b9e\u8df5\u548c\u603b\u7ed3\uff0c\u8fd8\u662f\u6709\u5f88\u591a\u5171\u540c\u7684\u610f\u89c1\u548c\u60f3\u6cd5\u7684\uff0c\u800c\u6211\u5728\u67e5\u770b\u4ed6\u4eba\u7684\u76ee\u5f55\u7ed3\u6784\u7ed3\u5408\u81ea\u8eab\u5728\u5de5\u4f5c\u4e2d\u7684\u4f7f\u7528\u7ecf\u9a8c\uff0c\u603b\u7ed3\u4e86\u4e00\u4e2a\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u6070\u5f53\u7684\u76ee\u5f55\u7ed3\u6784\u4f9b\u53c2\u8003\uff0c\u800c\u672c\u4e66\u4e5f\u662f\u4ee5\u8fd9\u4e2a\u76ee\u5f55\u7ed3\u6784\u4e3a\u67b6\u6784\u8fdb\u884c\u4e0b\u53bb\u7684\u3002\n\n\n\u6211\u63a8\u8350\u7684\u76ee\u5f55\u7ed3\u6784\uff1a\n\n\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 application\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 forms\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 services\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development_sample.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production_sample.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testing.py\n\u251c\u2500\u2500 deploy\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 flask_env.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gunicorn.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisor.conf\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 pylintrc\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 wsgi.py\n\n\n\n\u8fd9\u91cc\u7a0d\u4f5c\u4ecb\u7ecd\uff0c\u9996\u5148\u662f\u7b2c\u4e00\u7ea7\u76ee\u5f55\u7684\u8bdd\uff0c\u4e3b\u8981\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u76ee\u5f55\uff0c\u53e6\u4e00\u7c7b\u662f\u8fd0\u884c\u76f8\u5173\u7684\u6587\u4ef6\uff1b\u5176\u4e2d\u76ee\u5f55\u6709\uff1a\n\n\n\n\napplication\uff1a\u9879\u76ee\u6240\u6709\u903b\u8f91\u4ee3\u7801\u90fd\u653e\u8fd9\n\n\nconfig\uff1a\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6309\u4e0d\u540c\u73af\u5883\u5404\u5360\u4e00\u4efd\n\n\ndeploy\uff1a\u90e8\u7f72\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u540e\u7eed\u5c06\u4f7f\u7528\u5230\n\n\ntests\uff1a\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u6240\u5728\u7684\u76ee\u5f55\n\n\n\n\n\u6587\u4ef6\u7684\u8bdd\u5206\u522b\u6709\uff1a\n\n\n\n\nmanage.py\uff1aFlask-Script \u8fd0\u884c\u6587\u4ef6\uff0c\u540e\u9762\u4ecb\u7ecd\n\n\npylintrc\uff1a\u9759\u6001\u5206\u6790\u4ee3\u7801\u4f7f\u7528\u7684 pylint \u6807\u51c6\n\n\nrequirements.txt\uff1a\u9879\u76ee\u4f9d\u8d56\u5e93\u7684\u5217\u8868\n\n\nwsgi.py\uff1awsgi \u8fd0\u884c\u7684\u6587\u4ef6\n\n\n\n\n\u89c4\u8303\u4ee3\u7801\u5230\u6307\u5b9a\u76ee\u5f55\n\n\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u89c4\u5b9a\u597d\u4e86\u76ee\u5f55\u7ed3\u6784\uff0c\u662f\u65f6\u5019\u5c06\u6211\u4eec\u7684\u610f\u9762\u5206\u5230\u5404\u4e2a\u76d8\u5b50\u91cc\u4e86\u3002\u9996\u5148\u4ece\u6587\u4ef6\u5f00\u59cb\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u4ecb\u7ecd Flask-Script\uff0c\u9759\u6001\u68c0\u67e5\u548c wsgi\uff0c\u6240\u4ee5\u5c31\u5ffd\u7565\u8fd9\u4e9b\u6587\u4ef6\uff0c\u90a3\u4e48\u5c31\u5269\u4e0b requirements.txt \u6587\u4ef6\u4e86\u3002\u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u90fd\u5728\u6211\u4eec\u7684 \u300a\n\u672c\u4e66\u6982\u8ff0\n\u300b\u4e2d\u5217\u4e3e\u4e86\uff0c\u76f4\u63a5\u653e\u8fdb\u53bb\u5c31\u597d\u4e86\u3002\n\n\nFlask==0.10.1\nflask-mongoengine==0.7.5\nFlask-Login==0.3.2\nFlask-Admin==1.4.0\nFlask-Redis==0.1.0\nFlask-WTF==0.12\n\n\n\n\u7136\u540e\u662f\u65f6\u5019\u89e3\u8026\u4ee3\u7801\u4e86\uff0c\u6211\u4eec\u6ca1\u6709\u8868\u5355\uff0c\u6682\u65f6\u6ca1\u6709 services\uff0c\u6ca1\u6709\u9759\u6001\u6587\u4ef6\u4e5f\u6ca1\u6709\u9875\u9762\u6a21\u677f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u5408\u5e76\uff1a\n\n\n\n\n\u5c06 route \u4ee3\u7801\u653e\u5230 application/controllers \u4e2d\n\n\n\u5c06 model \u4ee3\u7801\u653e\u5230 application/models \u4e2d\n\n\n\u5c06\u521d\u59cb\u5316\u7ed1\u5b9a app \u7684\u4ee3\u7801\u653e\u5230 application/\ninit\n.py \u4e2d\n\n\n\u5c06 \u6570\u636e\u5e93\u7b49\u914d\u7f6e\u653e\u5230 config/development.py \u4e2d\n\n\n\n\n\u6700\u540e\u5c31\u662f\u7f16\u5199 manager.py \u6587\u4ef6\u4e86\u3002\u8fd9\u91cc\u6982\u8981\u5f97\u5217\u4e3e\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff0c\u66f4\u591a\u7684\u6587\u4ef6\u5927\u5bb6\u53ef\u4ee5\u4ece github \u4e0a clone \u4ee3\u7801\u51fa\u6765\u9605\u8bfb\u3002\n\n\n\u5408\u5e76\u540e\u7684\u6587\u4ef6\n\n\nmanager.py\n\n\n# coding: utf-8\nfrom flask.ext.script import Manager\nfrom application import create_app\n\n# Used by app debug \n livereload\nPORT = 8080\n\napp = create_app()\nmanager = Manager(app)\n\n\n@manager.command\ndef run():\n    \"\"\"Run app.\"\"\"\n    app.run(port=PORT)\n\n\nif __name__ == \"__main__\":\n    manager.run()\n\n\n\napplication/\ninit\n.py\n\n\n# coding: utf-8\nimport sys\nimport os\n\n# Insert project root path to sys.path\nproject_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nif project_path not in sys.path:\n    sys.path.insert(0, project_path)\n\nimport logging\nfrom flask import Flask\nfrom flask_wtf.csrf import CsrfProtect\nfrom config import load_config\nfrom application.extensions import db, login_manager\nfrom application.models import User\nfrom application.controllers import user_bp\n\n# convert python's encoding to utf8\ntry:\n    reload(sys)\n    sys.setdefaultencoding('utf8')\nexcept (AttributeError, NameError):\n    pass\n\n\ndef create_app():\n    \"\"\"Create Flask app.\"\"\"\n    config = load_config()\n    print config\n\n    app = Flask(__name__)\n    app.config.from_object(config)\n\n    if not hasattr(app, 'production'):\n        app.production = not app.debug and not app.testing\n\n    # CSRF protect\n    CsrfProtect(app)\n\n    if app.debug or app.testing:\n        # Log errors to stderr in production mode\n        app.logger.addHandler(logging.StreamHandler())\n        app.logger.setLevel(logging.ERROR)\n\n    # Register components\n    register_extensions(app)\n    register_blueprint(app)\n\n    return app\n\n\ndef register_extensions(app):\n    \"\"\"Register models.\"\"\"\n    db.init_app(app)\n    login_manager.init_app(app)\n\n    login_manager.login_view = 'login'\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.objects(id=user_id).first()\n\n\ndef register_blueprint(app):\n    app.register_blueprint(user_bp)\n\n\n\napplication/controllers/\ninit\n.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport json\n\nfrom flask import Blueprint, request, jsonify\nfrom flask.ext.login import current_user, login_user, logout_user\n\nfrom application.models import User\n\n\nuser_bp = Blueprint('user', __name__, url_prefix='')\n\n\n@user_bp.route('/login', methods=['POST'])\ndef login():\n    info = json.loads(request.data)\n    username = info.get('username', 'guest')\n    password = info.get('password', '')\n\n    user = User.objects(name=username,\n                        password=password).first()\n    if user:\n        login_user(user)\n        return jsonify(user.to_json())\n    else:\n        return jsonify({\"status\": 401,\n                        \"reason\": \"Username or Password Error\"})\n\n\n@user_bp.route('/logout', methods=['POST'])\ndef logout():\n    logout_user()\n    return jsonify(**{'result': 200,\n                      'data': {'message': 'logout success'}})\n\n@user_bp.route('/user_info', methods=['POST'])\ndef user_info():\n    if current_user.is_authenticated:\n        resp = {\"result\": 200,\n                \"data\": current_user.to_json()}\n    else:\n        resp = {\"result\": 401,\n                \"data\": {\"message\": \"user no login\"}}\n    return jsonify(**resp)\n\n\n\nconfig/development.py\n\n\n# coding: utf-8\nimport os\n\n\nclass DevelopmentConfig(object):\n    \"\"\"Base config class.\"\"\"\n    # Flask app config\n    DEBUG = False\n    TESTING = False\n    SECRET_KEY = \"sample_key\"\n\n    # Root path of project\n    PROJECT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\n    # Site domain\n    SITE_TITLE = \"twtf\"\n    SITE_DOMAIN = \"http://localhost:8080\"\n\n    # MongoEngine config\n    MONGODB_SETTINGS = {\n        'db': 'the_way_to_flask',\n        'host': 'localhost',\n        'port': 27017\n    }", 
            "title": "\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801"
        }, 
        {
            "location": "/chapter007/#_1", 
            "text": "\u5230\u672c\u7ae0\u4e3a\u6b62\uff0c\u6211\u4eec\u7684 DEMO \u7a0b\u5e8f\u529f\u80fd\u5df2\u7ecf\u65e5\u76ca\u5f3a\u5927\uff0c\u589e\u5220\u6539\u67e5\uff0c\u7528\u6237\u767b\u5f55\uff0c\u6743\u9650\u63a7\u5236\uff0c\u6570\u636e\u5e93\u64cd\u4f5c\uff0c\u529f\u80fd\u5df2\u7ecf\u6709\u70b9\u590d\u6742\u4e86\uff0c\u7136\u540e\u770b\u770b\u4ee3\u7801\uff0c\u53d1\u73b0\u4e5f\u5df2\u7ecf\u5dee\u4e0d\u591a 200 \u884c\u4e86\u3002\u8fd9\u65f6\uff0c\u6211\u4eec\u4e0d\u7981\u8981\u60f3\uff0c\u96be\u9053\u6211\u4eec\u8981\u5728\u8fd9\u4e00\u4e2a  app.py  \u6587\u4ef6\u4e2d\u7ee7\u7eed\u7f16\u5199\u4e0b\u53bb\u5417\uff1f\u611f\u89c9\u6bcf\u6b21\u6dfb\u52a0\u65b0\u7684\u529f\u80fd\u597d\u50cf\u90fd\u662f\u5728\u5934(\u6dfb\u52a0\u5f15\u7528)\u5728\u5c3e(\u6dfb\u52a0\u903b\u8f91)\u6dfb\u52a0\u4ee3\u7801\uff0c\u96be\u9053\u8fd9\u662f\u6b63\u786e\u7684\u505a\u6cd5\u5417\uff1f  \u5f88\u663e\u7136\uff0c\u4f5c\u4e3a\u6709\u6d01\u7656\u7684\u5de5\u7a0b\u5e08\uff0c\u80af\u5b9a\u4e0d\u80fd\u5bb9\u5fcd\u6240\u6709\u4ee3\u7801\u90fd\u8fd9\u4e48\u4e00\u56e2\u585e\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u9762\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u81f3\u5c11\u4f1a\u60f3\u5230\u62c6\u5206\u4ee3\u7801\u7136\u540e\u653e\u5230\u51e0\u4e2a\u6a21\u5757\u91cc\u9762\uff0c\u4f8b\u5982\u4ec0\u4e48 model.py, controller.py \u554a\u4e4b\u7c7b\u7684\u3002\u4f46\u662f\uff0c\u4f5c\u4e3a\u6709\u6df1\u5ea6\u6d01\u7656\u7684\u4eba\uff0c\u89c9\u5f97\u628a\u4e00\u5927\u5806\u6587\u4ef6\u653e\u5728\u4e00\u4e2a\u76ee\u5f55\u91cc\u9762\u4e5f\u662f\u4ef6\u7cdf\u5fc3\u7684\u4e8b\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u6211\u8981\u4ecb\u7ecd\u4e00\u4e0b\u6211\u6bd4\u8f83\u63a8\u8350\u7684\u4ee3\u7801\u76ee\u5f55\u7ed3\u6784\u3002", 
            "title": "\u89c4\u8303\u7ed3\u6784\u7ef4\u62a4\u4ee3\u7801"
        }, 
        {
            "location": "/chapter007/#flask", 
            "text": "\u867d\u7136\u76ee\u5f55\u7ed3\u6784\u89c1\u4ec1\u89c1\u667a\uff0c\u4e2a\u4eba\u6709\u4e2a\u4eba\u7684\u770b\u6cd5\u548c\u4e60\u60ef\uff0c\u4f46\u603b\u7684\u6765\u8bf4\uff0c\u7ecf\u8fc7\u5f88\u591a\u4eba\u7684\u5b9e\u8df5\u548c\u603b\u7ed3\uff0c\u8fd8\u662f\u6709\u5f88\u591a\u5171\u540c\u7684\u610f\u89c1\u548c\u60f3\u6cd5\u7684\uff0c\u800c\u6211\u5728\u67e5\u770b\u4ed6\u4eba\u7684\u76ee\u5f55\u7ed3\u6784\u7ed3\u5408\u81ea\u8eab\u5728\u5de5\u4f5c\u4e2d\u7684\u4f7f\u7528\u7ecf\u9a8c\uff0c\u603b\u7ed3\u4e86\u4e00\u4e2a\u4e2a\u4eba\u8ba4\u4e3a\u6bd4\u8f83\u6070\u5f53\u7684\u76ee\u5f55\u7ed3\u6784\u4f9b\u53c2\u8003\uff0c\u800c\u672c\u4e66\u4e5f\u662f\u4ee5\u8fd9\u4e2a\u76ee\u5f55\u7ed3\u6784\u4e3a\u67b6\u6784\u8fdb\u884c\u4e0b\u53bb\u7684\u3002  \u6211\u63a8\u8350\u7684\u76ee\u5f55\u7ed3\u6784\uff1a  .\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 application\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 forms\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 services\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development_sample.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production_sample.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testing.py\n\u251c\u2500\u2500 deploy\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 flask_env.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gunicorn.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisor.conf\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 pylintrc\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 wsgi.py  \u8fd9\u91cc\u7a0d\u4f5c\u4ecb\u7ecd\uff0c\u9996\u5148\u662f\u7b2c\u4e00\u7ea7\u76ee\u5f55\u7684\u8bdd\uff0c\u4e3b\u8981\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u76ee\u5f55\uff0c\u53e6\u4e00\u7c7b\u662f\u8fd0\u884c\u76f8\u5173\u7684\u6587\u4ef6\uff1b\u5176\u4e2d\u76ee\u5f55\u6709\uff1a   application\uff1a\u9879\u76ee\u6240\u6709\u903b\u8f91\u4ee3\u7801\u90fd\u653e\u8fd9  config\uff1a\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6309\u4e0d\u540c\u73af\u5883\u5404\u5360\u4e00\u4efd  deploy\uff1a\u90e8\u7f72\u76f8\u5173\u7684\u6587\u4ef6\uff0c\u540e\u7eed\u5c06\u4f7f\u7528\u5230  tests\uff1a\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u6240\u5728\u7684\u76ee\u5f55   \u6587\u4ef6\u7684\u8bdd\u5206\u522b\u6709\uff1a   manage.py\uff1aFlask-Script \u8fd0\u884c\u6587\u4ef6\uff0c\u540e\u9762\u4ecb\u7ecd  pylintrc\uff1a\u9759\u6001\u5206\u6790\u4ee3\u7801\u4f7f\u7528\u7684 pylint \u6807\u51c6  requirements.txt\uff1a\u9879\u76ee\u4f9d\u8d56\u5e93\u7684\u5217\u8868  wsgi.py\uff1awsgi \u8fd0\u884c\u7684\u6587\u4ef6", 
            "title": "Flask \u4ee3\u7801\u76ee\u5f55\u7ed3\u6784"
        }, 
        {
            "location": "/chapter007/#_2", 
            "text": "\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u89c4\u5b9a\u597d\u4e86\u76ee\u5f55\u7ed3\u6784\uff0c\u662f\u65f6\u5019\u5c06\u6211\u4eec\u7684\u610f\u9762\u5206\u5230\u5404\u4e2a\u76d8\u5b50\u91cc\u4e86\u3002\u9996\u5148\u4ece\u6587\u4ef6\u5f00\u59cb\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u4ecb\u7ecd Flask-Script\uff0c\u9759\u6001\u68c0\u67e5\u548c wsgi\uff0c\u6240\u4ee5\u5c31\u5ffd\u7565\u8fd9\u4e9b\u6587\u4ef6\uff0c\u90a3\u4e48\u5c31\u5269\u4e0b requirements.txt \u6587\u4ef6\u4e86\u3002\u8fd9\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u90fd\u5728\u6211\u4eec\u7684 \u300a \u672c\u4e66\u6982\u8ff0 \u300b\u4e2d\u5217\u4e3e\u4e86\uff0c\u76f4\u63a5\u653e\u8fdb\u53bb\u5c31\u597d\u4e86\u3002  Flask==0.10.1\nflask-mongoengine==0.7.5\nFlask-Login==0.3.2\nFlask-Admin==1.4.0\nFlask-Redis==0.1.0\nFlask-WTF==0.12  \u7136\u540e\u662f\u65f6\u5019\u89e3\u8026\u4ee3\u7801\u4e86\uff0c\u6211\u4eec\u6ca1\u6709\u8868\u5355\uff0c\u6682\u65f6\u6ca1\u6709 services\uff0c\u6ca1\u6709\u9759\u6001\u6587\u4ef6\u4e5f\u6ca1\u6709\u9875\u9762\u6a21\u677f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u5408\u5e76\uff1a   \u5c06 route \u4ee3\u7801\u653e\u5230 application/controllers \u4e2d  \u5c06 model \u4ee3\u7801\u653e\u5230 application/models \u4e2d  \u5c06\u521d\u59cb\u5316\u7ed1\u5b9a app \u7684\u4ee3\u7801\u653e\u5230 application/ init .py \u4e2d  \u5c06 \u6570\u636e\u5e93\u7b49\u914d\u7f6e\u653e\u5230 config/development.py \u4e2d   \u6700\u540e\u5c31\u662f\u7f16\u5199 manager.py \u6587\u4ef6\u4e86\u3002\u8fd9\u91cc\u6982\u8981\u5f97\u5217\u4e3e\u51e0\u4e2a\u91cd\u8981\u7684\u6587\u4ef6\uff0c\u66f4\u591a\u7684\u6587\u4ef6\u5927\u5bb6\u53ef\u4ee5\u4ece github \u4e0a clone \u4ee3\u7801\u51fa\u6765\u9605\u8bfb\u3002", 
            "title": "\u89c4\u8303\u4ee3\u7801\u5230\u6307\u5b9a\u76ee\u5f55"
        }, 
        {
            "location": "/chapter007/#_3", 
            "text": "manager.py  # coding: utf-8\nfrom flask.ext.script import Manager\nfrom application import create_app\n\n# Used by app debug   livereload\nPORT = 8080\n\napp = create_app()\nmanager = Manager(app)\n\n\n@manager.command\ndef run():\n    \"\"\"Run app.\"\"\"\n    app.run(port=PORT)\n\n\nif __name__ == \"__main__\":\n    manager.run()  application/ init .py  # coding: utf-8\nimport sys\nimport os\n\n# Insert project root path to sys.path\nproject_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nif project_path not in sys.path:\n    sys.path.insert(0, project_path)\n\nimport logging\nfrom flask import Flask\nfrom flask_wtf.csrf import CsrfProtect\nfrom config import load_config\nfrom application.extensions import db, login_manager\nfrom application.models import User\nfrom application.controllers import user_bp\n\n# convert python's encoding to utf8\ntry:\n    reload(sys)\n    sys.setdefaultencoding('utf8')\nexcept (AttributeError, NameError):\n    pass\n\n\ndef create_app():\n    \"\"\"Create Flask app.\"\"\"\n    config = load_config()\n    print config\n\n    app = Flask(__name__)\n    app.config.from_object(config)\n\n    if not hasattr(app, 'production'):\n        app.production = not app.debug and not app.testing\n\n    # CSRF protect\n    CsrfProtect(app)\n\n    if app.debug or app.testing:\n        # Log errors to stderr in production mode\n        app.logger.addHandler(logging.StreamHandler())\n        app.logger.setLevel(logging.ERROR)\n\n    # Register components\n    register_extensions(app)\n    register_blueprint(app)\n\n    return app\n\n\ndef register_extensions(app):\n    \"\"\"Register models.\"\"\"\n    db.init_app(app)\n    login_manager.init_app(app)\n\n    login_manager.login_view = 'login'\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.objects(id=user_id).first()\n\n\ndef register_blueprint(app):\n    app.register_blueprint(user_bp)  application/controllers/ init .py  #!/usr/bin/env python\n# encoding: utf-8\nimport json\n\nfrom flask import Blueprint, request, jsonify\nfrom flask.ext.login import current_user, login_user, logout_user\n\nfrom application.models import User\n\n\nuser_bp = Blueprint('user', __name__, url_prefix='')\n\n\n@user_bp.route('/login', methods=['POST'])\ndef login():\n    info = json.loads(request.data)\n    username = info.get('username', 'guest')\n    password = info.get('password', '')\n\n    user = User.objects(name=username,\n                        password=password).first()\n    if user:\n        login_user(user)\n        return jsonify(user.to_json())\n    else:\n        return jsonify({\"status\": 401,\n                        \"reason\": \"Username or Password Error\"})\n\n\n@user_bp.route('/logout', methods=['POST'])\ndef logout():\n    logout_user()\n    return jsonify(**{'result': 200,\n                      'data': {'message': 'logout success'}})\n\n@user_bp.route('/user_info', methods=['POST'])\ndef user_info():\n    if current_user.is_authenticated:\n        resp = {\"result\": 200,\n                \"data\": current_user.to_json()}\n    else:\n        resp = {\"result\": 401,\n                \"data\": {\"message\": \"user no login\"}}\n    return jsonify(**resp)  config/development.py  # coding: utf-8\nimport os\n\n\nclass DevelopmentConfig(object):\n    \"\"\"Base config class.\"\"\"\n    # Flask app config\n    DEBUG = False\n    TESTING = False\n    SECRET_KEY = \"sample_key\"\n\n    # Root path of project\n    PROJECT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\n    # Site domain\n    SITE_TITLE = \"twtf\"\n    SITE_DOMAIN = \"http://localhost:8080\"\n\n    # MongoEngine config\n    MONGODB_SETTINGS = {\n        'db': 'the_way_to_flask',\n        'host': 'localhost',\n        'port': 27017\n    }", 
            "title": "\u5408\u5e76\u540e\u7684\u6587\u4ef6"
        }, 
        {
            "location": "/chapter008/", 
            "text": "\u5efa\u7acb\u76ee\u5f55\u7ba1\u7406\u914d\u7f6e\n\n\n\u5728\u524d\u9762\u4e00\u7ae0\n\u300a\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\u300b\n \u4e2d\uff0c\u6211\u4eec\u5c06\u9879\u76ee\u6309\u7167\u529f\u80fd\u4f5c\u7528\u5212\u5206\u5230\u4e0d\u540c\u7684\u76ee\u5f55\u4e2d\uff0c\u8fd9\u6837\u4f7f\u5f97\u6211\u4eec\u7684\u9879\u76ee\u7ed3\u6784\u66f4\u52a0\u6e05\u6670\u548c\u89c4\u6574\u4e86\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u4e0a\u4e00\u7ae0\u8282\u7684\u5185\u5bb9\u6bd4\u8f83\u591a\uff0c\u5982\u679c\u4f5c\u4e3a\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u80af\u5b9a\u662f\u6709\u597d\u591a\u6709\u7591\u95ee\u7684\u5730\u65b9\uff0c\u4ece\u672c\u7ae0\u5f00\u59cb\u90fd\u4f1a\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8ba9\u5927\u5bb6\u5bf9 Flask \u7684\u4f7f\u7528\u66f4\u52a0\u5f97\u5f97\u5fc3\u5e94\u624b\u3002\n\n\n\u672c\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u7684\u662f Flask \u4e2d\u7684\u914d\u7f6e\u7ba1\u7406\uff0c\u4ece\u524d\u9762\u7ae0\u8282\n\u300a\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\u300b\n \u91cc\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u914d\u7f6e\u76ee\u5f55 \nconfig\n \u4e0b\u5305\u542b\u591a\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u4e3a\u4ec0\u4e48\u8981\u5305\u542b\u8fd9\u4e48\u591a\u6587\u4ef6\uff0c\u800c\u6211\u4eec\u8981\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\uff0c\u90fd\u662f\u672c\u7ae0\u7684\u8bb2\u89e3\u5185\u5bb9\u3002\n\n\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development_sample.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production_sample.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testing.py\n\n\n\n\u73af\u5883\u5206\u7c7b\n\n\n\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u662f\u9700\u8981\u6211\u4eec\u5173\u6ce8\u7684\uff0c\u90a3\u5c31\u662f\n\u6bcf\u4e2a\u914d\u7f6e\u6587\u4ef6\u90fd\u662f\u4e0e\u73af\u5883\u76f8\u5173\u7684\n\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c31\u662f\u56e0\u4e3a\u6709\u591a\u4e2a\u73af\u5883\uff0c\u6240\u4ee5\u624d\u4f1a\u51fa\u73b0\u591a\u4e2a\u914d\u7f6e\u3002\u5982\u679c\u4e0d\u592a\u7406\u89e3\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u7684\u8bdd\uff0c\u6211\u4eec\u770b\u4e00\u4e0b config \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u540d\uff0c\u5176\u5b9e\u53ef\u4ee5\u5206\u4e3a\u51e0\u7c7b\uff1a\n\n\n\n\ndevelopment\uff1a \u5f00\u53d1\u73af\u5883\uff0c\u4e00\u822c\u4e3a\u672c\u5730\u5f00\u53d1\u73af\u5883\u4f7f\u7528\n\n\nproduction\uff1a\u751f\u4ea7\u73af\u5883\uff0c\u4e00\u822c\u4e3a\u7ebf\u4e0a\u90e8\u7f72\u8fd0\u884c\u73af\u5883\u4f7f\u7528\n\n\ntesting\uff1a \u6d4b\u8bd5\u73af\u5883\uff0c\u4e00\u822c\u7528\u4e8e\u5404\u79cd\u6d4b\u8bd5\u4f7f\u7528\n\n\n\n\n\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\u4e00\u6837\uff0c\u6211\u4eec\u5728\u5e73\u65f6\u7684\u5de5\u4f5c\u4e2d\u4f1a\u6709\u5404\u79cd\u73af\u5883\uff0c\u6211\u4eec\u5728\u672c\u5730\u5f00\u53d1\u8c03\u8bd5\u7684\u65f6\u5019\u5e94\u8be5\u6709\u4e2a\u672c\u5730\u73af\u5883\uff0c\u5f53\u6211\u4eec\u8f6c\u6d4b\u8bd5\u4e4b\u540e\u540e\u4f1a\u6709\u4e2a\u6d4b\u8bd5\u73af\u5883\uff0c\u6d4b\u8bd5\u5b8c\u6210\u4e4b\u540e\u653e\u5230\u7ebf\u4e0a\u4e4b\u540e\u4f1a\u6709\u4e2a\u7ebf\u4e0a\u6b63\u5f0f\u73af\u5883\uff0c\u800c\u6bcf\u4e2a\u73af\u5883\u5f88\u96be\u4fdd\u6301\u914d\u7f6e\u5b8c\u5168\u4e00\u81f4\uff0c\u6240\u8c13\u7684\u4e0d\u4e00\u81f4\u662f\u6307\u4f8b\u5982\u6570\u636e\u5e93\u4fe1\u606f\u3001\u7a0b\u5e8f\u8fd0\u884c\u7684\u6a21\u578b\u7b49\uff0c\u4f8b\u5982\u6211\u4eec\u672c\u5730\u7684\u5f00\u53d1\u73af\u5883\u6570\u636e\u5e93\u5730\u5740\u662f\uff1a\n\n\nMongoDB\uff1a\nversion\uff1a3.2.6\nip\uff1alocalhost\nport\uff1a27017\n\n\n\n\u800c\u5728\u751f\u4ea7\u73af\u5883\u5374\u662f\uff1a\n\n\nMongoDB\uff1a\n    version\uff1a3.2.6\n    ip\uff1a192.168.59.104\n    port\uff1a27017\n\n\n\n\u6240\u4ee5\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u90e8\u7f72\uff0c\u6211\u4eec\u5c31\u4f1a\u8bbe\u7f6e\u591a\u4efd\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5feb\u901f\u5f97\u5728\u4e0d\u540c\u73af\u5883\u4e2d\u8fd0\u884c\u3002\u5982\u679c\u4f60\u6709\u5176\u4ed6\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u968f\u65f6\u6dfb\u52a0\u914d\u7f6e\u6587\u4ef6\uff0c\u5b8c\u5168\u6ca1\u95ee\u9898\u3002\n\n\n\u52a0\u8f7d\u914d\u7f6e\n\n\n\u90a3\u8fd9\u4e48\u591a\u4efd\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u5982\u4f55\u8ba9\u7a0b\u5e8f\u5236\u5b9a\u52a0\u8f7d\u54ea\u4efd\u914d\u7f6e\u6587\u4ef6\u5462\uff1f\u8fd9\u91cc\u7684\u5965\u5999\u5c31\u5728 \nconfig/__init__.py\n \u6587\u4ef6\u4e2d\u3002\u6211\u4eec\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u770b\u770b\uff1a\n\n\n# coding: UTF-8\nimport os\n\n\ndef load_config(mode=os.environ.get('MODE')):\n    \"\"\"Load config.\"\"\"\n    try:\n        if mode == 'PRODUCTION':\n            from .production import ProductionConfig\n            return ProductionConfig\n        elif mode == 'TESTING':\n            from .testing import TestingConfig\n            return TestingConfig\n        else:\n            from .development import DevelopmentConfig\n            return DevelopmentConfig\n    except ImportError:\n        from .default import Config\n        return Config\n\n\n\n\u5728 config/\ninit\n.py \u6587\u4ef6\u4e2d\uff0c\u6211\u5b9a\u4e49\u4e86\u4e00\u4e2a load_config \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a \nmode\n \u53c2\u6570\uff0c\u8868\u793a\u662f\u83b7\u53d6\u4ec0\u4e48\u73af\u5883\u7684\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u4f20\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u90a3\u9ed8\u8ba4\u4f7f\u7528\u7684\u5c31\u662f\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\u7684 \nMODE\n \u73af\u5883\u53d8\u91cf\uff0c\u7136\u540e\u5c31\u6839\u636e\u6307\u5b9a\u7684\u73af\u5883\u8fd4\u56de\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u3002\n\n\n\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u53ea\u80fd\u8fd4\u56de\u9ed8\u8ba4\u73af\u5883\u53d8\u91cf\u4e86\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u4f60\u9700\u8981\u65b0\u589e\u81ea\u5b9a\u4e49\u7684\u73af\u5883\u914d\u7f6e\u6587\u4ef6\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u7b80\u5355\u5f97\u4fee\u6539\u8fd9\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u6307\u5b9a\u52a0\u8f7d\u4f60\u81ea\u5b9a\u4e49\u7684\u914d\u7f6e\u6587\u4ef6\u5373\u53ef\u3002\n\n\n\u4f7f\u7528\u914d\u7f6e\n\n\n\u52a0\u8f7d\u914d\u7f6e\u8fd9\u4e00\u95ee\u9898\u89e3\u51b3\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5728\u6211\u4eec\u7684 Flask \u5e94\u7528\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u914d\u7f6e\u4e86\uff0c\u65e2\u7136\u90fd load \u597d\u4e86\u914d\u7f6e\uff0c\u90a3\u4e48\u4f7f\u7528\u4e5f\u5c31\u95ee\u9898\u4e0d\u5927\u4e86\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a\n\n\n\"\"\"Create Flask app.\"\"\"\nconfig = load_config(mode)\n\napp = Flask(__name__)\napp.config.from_object(config)\n\n\n\n\u8fd9\u91cc\u9996\u5148\u5c06\u914d\u7f6e load \u51fa\u6765\uff0c\u7136\u540e\u4f7f\u7528 Flask \u5bf9\u8c61\u7684 config.from_object \u8bbe\u7f6e\u914d\u7f6e\u3002\u5c31\u8fd9\u4e48\u7b80\u5355\u3002\n\n\n\u603b\u7ed3\n\n\n\u672c\u7ae0\u5bf9 Flask \u4e2d\u5982\u4f55\u914d\u7f6e\u591a\u73af\u5883\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u4e86\u8bf4\u660e\u548c\u4ecb\u7ecd\uff0c\u7136\u540e\u5206\u6790\u4e86\u5982\u4f55\u52a0\u8f7d\u4e0d\u540c\u914d\u7f6e\u6587\u4ef6\u7684\u539f\u7406\uff0c\u6700\u540e\uff0c\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5982\u4f55\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528\u914d\u7f6e\u7684\u793a\u4f8b\u3002", 
            "title": "\u914d\u7f6e\u7ba1\u7406"
        }, 
        {
            "location": "/chapter008/#_1", 
            "text": "\u5728\u524d\u9762\u4e00\u7ae0 \u300a\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\u300b  \u4e2d\uff0c\u6211\u4eec\u5c06\u9879\u76ee\u6309\u7167\u529f\u80fd\u4f5c\u7528\u5212\u5206\u5230\u4e0d\u540c\u7684\u76ee\u5f55\u4e2d\uff0c\u8fd9\u6837\u4f7f\u5f97\u6211\u4eec\u7684\u9879\u76ee\u7ed3\u6784\u66f4\u52a0\u6e05\u6670\u548c\u89c4\u6574\u4e86\u3002\u4f46\u662f\uff0c\u56e0\u4e3a\u4e0a\u4e00\u7ae0\u8282\u7684\u5185\u5bb9\u6bd4\u8f83\u591a\uff0c\u5982\u679c\u4f5c\u4e3a\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u80af\u5b9a\u662f\u6709\u597d\u591a\u6709\u7591\u95ee\u7684\u5730\u65b9\uff0c\u4ece\u672c\u7ae0\u5f00\u59cb\u90fd\u4f1a\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8ba9\u5927\u5bb6\u5bf9 Flask \u7684\u4f7f\u7528\u66f4\u52a0\u5f97\u5f97\u5fc3\u5e94\u624b\u3002  \u672c\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u7684\u662f Flask \u4e2d\u7684\u914d\u7f6e\u7ba1\u7406\uff0c\u4ece\u524d\u9762\u7ae0\u8282 \u300a\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\u300b  \u91cc\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u914d\u7f6e\u76ee\u5f55  config  \u4e0b\u5305\u542b\u591a\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u4e3a\u4ec0\u4e48\u8981\u5305\u542b\u8fd9\u4e48\u591a\u6587\u4ef6\uff0c\u800c\u6211\u4eec\u8981\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\uff0c\u90fd\u662f\u672c\u7ae0\u7684\u8bb2\u89e3\u5185\u5bb9\u3002  \u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development_sample.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production_sample.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testing.py", 
            "title": "\u5efa\u7acb\u76ee\u5f55\u7ba1\u7406\u914d\u7f6e"
        }, 
        {
            "location": "/chapter008/#_2", 
            "text": "\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6982\u5ff5\u662f\u9700\u8981\u6211\u4eec\u5173\u6ce8\u7684\uff0c\u90a3\u5c31\u662f \u6bcf\u4e2a\u914d\u7f6e\u6587\u4ef6\u90fd\u662f\u4e0e\u73af\u5883\u76f8\u5173\u7684 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5c31\u662f\u56e0\u4e3a\u6709\u591a\u4e2a\u73af\u5883\uff0c\u6240\u4ee5\u624d\u4f1a\u51fa\u73b0\u591a\u4e2a\u914d\u7f6e\u3002\u5982\u679c\u4e0d\u592a\u7406\u89e3\u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u7684\u8bdd\uff0c\u6211\u4eec\u770b\u4e00\u4e0b config \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u540d\uff0c\u5176\u5b9e\u53ef\u4ee5\u5206\u4e3a\u51e0\u7c7b\uff1a   development\uff1a \u5f00\u53d1\u73af\u5883\uff0c\u4e00\u822c\u4e3a\u672c\u5730\u5f00\u53d1\u73af\u5883\u4f7f\u7528  production\uff1a\u751f\u4ea7\u73af\u5883\uff0c\u4e00\u822c\u4e3a\u7ebf\u4e0a\u90e8\u7f72\u8fd0\u884c\u73af\u5883\u4f7f\u7528  testing\uff1a \u6d4b\u8bd5\u73af\u5883\uff0c\u4e00\u822c\u7528\u4e8e\u5404\u79cd\u6d4b\u8bd5\u4f7f\u7528   \u5982\u6211\u4eec\u6240\u770b\u5230\u7684\u4e00\u6837\uff0c\u6211\u4eec\u5728\u5e73\u65f6\u7684\u5de5\u4f5c\u4e2d\u4f1a\u6709\u5404\u79cd\u73af\u5883\uff0c\u6211\u4eec\u5728\u672c\u5730\u5f00\u53d1\u8c03\u8bd5\u7684\u65f6\u5019\u5e94\u8be5\u6709\u4e2a\u672c\u5730\u73af\u5883\uff0c\u5f53\u6211\u4eec\u8f6c\u6d4b\u8bd5\u4e4b\u540e\u540e\u4f1a\u6709\u4e2a\u6d4b\u8bd5\u73af\u5883\uff0c\u6d4b\u8bd5\u5b8c\u6210\u4e4b\u540e\u653e\u5230\u7ebf\u4e0a\u4e4b\u540e\u4f1a\u6709\u4e2a\u7ebf\u4e0a\u6b63\u5f0f\u73af\u5883\uff0c\u800c\u6bcf\u4e2a\u73af\u5883\u5f88\u96be\u4fdd\u6301\u914d\u7f6e\u5b8c\u5168\u4e00\u81f4\uff0c\u6240\u8c13\u7684\u4e0d\u4e00\u81f4\u662f\u6307\u4f8b\u5982\u6570\u636e\u5e93\u4fe1\u606f\u3001\u7a0b\u5e8f\u8fd0\u884c\u7684\u6a21\u578b\u7b49\uff0c\u4f8b\u5982\u6211\u4eec\u672c\u5730\u7684\u5f00\u53d1\u73af\u5883\u6570\u636e\u5e93\u5730\u5740\u662f\uff1a  MongoDB\uff1a\nversion\uff1a3.2.6\nip\uff1alocalhost\nport\uff1a27017  \u800c\u5728\u751f\u4ea7\u73af\u5883\u5374\u662f\uff1a  MongoDB\uff1a\n    version\uff1a3.2.6\n    ip\uff1a192.168.59.104\n    port\uff1a27017  \u6240\u4ee5\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u90e8\u7f72\uff0c\u6211\u4eec\u5c31\u4f1a\u8bbe\u7f6e\u591a\u4efd\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5feb\u901f\u5f97\u5728\u4e0d\u540c\u73af\u5883\u4e2d\u8fd0\u884c\u3002\u5982\u679c\u4f60\u6709\u5176\u4ed6\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u968f\u65f6\u6dfb\u52a0\u914d\u7f6e\u6587\u4ef6\uff0c\u5b8c\u5168\u6ca1\u95ee\u9898\u3002", 
            "title": "\u73af\u5883\u5206\u7c7b"
        }, 
        {
            "location": "/chapter008/#_3", 
            "text": "\u90a3\u8fd9\u4e48\u591a\u4efd\u914d\u7f6e\u6587\u4ef6\uff0c\u6211\u5982\u4f55\u8ba9\u7a0b\u5e8f\u5236\u5b9a\u52a0\u8f7d\u54ea\u4efd\u914d\u7f6e\u6587\u4ef6\u5462\uff1f\u8fd9\u91cc\u7684\u5965\u5999\u5c31\u5728  config/__init__.py  \u6587\u4ef6\u4e2d\u3002\u6211\u4eec\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u770b\u770b\uff1a  # coding: UTF-8\nimport os\n\n\ndef load_config(mode=os.environ.get('MODE')):\n    \"\"\"Load config.\"\"\"\n    try:\n        if mode == 'PRODUCTION':\n            from .production import ProductionConfig\n            return ProductionConfig\n        elif mode == 'TESTING':\n            from .testing import TestingConfig\n            return TestingConfig\n        else:\n            from .development import DevelopmentConfig\n            return DevelopmentConfig\n    except ImportError:\n        from .default import Config\n        return Config  \u5728 config/ init .py \u6587\u4ef6\u4e2d\uff0c\u6211\u5b9a\u4e49\u4e86\u4e00\u4e2a load_config \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a  mode  \u53c2\u6570\uff0c\u8868\u793a\u662f\u83b7\u53d6\u4ec0\u4e48\u73af\u5883\u7684\u914d\u7f6e\uff0c\u5982\u679c\u4e0d\u4f20\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u90a3\u9ed8\u8ba4\u4f7f\u7528\u7684\u5c31\u662f\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u4e2d\u7684  MODE  \u73af\u5883\u53d8\u91cf\uff0c\u7136\u540e\u5c31\u6839\u636e\u6307\u5b9a\u7684\u73af\u5883\u8fd4\u56de\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u3002  \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u53ea\u80fd\u8fd4\u56de\u9ed8\u8ba4\u73af\u5883\u53d8\u91cf\u4e86\u3002\u540c\u6837\u7684\uff0c\u5982\u679c\u4f60\u9700\u8981\u65b0\u589e\u81ea\u5b9a\u4e49\u7684\u73af\u5883\u914d\u7f6e\u6587\u4ef6\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u7b80\u5355\u5f97\u4fee\u6539\u8fd9\u4e2a\u51fd\u6570\uff0c\u5e76\u4e14\u6307\u5b9a\u52a0\u8f7d\u4f60\u81ea\u5b9a\u4e49\u7684\u914d\u7f6e\u6587\u4ef6\u5373\u53ef\u3002", 
            "title": "\u52a0\u8f7d\u914d\u7f6e"
        }, 
        {
            "location": "/chapter008/#_4", 
            "text": "\u52a0\u8f7d\u914d\u7f6e\u8fd9\u4e00\u95ee\u9898\u89e3\u51b3\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u5728\u6211\u4eec\u7684 Flask \u5e94\u7528\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u914d\u7f6e\u4e86\uff0c\u65e2\u7136\u90fd load \u597d\u4e86\u914d\u7f6e\uff0c\u90a3\u4e48\u4f7f\u7528\u4e5f\u5c31\u95ee\u9898\u4e0d\u5927\u4e86\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a  \"\"\"Create Flask app.\"\"\"\nconfig = load_config(mode)\n\napp = Flask(__name__)\napp.config.from_object(config)  \u8fd9\u91cc\u9996\u5148\u5c06\u914d\u7f6e load \u51fa\u6765\uff0c\u7136\u540e\u4f7f\u7528 Flask \u5bf9\u8c61\u7684 config.from_object \u8bbe\u7f6e\u914d\u7f6e\u3002\u5c31\u8fd9\u4e48\u7b80\u5355\u3002", 
            "title": "\u4f7f\u7528\u914d\u7f6e"
        }, 
        {
            "location": "/chapter008/#_5", 
            "text": "\u672c\u7ae0\u5bf9 Flask \u4e2d\u5982\u4f55\u914d\u7f6e\u591a\u73af\u5883\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u4e86\u8bf4\u660e\u548c\u4ecb\u7ecd\uff0c\u7136\u540e\u5206\u6790\u4e86\u5982\u4f55\u52a0\u8f7d\u4e0d\u540c\u914d\u7f6e\u6587\u4ef6\u7684\u539f\u7406\uff0c\u6700\u540e\uff0c\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5982\u4f55\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528\u914d\u7f6e\u7684\u793a\u4f8b\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/chapter009/", 
            "text": "\u4f7f\u7528 Flask-Script \u542f\u52a8\u5e94\u7528\n\n\n\u770b\u5230\u8fd9\u7ae0\u7684\u5185\u5bb9\u4e5f\u8bb8\u4f60\u4f1a\u6709\u7591\u60d1\uff0c\u542f\u52a8\u5e94\u7528\uff1f\u4e0d\u662f\u5f88\u7b80\u5355\u5417\uff1f\u6211\u76f4\u63a5\u4f7f\u7528 \n\n\npython app.py\n\n\n\n\u4e0d\u5c31\u5c06\u5e94\u7528\u8dd1\u8d77\u6765\u4e86\u5417\uff0c\u800c\u4e14\u6211\u8fd8\u80fd\u770b\u5230\u8bbf\u95ee\u7684\u65e5\u5fd7\u5462\u3002\u662f\u7684\uff0c\u6ca1\u9519\uff0c\u76f4\u63a5\u8fd0\u884c\u4ee3\u7801\u662f\u53ef\u4ee5\u5c06\u6211\u4eec\u7f16\u5199\u7684 Web \u5e94\u7528\u8dd1\u8d77\u6765\uff0c\u800c\u4e14\u8fd8\u80fd\u5f88\u597d\u5f97\u67e5\u770b\u8fd0\u884c\u4fe1\u606f\uff0c\u4f46\u662f\uff0c\u5047\u8bbe\u4f60\u60f3\u66f4\u6362\u914d\u7f6e\u5462\uff1f\u4f8b\u5982\uff0c\u4f60\u6709 development1.py \u548c development2.py \u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u4e00\u5f00\u59cb\u4f60\u4f7f\u7528 development1.py \u8fd0\u884c\uff0c\u7136\u540e\u4f60\u60f3\u6362\u6210 development2.py \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u600e\u4e48\u505a\uff1f\u6839\u636e\u6211\u4eec\u5728\n\u300a\u914d\u7f6e\u7ba1\u7406\u300b\n\u4e2d\u4ecb\u7ecd\u7684\u90a3\u6837\uff0c\u4f60\u6709\u4e24\u4e2a\u9009\u62e9\uff0c\u5206\u522b\u662f\uff1a\n\n\n\n\n\u4fee\u6539\u7cfb\u7edf\u53d8\u91cf MODE\n\n\n\u4fee\u6539\u4ee3\u7801\uff0c\u76f4\u63a5\u6307\u5b9a create_app('development1') =\n create_app('development2')\n\n\n\n\n\u770b\u4e0a\u53bb\u90fd\u4e0d\u662f\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u8fd9\u81f3\u5c11\u6d89\u53ca\u5230\u4e24\u4e2a\u52a8\u4f5c\uff0c\u7b2c\u4e00\u4e2a\u662f\u4fee\u6539\u6a21\u5f0f\uff0c\u7b2c\u4e8c\u4e2a\u662f\u542f\u52a8\u5e94\u7528\u3002\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u5047\u5982\u6211\u4eec\u5728\u8fd0\u884c\u5e94\u7528\u7684\u65f6\u5019\u80fd\u591f\u6307\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u8bdd\uff0c\u90a3\u4e0d\u662f\u65b9\u4fbf\u591a\u4e86\uff0c\u4f8b\u5982\uff1a\n\n\npython app.py development1\n\n\n\n\u8fd9\u6837\u7684\u8bdd\uff0c\u597d\u50cf\u5c31\u597d\u591a\u4e86\uff0c\u786e\u5b9e\uff0c\u8fd9\u6837\u786e\u5b9e\u6ee1\u8db3\u4e86\u6211\u4eec\u7684\u9700\u6c42\uff0c\u4f46\u662f\uff0c\u8fd9\u4ec5\u4ec5\u6ee1\u8db3\u4e86\u4e00\u4e2a\u9700\u6c42\uff0c\u90a3\u4e07\u4e00\u6211\u4eec\u8fd8\u60f3\u770b\u6211\u4eec\u7684\u5e94\u7528\u5bf9\u5916\u66b4\u9732\u7684 API \u6709\u54ea\u4e9b\u5462\uff1f\u6211\u8fd8\u60f3\u4f7f\u7528\u6211\u4eec\u5e94\u7528\u7684 python shell \u5462\uff1f\u8fd9\u4e9b\u90fd\u662f\u6bd4\u8f83\u96be\u5b9e\u73b0\u7684\u3002\u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u63d0\u4f9b\u4e30\u5bcc\u6269\u5c55\u7684\u6846\u67b6\uff0cFlask \u7684\u8d21\u732e\u8005\u4eec\u4e5f\u5df2\u7ecf\u4e3a\u6211\u4eec\u60f3\u5230\u4e86\uff0c\u5e76\u4e14\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6269\u5c55 Flask-Script\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u4ece\u8fd9\u4e9b\u7e41\u7410\u7684\u4e8b\u60c5\u4e2d\u89e3\u653e\u51fa\u6765\u3002\n\n\n\u53ef\u80fd\u673a\u667a\u7684\u4f60\u5df2\u7ecf\u53d1\u73b0\u4e86\uff0c\u5728\u6211\u4eec\u7684\n\u300a\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\u300b\n\u4e2d\u5df2\u7ecf\u6839\u76ee\u5f55\u91cc\u9762\u591a\u4e86\u4e00\u4e2a manage.py \u7684\u6587\u4ef6\uff0c\u662f\u7684\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5c31\u662f\u4e3a\u4f7f\u7528 Flask-Script \u800c\u521b\u5efa\u7684\uff0c\u800c\u6211\u4eec\u542f\u52a8\u5e94\u7528\u4e5f\u5c06\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u3002\u4e0b\u9762\u5c31\u6765\u4ecb\u7ecd\u4e00\u4e0b Flask-Script \u7684\u4e00\u4e9b\u77e5\u8bc6\u3002\n\n\n\u5b89\u88c5 Flask-Script\n\n\n\u4f9d\u65e7\u8fd8\u662f\u8001\u5957\u8def\uff0c\u76f4\u63a5\u4f7f\u7528 pip \u5b89\u88c5\u65e2\u53ef\u3002\n\n\npip install Flask-Script\n\n\n\n\u5c0f\u8bd5\u8eab\u624b\n\n\n\u548c\u6211\u4eec\u4e4b\u524d\u4f7f\u7528\u8fc7\u7684 Flask \u6269\u5c55\u4e0d\u4e00\u6837\uff0cFlask-Script \u4e0d\u9700\u8981\u83b7\u53d6\u6211\u4eec app \u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u6240\u4ee5\u5c31\u4e0d\u7528\u4f7f\u7528 init_app \u8fd9\u6837\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e86\uff0c\u4f46\u662f\uff0c\u6bd5\u7adf app \u662f\u6211\u4eec\u7684 Flask \u670d\u52a1\u5668\uff0c\u6240\u4ee5\u8fd8\u662f\u9700\u8981\u4f7f\u7528\u5230\u5b83\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u542f\u52a8\u811a\u672c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a\n\n\n# coding: utf-8\nfrom flask_script import Manager\nfrom application import create_app\n\napp = create_app('development')\nmanager = Manager(app)\n\n\nif __name__ == \"__main__\":\n    manager.run()\n\n\n\n\u6211\u4eec\u8fd9\u5c31\u505a\u4e86\u4e24\u4e2a\u64cd\u4f5c\uff0c\u5206\u522b\u662f\uff1a\n\n\nmanager = Manager(app)\nmanager.run()\n\n\n\n\u5f88\u5947\u602a\u7684\u662f\uff0c\u548c\u6211\u4eec\u6700\u5f00\u59cb\u7684\u8fd0\u884c\u7684\u76f8\u6bd4\uff0c\u597d\u50cf\u66f4\u590d\u6742\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u6700\u521d\u7684\u7248\u672c\u76f4\u63a5\u8fd9\u6837\u8dd1\u5c31\u53ef\u4ee5\u4e86\uff1a\n\n\napp.run()\n\n\n\n\u90a3\u4e3a\u4ec0\u4e48\u8981\u591a\u4e00\u4e2a manager \u5462\uff1f\u56e0\u4e3amanager \u53ef\u4ee5\u505a\u66f4\u591a\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u6307\u5b9a\u8fd0\u884c\u53c2\u6570\uff0c\u67e5\u770b\u6240\u6709 API \u7b49\u3002\n\n\n\u6307\u5b9a\u8fd0\u884c\u53c2\u6570\n\n\n\u5982\u679c\u6211\u4eec\u60f3\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0cFlask-Script \u63d0\u4f9b\u4e86\u4e00\u4e2a -c \u7684\u53c2\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom flask_script import Manager\nfrom application import create_app\n\nmanager = Manager(create_app)\nmanager.add_option('-c', '--config', dest='mode', required=False)\n\n\nif __name__ == \"__main__\":\n    manager.run()\n\n\n\n\u5176\u5b9e\u8fd9\u91cc\u505a\u7684\u6539\u53d8\u5c31\u662f\u4e0d\u76f4\u63a5\u521b\u5efa app\uff0c\u800c\u662f\u5c06\u521b\u5efa\u65b9\u6cd5\u76f4\u63a5\u4f20\u7ed9 Manager\uff0c\u7136\u540e\u591a\u4e86\u91cd\u8981\u7684\u4e00\u884c\uff0c\u90a3\u5c31\u662f\uff1a\n\n\nmanager.add_option('-c', '--config', dest='mode', required=False)\n\n\n\n\u901a\u8fc7\u540d\u5b57\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6dfb\u52a0\u9009\u9879\u7684\u8bed\u53e5\uff0c\u9ed8\u8ba4\u5c31\u662f\u7ed9\u6211\u4eec\u7684 create_app \u6dfb\u52a0\u53c2\u6570\u9009\u9879\uff0c\u7136\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u53c2\u6570\u5206\u522b\u6709\u54ea\u4e9b\uff1a\n\n\n\n\n-c : \u8fd0\u884c\u53c2\u6570\u7684\u7b80\u5199\n\n\n--config : \u8fd0\u884c\u53c2\u6570\u7684\u5168\u5199\n\n\ndest : \u4f20\u9012\u7ed9 create_app \u7684\u53c2\u6570\u540d\u5b57\uff0c\u56e0\u4e3a\u6211\u4eec\u662f create_app(mode) \uff0c\u6240\u4ee5\u8fd9\u91cc\u662f 'mode'\n\n\nrequired : \u662f\u5426\u662f\u5fc5\u987b\u7684\uff0c\u8fd9\u91cc\u56e0\u4e3a\u6709\u9ed8\u8ba4\u7684 mode \uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5fc5\u9009\u3002\n\n\n\n\n\u5c31\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7ed9 create_app \u4f20\u9012\u53c2\u6570\u4e86\uff0c\u90a3\u600e\u4e48\u4f20\uff0c\u8fd9\u6837\u5b50\uff1a\n\n\npython manage.py -c development  # \u5f00\u53d1\u73af\u5883\u8fd0\u884c\npython manage.py -c testing      # \u6d4b\u8bd5\u73af\u5883\u8fd0\u884c\n\n\n\n\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6267\u884c\u5f97\u65f6\u5019\u6307\u5b9a\u8981\u8fd0\u884c\u7684\u73af\u5883\u4e86\u3002\n\n\n\u67e5\u770b\u6240\u6709\u66b4\u9732\u7684 API\n\n\n\u5f88\u591a\u65f6\u5019\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u9879\u76ee\u662f\u591a\u4eba\u5f00\u53d1\uff0c\u6240\u4ee5\u6211\u4eec\u7ecf\u5e38\u4f1a\u4e0d\u77e5\u9053\u6211\u4eec\u7684\u4ee3\u7801\u66b4\u9732\u4e86\u54ea\u4e9b API\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5728\u591a\u4eba\u534f\u4f5c\u7684\u9879\u76ee\u4e2d\u662f\u975e\u5e38\u5e38\u89c1\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u6211\u7ecf\u5386\u8fc7\u7684\u4e24\u4e2a\u4f01\u4e1a\uff0c\u5176\u4e2d\u4e00\u5bb6\u662f\u4e16\u754c500\u5f3a\u7684 IT \u4f01\u4e1a\uff0c\u90fd\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u4ed6\u4eec\u7684\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u4e00\u4efd Excel \u7ba1\u7406\u66b4\u9732\u7684\u63a5\u53e3\uff0c\u800c\u8fd9\u4e9b\u63a5\u53e3\u90fd\u7531\u5404\u4e2a\u6a21\u5757\u7684\u8d1f\u8d23\u4eba\u81ea\u5df1\u586b\u5199\uff0c\u5f53\u7136\uff0c\u540e\u9762\u6211\u5f00\u53d1\u4e86\u4e00\u4e2a\u7edf\u4e00\u7ba1\u7406\u7cfb\u7edf\u5bf9 API \u8fdb\u884c\u7ba1\u7406\uff0c\u4f46\u6bd5\u7adf\u5728\u5927\u7684\u4f01\u4e1a\u4e2d\uff0c\u5f88\u96be\u534f\u8c03\u597d\u6240\u6709\u7684\u90e8\u95e8\u548c\u4ea7\u54c1\uff0c\u6240\u4ee5\u8fd8\u662f\u5f88\u96be\u6709\u5168\u5c40\u7684\u89c6\u89d2\u3002\n\n\n\u4f46\u662f\uff0c\u5728 Flask \u4e2d\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u62c5\u5fc3\u6709\u8fd9\u79cd\u95ee\u9898\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u7684 Flask-Script \u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u547d\u4ee4\u53ef\u4ee5\u5feb\u901f\u5f97\u5e2e\u52a9\u6211\u4eec\u5217\u4e3e\u51fa\u6211\u4eec\u7684\u516c\u5f00\u63a5\u53e3\uff0c\u4f7f\u7528\u4e0a\u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u8fd9\u6837\u5199\u5373\u53ef\uff1a\n\n\nfrom flask_script.commands import ShowUrls\n\nmanager.add_command(\"showurls\", ShowUrls())\n\n\n\n\u7136\u540e\uff0c\u6211\u4eec\u5728\u63a7\u5236\u53f0\u4e0a\u6572\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\npython manage.py showurls\n\n\n\n\u4f60\u5f88\u60ca\u559c\u5f97\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u8f93\u51fa\uff1a\n\n\nRule                     Endpoint\n---------------------------------------\n/login                   user.login\n/logout                  user.logout\n/static/\npath:filename\n  static\n/user_info               user.user_info\n\n\n\n\u5b83\u5c06\u6211\u4eec\u6240\u6709\u7684\u516c\u5f00\u63a5\u53e3\u90fd\u6253\u5370\u51fa\u6765\u4e86\uff0c\u4f46\u662f\uff0c\u53ef\u80fd\u4f60\u4e5f\u53d1\u73b0\u4e86\uff0c\u4e0d\u5b8c\u5584\u7684\u5730\u65b9\u5c31\u662f\u8fd9\u91cc\u53ea\u7ed9\u51fa\u4e86 URI\uff0c\u5e76\u6ca1\u6709\u7ed9\u51fa\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982 GET\u3001POST \u7b49\u3002\u8fd9\u662f\u6709\u5f85\u63d0\u9ad8\u7684\u5730\u65b9\u3002\n\n\n\u603b\u7ed3\n\n\n\u672c\u7ae0\u4ecb\u7ecd\u4e86 Flask-Script \u8fd9\u4e00\u6269\u5c55\u7684\u4f7f\u7528\uff0c\u5e76\u4e14\u4ecb\u7ecd\u4e86\u4e24\u4e2a\u7528\u6cd5\uff0c\u5206\u522b\u662f\u4f7f\u7528\u6307\u5b9a\u53c2\u6570\u542f\u52a8\u5e94\u7528\u4ee5\u53ca\u67e5\u770b\u6240\u6709\u66b4\u9732\u51fa\u6765\u7684 API URI\uff0c\u4f46\u662f\u4e5f\u8bb8\u4f60\u4f1a\u6709\u4e00\u4e9b\u65b0\u7684\u60f3\u6cd5\uff0c\u4f46\u662f Flask-Script \u5e76\u6ca1\u6709\u63d0\u4f9b\u7ed9\u4f60\uff0c\u6ca1\u5173\u7cfb\uff0cFlask \u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u6269\u5c55\u53cb\u597d\u7684\u6846\u67b6\uff0c\u4f60\u6709\u4efb\u4f55\u60f3\u6cd5\u90fd\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u6765\u5b9e\u73b0\uff0c\u66f4\u591a\u7684\u8be6\u60c5\u8bfb\u8005\u53ef\u4ee5\u53c2\u8003\nFlask-Script\u5b98\u65b9\u6587\u6863\n\u6765\u5b9e\u73b0\u3002", 
            "title": "\u542f\u52a8\u5e94\u7528"
        }, 
        {
            "location": "/chapter009/#flask-script", 
            "text": "\u770b\u5230\u8fd9\u7ae0\u7684\u5185\u5bb9\u4e5f\u8bb8\u4f60\u4f1a\u6709\u7591\u60d1\uff0c\u542f\u52a8\u5e94\u7528\uff1f\u4e0d\u662f\u5f88\u7b80\u5355\u5417\uff1f\u6211\u76f4\u63a5\u4f7f\u7528   python app.py  \u4e0d\u5c31\u5c06\u5e94\u7528\u8dd1\u8d77\u6765\u4e86\u5417\uff0c\u800c\u4e14\u6211\u8fd8\u80fd\u770b\u5230\u8bbf\u95ee\u7684\u65e5\u5fd7\u5462\u3002\u662f\u7684\uff0c\u6ca1\u9519\uff0c\u76f4\u63a5\u8fd0\u884c\u4ee3\u7801\u662f\u53ef\u4ee5\u5c06\u6211\u4eec\u7f16\u5199\u7684 Web \u5e94\u7528\u8dd1\u8d77\u6765\uff0c\u800c\u4e14\u8fd8\u80fd\u5f88\u597d\u5f97\u67e5\u770b\u8fd0\u884c\u4fe1\u606f\uff0c\u4f46\u662f\uff0c\u5047\u8bbe\u4f60\u60f3\u66f4\u6362\u914d\u7f6e\u5462\uff1f\u4f8b\u5982\uff0c\u4f60\u6709 development1.py \u548c development2.py \u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u4e00\u5f00\u59cb\u4f60\u4f7f\u7528 development1.py \u8fd0\u884c\uff0c\u7136\u540e\u4f60\u60f3\u6362\u6210 development2.py \u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u600e\u4e48\u505a\uff1f\u6839\u636e\u6211\u4eec\u5728 \u300a\u914d\u7f6e\u7ba1\u7406\u300b \u4e2d\u4ecb\u7ecd\u7684\u90a3\u6837\uff0c\u4f60\u6709\u4e24\u4e2a\u9009\u62e9\uff0c\u5206\u522b\u662f\uff1a   \u4fee\u6539\u7cfb\u7edf\u53d8\u91cf MODE  \u4fee\u6539\u4ee3\u7801\uff0c\u76f4\u63a5\u6307\u5b9a create_app('development1') =  create_app('development2')   \u770b\u4e0a\u53bb\u90fd\u4e0d\u662f\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u8fd9\u81f3\u5c11\u6d89\u53ca\u5230\u4e24\u4e2a\u52a8\u4f5c\uff0c\u7b2c\u4e00\u4e2a\u662f\u4fee\u6539\u6a21\u5f0f\uff0c\u7b2c\u4e8c\u4e2a\u662f\u542f\u52a8\u5e94\u7528\u3002\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u5047\u5982\u6211\u4eec\u5728\u8fd0\u884c\u5e94\u7528\u7684\u65f6\u5019\u80fd\u591f\u6307\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u7684\u8bdd\uff0c\u90a3\u4e0d\u662f\u65b9\u4fbf\u591a\u4e86\uff0c\u4f8b\u5982\uff1a  python app.py development1  \u8fd9\u6837\u7684\u8bdd\uff0c\u597d\u50cf\u5c31\u597d\u591a\u4e86\uff0c\u786e\u5b9e\uff0c\u8fd9\u6837\u786e\u5b9e\u6ee1\u8db3\u4e86\u6211\u4eec\u7684\u9700\u6c42\uff0c\u4f46\u662f\uff0c\u8fd9\u4ec5\u4ec5\u6ee1\u8db3\u4e86\u4e00\u4e2a\u9700\u6c42\uff0c\u90a3\u4e07\u4e00\u6211\u4eec\u8fd8\u60f3\u770b\u6211\u4eec\u7684\u5e94\u7528\u5bf9\u5916\u66b4\u9732\u7684 API \u6709\u54ea\u4e9b\u5462\uff1f\u6211\u8fd8\u60f3\u4f7f\u7528\u6211\u4eec\u5e94\u7528\u7684 python shell \u5462\uff1f\u8fd9\u4e9b\u90fd\u662f\u6bd4\u8f83\u96be\u5b9e\u73b0\u7684\u3002\u7136\u800c\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u63d0\u4f9b\u4e30\u5bcc\u6269\u5c55\u7684\u6846\u67b6\uff0cFlask \u7684\u8d21\u732e\u8005\u4eec\u4e5f\u5df2\u7ecf\u4e3a\u6211\u4eec\u60f3\u5230\u4e86\uff0c\u5e76\u4e14\u7ed9\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6269\u5c55 Flask-Script\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u4ece\u8fd9\u4e9b\u7e41\u7410\u7684\u4e8b\u60c5\u4e2d\u89e3\u653e\u51fa\u6765\u3002  \u53ef\u80fd\u673a\u667a\u7684\u4f60\u5df2\u7ecf\u53d1\u73b0\u4e86\uff0c\u5728\u6211\u4eec\u7684 \u300a\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\u300b \u4e2d\u5df2\u7ecf\u6839\u76ee\u5f55\u91cc\u9762\u591a\u4e86\u4e00\u4e2a manage.py \u7684\u6587\u4ef6\uff0c\u662f\u7684\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5c31\u662f\u4e3a\u4f7f\u7528 Flask-Script \u800c\u521b\u5efa\u7684\uff0c\u800c\u6211\u4eec\u542f\u52a8\u5e94\u7528\u4e5f\u5c06\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u3002\u4e0b\u9762\u5c31\u6765\u4ecb\u7ecd\u4e00\u4e0b Flask-Script \u7684\u4e00\u4e9b\u77e5\u8bc6\u3002", 
            "title": "\u4f7f\u7528 Flask-Script \u542f\u52a8\u5e94\u7528"
        }, 
        {
            "location": "/chapter009/#flask-script_1", 
            "text": "\u4f9d\u65e7\u8fd8\u662f\u8001\u5957\u8def\uff0c\u76f4\u63a5\u4f7f\u7528 pip \u5b89\u88c5\u65e2\u53ef\u3002  pip install Flask-Script", 
            "title": "\u5b89\u88c5 Flask-Script"
        }, 
        {
            "location": "/chapter009/#_1", 
            "text": "\u548c\u6211\u4eec\u4e4b\u524d\u4f7f\u7528\u8fc7\u7684 Flask \u6269\u5c55\u4e0d\u4e00\u6837\uff0cFlask-Script \u4e0d\u9700\u8981\u83b7\u53d6\u6211\u4eec app \u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u6240\u4ee5\u5c31\u4e0d\u7528\u4f7f\u7528 init_app \u8fd9\u6837\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e86\uff0c\u4f46\u662f\uff0c\u6bd5\u7adf app \u662f\u6211\u4eec\u7684 Flask \u670d\u52a1\u5668\uff0c\u6240\u4ee5\u8fd8\u662f\u9700\u8981\u4f7f\u7528\u5230\u5b83\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u542f\u52a8\u811a\u672c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a  # coding: utf-8\nfrom flask_script import Manager\nfrom application import create_app\n\napp = create_app('development')\nmanager = Manager(app)\n\n\nif __name__ == \"__main__\":\n    manager.run()  \u6211\u4eec\u8fd9\u5c31\u505a\u4e86\u4e24\u4e2a\u64cd\u4f5c\uff0c\u5206\u522b\u662f\uff1a  manager = Manager(app)\nmanager.run()  \u5f88\u5947\u602a\u7684\u662f\uff0c\u548c\u6211\u4eec\u6700\u5f00\u59cb\u7684\u8fd0\u884c\u7684\u76f8\u6bd4\uff0c\u597d\u50cf\u66f4\u590d\u6742\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u6700\u521d\u7684\u7248\u672c\u76f4\u63a5\u8fd9\u6837\u8dd1\u5c31\u53ef\u4ee5\u4e86\uff1a  app.run()  \u90a3\u4e3a\u4ec0\u4e48\u8981\u591a\u4e00\u4e2a manager \u5462\uff1f\u56e0\u4e3amanager \u53ef\u4ee5\u505a\u66f4\u591a\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u6307\u5b9a\u8fd0\u884c\u53c2\u6570\uff0c\u67e5\u770b\u6240\u6709 API \u7b49\u3002", 
            "title": "\u5c0f\u8bd5\u8eab\u624b"
        }, 
        {
            "location": "/chapter009/#_2", 
            "text": "\u5982\u679c\u6211\u4eec\u60f3\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\uff0cFlask-Script \u63d0\u4f9b\u4e86\u4e00\u4e2a -c \u7684\u53c2\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a  #!/usr/bin/env python\n# encoding: utf-8\nfrom flask_script import Manager\nfrom application import create_app\n\nmanager = Manager(create_app)\nmanager.add_option('-c', '--config', dest='mode', required=False)\n\n\nif __name__ == \"__main__\":\n    manager.run()  \u5176\u5b9e\u8fd9\u91cc\u505a\u7684\u6539\u53d8\u5c31\u662f\u4e0d\u76f4\u63a5\u521b\u5efa app\uff0c\u800c\u662f\u5c06\u521b\u5efa\u65b9\u6cd5\u76f4\u63a5\u4f20\u7ed9 Manager\uff0c\u7136\u540e\u591a\u4e86\u91cd\u8981\u7684\u4e00\u884c\uff0c\u90a3\u5c31\u662f\uff1a  manager.add_option('-c', '--config', dest='mode', required=False)  \u901a\u8fc7\u540d\u5b57\u53ef\u4ee5\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6dfb\u52a0\u9009\u9879\u7684\u8bed\u53e5\uff0c\u9ed8\u8ba4\u5c31\u662f\u7ed9\u6211\u4eec\u7684 create_app \u6dfb\u52a0\u53c2\u6570\u9009\u9879\uff0c\u7136\u540e\u6211\u4eec\u770b\u4e00\u4e0b\u5b83\u7684\u53c2\u6570\u5206\u522b\u6709\u54ea\u4e9b\uff1a   -c : \u8fd0\u884c\u53c2\u6570\u7684\u7b80\u5199  --config : \u8fd0\u884c\u53c2\u6570\u7684\u5168\u5199  dest : \u4f20\u9012\u7ed9 create_app \u7684\u53c2\u6570\u540d\u5b57\uff0c\u56e0\u4e3a\u6211\u4eec\u662f create_app(mode) \uff0c\u6240\u4ee5\u8fd9\u91cc\u662f 'mode'  required : \u662f\u5426\u662f\u5fc5\u987b\u7684\uff0c\u8fd9\u91cc\u56e0\u4e3a\u6709\u9ed8\u8ba4\u7684 mode \uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u5fc5\u9009\u3002   \u5c31\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7ed9 create_app \u4f20\u9012\u53c2\u6570\u4e86\uff0c\u90a3\u600e\u4e48\u4f20\uff0c\u8fd9\u6837\u5b50\uff1a  python manage.py -c development  # \u5f00\u53d1\u73af\u5883\u8fd0\u884c\npython manage.py -c testing      # \u6d4b\u8bd5\u73af\u5883\u8fd0\u884c  \u5c31\u662f\u8fd9\u4e48\u7b80\u5355\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6267\u884c\u5f97\u65f6\u5019\u6307\u5b9a\u8981\u8fd0\u884c\u7684\u73af\u5883\u4e86\u3002", 
            "title": "\u6307\u5b9a\u8fd0\u884c\u53c2\u6570"
        }, 
        {
            "location": "/chapter009/#api", 
            "text": "\u5f88\u591a\u65f6\u5019\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u9879\u76ee\u662f\u591a\u4eba\u5f00\u53d1\uff0c\u6240\u4ee5\u6211\u4eec\u7ecf\u5e38\u4f1a\u4e0d\u77e5\u9053\u6211\u4eec\u7684\u4ee3\u7801\u66b4\u9732\u4e86\u54ea\u4e9b API\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5728\u591a\u4eba\u534f\u4f5c\u7684\u9879\u76ee\u4e2d\u662f\u975e\u5e38\u5e38\u89c1\u7684\u95ee\u9898\uff0c\u4f8b\u5982\u6211\u7ecf\u5386\u8fc7\u7684\u4e24\u4e2a\u4f01\u4e1a\uff0c\u5176\u4e2d\u4e00\u5bb6\u662f\u4e16\u754c500\u5f3a\u7684 IT \u4f01\u4e1a\uff0c\u90fd\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u4ed6\u4eec\u7684\u89e3\u51b3\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u4e00\u4efd Excel \u7ba1\u7406\u66b4\u9732\u7684\u63a5\u53e3\uff0c\u800c\u8fd9\u4e9b\u63a5\u53e3\u90fd\u7531\u5404\u4e2a\u6a21\u5757\u7684\u8d1f\u8d23\u4eba\u81ea\u5df1\u586b\u5199\uff0c\u5f53\u7136\uff0c\u540e\u9762\u6211\u5f00\u53d1\u4e86\u4e00\u4e2a\u7edf\u4e00\u7ba1\u7406\u7cfb\u7edf\u5bf9 API \u8fdb\u884c\u7ba1\u7406\uff0c\u4f46\u6bd5\u7adf\u5728\u5927\u7684\u4f01\u4e1a\u4e2d\uff0c\u5f88\u96be\u534f\u8c03\u597d\u6240\u6709\u7684\u90e8\u95e8\u548c\u4ea7\u54c1\uff0c\u6240\u4ee5\u8fd8\u662f\u5f88\u96be\u6709\u5168\u5c40\u7684\u89c6\u89d2\u3002  \u4f46\u662f\uff0c\u5728 Flask \u4e2d\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u62c5\u5fc3\u6709\u8fd9\u79cd\u95ee\u9898\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u7684 Flask-Script \u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u547d\u4ee4\u53ef\u4ee5\u5feb\u901f\u5f97\u5e2e\u52a9\u6211\u4eec\u5217\u4e3e\u51fa\u6211\u4eec\u7684\u516c\u5f00\u63a5\u53e3\uff0c\u4f7f\u7528\u4e0a\u4e5f\u5f88\u7b80\u5355\uff0c\u76f4\u63a5\u8fd9\u6837\u5199\u5373\u53ef\uff1a  from flask_script.commands import ShowUrls\n\nmanager.add_command(\"showurls\", ShowUrls())  \u7136\u540e\uff0c\u6211\u4eec\u5728\u63a7\u5236\u53f0\u4e0a\u6572\u4ee5\u4e0b\u547d\u4ee4\uff1a  python manage.py showurls  \u4f60\u5f88\u60ca\u559c\u5f97\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u8f93\u51fa\uff1a  Rule                     Endpoint\n---------------------------------------\n/login                   user.login\n/logout                  user.logout\n/static/ path:filename   static\n/user_info               user.user_info  \u5b83\u5c06\u6211\u4eec\u6240\u6709\u7684\u516c\u5f00\u63a5\u53e3\u90fd\u6253\u5370\u51fa\u6765\u4e86\uff0c\u4f46\u662f\uff0c\u53ef\u80fd\u4f60\u4e5f\u53d1\u73b0\u4e86\uff0c\u4e0d\u5b8c\u5584\u7684\u5730\u65b9\u5c31\u662f\u8fd9\u91cc\u53ea\u7ed9\u51fa\u4e86 URI\uff0c\u5e76\u6ca1\u6709\u7ed9\u51fa\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982 GET\u3001POST \u7b49\u3002\u8fd9\u662f\u6709\u5f85\u63d0\u9ad8\u7684\u5730\u65b9\u3002", 
            "title": "\u67e5\u770b\u6240\u6709\u66b4\u9732\u7684 API"
        }, 
        {
            "location": "/chapter009/#_3", 
            "text": "\u672c\u7ae0\u4ecb\u7ecd\u4e86 Flask-Script \u8fd9\u4e00\u6269\u5c55\u7684\u4f7f\u7528\uff0c\u5e76\u4e14\u4ecb\u7ecd\u4e86\u4e24\u4e2a\u7528\u6cd5\uff0c\u5206\u522b\u662f\u4f7f\u7528\u6307\u5b9a\u53c2\u6570\u542f\u52a8\u5e94\u7528\u4ee5\u53ca\u67e5\u770b\u6240\u6709\u66b4\u9732\u51fa\u6765\u7684 API URI\uff0c\u4f46\u662f\u4e5f\u8bb8\u4f60\u4f1a\u6709\u4e00\u4e9b\u65b0\u7684\u60f3\u6cd5\uff0c\u4f46\u662f Flask-Script \u5e76\u6ca1\u6709\u63d0\u4f9b\u7ed9\u4f60\uff0c\u6ca1\u5173\u7cfb\uff0cFlask \u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u6269\u5c55\u53cb\u597d\u7684\u6846\u67b6\uff0c\u4f60\u6709\u4efb\u4f55\u60f3\u6cd5\u90fd\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u6765\u5b9e\u73b0\uff0c\u66f4\u591a\u7684\u8be6\u60c5\u8bfb\u8005\u53ef\u4ee5\u53c2\u8003 Flask-Script\u5b98\u65b9\u6587\u6863 \u6765\u5b9e\u73b0\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/chapter010/", 
            "text": "\u4f7f\u7528 Flask-Admin \u7ba1\u7406\u6570\u636e\u5e93\u6570\u636e\n\n\n\u6211\u4eec\u56de\u8fc7\u5934\u6765\u770b\u770b\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u7684 REST API\uff0c\u53d1\u73b0\u597d\u50cf\u73b0\u5728\u90fd\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u6761 User \u8bb0\u5f55\u4e86\uff0c\u751a\u81f3\u4e8e\u8fde\u83b7\u53d6\u6240\u6709 User \u8bb0\u5f55\u7684 API \u90fd\u6ca1\u63d0\u4f9b\uff0c\u66f4\u522b\u8bf4\u968f\u4fbf\u67e5\u770b\u7528\u6237\u7684\u8bb0\u5f55\u4e86\u3002\u9762\u5bf9\u8fd9\u4e2a\u56f0\u5883\uff0c Flask \u7684\u6269\u5c55\u662f\u5426\u8fd8\u80fd\u7ed9\u6211\u4eec\u66f4\u591a\u7684\u60ca\u559c\u5462\uff1f\u7b54\u6848\u80af\u5b9a\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\u8fd9\u4e00\u7ae0\u8282\uff0c\u6211\u5c06\u5e26\u8bfb\u8005\u8ba4\u8bc6\u4e00\u4e2a Flask \u4e2d\u7684\u7ba1\u7406\u6269\u5c55 \u2014\u2014 Flask-Admin\u3002\n\n\n\u4f7f\u7528 Flask-Admin\uff0c\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u5feb\u6377\u5f97\u7ba1\u7406\u6211\u4eec\u7684 Model \u6570\u636e\uff0c\u8ba9\u6211\u4eec\u80fd\u591f\u7701\u53bb\u4e00\u5927\u5806\u5f00\u53d1\u7ba1\u7406\u7cfb\u7edf\u7684\u65f6\u95f4\uff0c\u800c\u66f4\u591a\u5f97\u5c06\u7cbe\u529b\u653e\u5230\u68b3\u7406\u4e1a\u52a1\u903b\u8f91\u4e4b\u4e0a\uff0c\u4e0b\u9762\u5c31\u5f00\u59cb\u8bb2\u89e3\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 Flask-Admin\u3002\n\n\n\u5b89\u88c5 Flask-Admin\n\n\n\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\uff0c\u8fd8\u662f\u76f4\u63a5\u4f7f\u7528 pip \u5b89\u88c5\uff1a\n\n\npip install Flask-Admin==1.4.0\n\n\n\n\u5c31\u76f4\u63a5\u5b89\u88c5\u4e0a\u4e86 Flask-Admin \u6269\u5c55\uff0c\u7136\u540e\u7b49\u5f85\u540e\u7eed\u4f7f\u7528\n\n\n\u521d\u59cb\u5316 Flsak-Admin\n\n\n\u548c\u5176\u4ed6\u5e38\u89c1\u6269\u5c55\u4e00\u822c\uff0cFlask-Admin \u8fd8\u662f\u9700\u8981\u548c\u6211\u4eec\u7684 app \u670d\u52a1\u5668\u7ed1\u5b9a\uff0c\u6240\u4ee5\u8fd8\u662f\u8001\u5957\u8def\uff0c\u4f46\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u89c4\u8303\u5316\u4e86\u6211\u4eec\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u521b\u5efa Flask-Admin \u5bf9\u8c61\u8981\u653e\u5728 application/extensions.py \u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u5728\u6211\u4eec\u7684 application/extensions.py \u4e2d\u5df2\u7ecf\u5199\u5165\u4ee5\u4e0b\u8bed\u53e5\uff1a\n\n\nfrom flask.ext.admin import Admin\nadmin = Admin()\n\n\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u8981\u548c\u6211\u4eec\u7684 Flask \u670d\u52a1\u5668\u8fdb\u884c\u7ed1\u5b9a\u4e86\uff0c\u8fd8\u662f\u8001\u5957\u8def\uff0c\u4e0d\u8fc7\u8fd8\u662f\u56e0\u4e3a\u89c4\u8303\u5316\u7684\u539f\u56e0\uff0c\u6211\u4eec\u7684\u7ed1\u5b9a\u9700\u8981\u653e\u5230 \napplication/__init__.py\n \u4e2d\u6267\u884c\uff0c\u90a3\u5c31\u9700\u8981\u5728  \napplication/__init__.py\n \u6587\u4ef6\u4e2d\u7684 register_extensions \u51fd\u6570\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u8bed\u53e5\uff1a\n\n\nfrom application.extensions import admin\n\nadmin.init_app(app)\n\n\n\n\u7136\u540e\u5c31\u7b97\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8fd0\u884c\u670d\u52a1\u5668\u8bd5\u8bd5\uff0c\u6b64\u65f6\u6211\u4eec\u8fd0\u884c\u670d\u52a1\u5668\u662f\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u4e86\uff1a\n\n\npython manage.py runserver\n\n\n\n\u521d\u89c1 Flask-Admin\n\n\n\u5f53\u6211\u4eec\u670d\u52a1\u5668\u8dd1\u8d77\u6765\u4e4b\u540e\uff0c\u6211\u4eec\u8981\u60f3\u770b\u5230\u7ba1\u7406\u754c\u9762\uff0c\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165URL\uff1a\n\n\nhttp://localhost:5000/admin\n\n\n\n\u4f60\u5c31\u80fd\u770b\u5230\u6700\u7b80\u5355\u7684\u7ba1\u7406\u540e\u53f0\u4e86\uff0c\u4f46\u662f\uff01\uff01\u8fd9\u91cc\u9762\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a\n\n\n\n\n\u770b\u6765\u7b2c\u4e00\u5370\u8c61\u4e0d\u662f\u5f88\u597d\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u8981\u600e\u6837\u624d\u80fd\u770b\u5230\u4e1c\u897f\uff1f\u5176\u5b9e\u4e5f\u4e0d\u590d\u6742\uff0c\u65e2\u7136\u6ca1\u6709\u6570\u636e\uff0c\u90a3\u6211\u4eec\u5c31\u5c06\u6211\u4eec\u7684\u6570\u636e Model \u52a0\u8fdb\u53bb\uff0c\u600e\u4e48\u52a0\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u540c\u6837\u8fd8\u662f\u5728 application/\ninit\n.py \u4e2d\uff1a\n\n\nfrom flask_admin.contrib.mongoengine import ModelView\n\nfrom application.models import User, Role\n\ndef register_extensions(app):\n    admin.init_app(app)\n    admin.add_view(ModelView(User))\n    admin.add_view(ModelView(Role))\n\n\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd8\u662f\u90a3\u6837\uff0c\u91cd\u542f\u4e00\u4e0b\u6211\u4eec\u7684\u670d\u52a1\u5668\u518d\u8bbf\u95ee\uff1a\n\n\nhttp://localhost:5000/admin\n\n\n\n\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u6709\u4e24\u4e2a Model \u4e86\uff1a\n\n\n\n\n\u64cd\u4f5c Flask-Admin\n\n\n\u5728\u540e\u53f0\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u9009\u9879\uff0c\u4f8b\u5982List\u3001Create\u3001With select\uff0c\u7136\u540e\u8fd9\u4e9b\u9009\u9879\u4e0b\u9762\u662f\u4e00\u4e2a\u8868\u683c\uff0c\u4e5f\u8bb8\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u8868\u683c\u662f\u7a7a\u7684\uff0c\u90a3\u662f\u56e0\u4e3a\u4f60\u7684\u6570\u636e\u5e93\u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u6240\u4ee5\u662f\u7a7a\u7684\u5f88\u81ea\u7136\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u600e\u4e48\u6dfb\u52a0\u6570\u636e\u5462\uff1f\u8bd5\u8bd5\u70b9\u4e00\u4e0b \u201cCreate\u201d \u770b\u4e0b\uff1a\n\n\n\n\n\u770b\u5230\u7684\u662f\u8fd9\u4e2a\uff0c\u6211\u4eec\u586b\u5145\u5b8c\u5404\u4e2a\u5b57\u6bb5\u4e4b\u540e\uff0c\u70b9\u63d0\u4ea4\u5c31\u80fd\u770b\u5230\u8868\u683c\u4e2d\u6709\u6570\u636e\u4e86\u3002\n\n\n\n\n\u603b\u7ed3\n\n\n\u672c\u7ae0\u5f88\u7b80\u7ea6\u5f97\u4ecb\u7ecd\u4e86 Flask \u4e2d\u7684\u7ba1\u7406\u6269\u5c55 Flask-Admin\uff0c\u5e76\u4e14\u6f14\u793a\u4e86\u5982\u4f55\u6dfb\u52a0\u7ba1\u7406\u6211\u4eec\u7684 Model \u6570\u636e\uff0c\u5e76\u4e14\u7b80\u5355\u5f97\u4ecb\u7ecd\u4e86\u4e00\u4e0b\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u8fd9\u4e9b\u90fd\u53ea\u662f\u76ae\u6bdb\uff0c\u5982\u679c\u8bfb\u8005\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u9605\u8bfb\u6211\u7684\u6587\u7ae0\n\u300aFlask-Admin\u300b\n\u4e86\u89e3\u66f4\u591a\u77e5\u8bc6\uff0c\u4e5f\u53ef\u4ee5\u67e5\u770b Flask-Admin \u7684\n\u5b98\u65b9\u6587\u6863\n\u5b66\u4e60\u5173\u4e8e Flask-Admin \u7684\u5185\u5bb9\u3002", 
            "title": "\u7ba1\u7406\u6570\u636e\u5e93\u6570\u636e"
        }, 
        {
            "location": "/chapter010/#flask-admin", 
            "text": "\u6211\u4eec\u56de\u8fc7\u5934\u6765\u770b\u770b\u6211\u4eec\u5230\u76ee\u524d\u4e3a\u6b62\u7684 REST API\uff0c\u53d1\u73b0\u597d\u50cf\u73b0\u5728\u90fd\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u6761 User \u8bb0\u5f55\u4e86\uff0c\u751a\u81f3\u4e8e\u8fde\u83b7\u53d6\u6240\u6709 User \u8bb0\u5f55\u7684 API \u90fd\u6ca1\u63d0\u4f9b\uff0c\u66f4\u522b\u8bf4\u968f\u4fbf\u67e5\u770b\u7528\u6237\u7684\u8bb0\u5f55\u4e86\u3002\u9762\u5bf9\u8fd9\u4e2a\u56f0\u5883\uff0c Flask \u7684\u6269\u5c55\u662f\u5426\u8fd8\u80fd\u7ed9\u6211\u4eec\u66f4\u591a\u7684\u60ca\u559c\u5462\uff1f\u7b54\u6848\u80af\u5b9a\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\u8fd9\u4e00\u7ae0\u8282\uff0c\u6211\u5c06\u5e26\u8bfb\u8005\u8ba4\u8bc6\u4e00\u4e2a Flask \u4e2d\u7684\u7ba1\u7406\u6269\u5c55 \u2014\u2014 Flask-Admin\u3002  \u4f7f\u7528 Flask-Admin\uff0c\u6211\u4eec\u53ef\u4ee5\u65b9\u4fbf\u5feb\u6377\u5f97\u7ba1\u7406\u6211\u4eec\u7684 Model \u6570\u636e\uff0c\u8ba9\u6211\u4eec\u80fd\u591f\u7701\u53bb\u4e00\u5927\u5806\u5f00\u53d1\u7ba1\u7406\u7cfb\u7edf\u7684\u65f6\u95f4\uff0c\u800c\u66f4\u591a\u5f97\u5c06\u7cbe\u529b\u653e\u5230\u68b3\u7406\u4e1a\u52a1\u903b\u8f91\u4e4b\u4e0a\uff0c\u4e0b\u9762\u5c31\u5f00\u59cb\u8bb2\u89e3\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 Flask-Admin\u3002", 
            "title": "\u4f7f\u7528 Flask-Admin \u7ba1\u7406\u6570\u636e\u5e93\u6570\u636e"
        }, 
        {
            "location": "/chapter010/#flask-admin_1", 
            "text": "\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\uff0c\u8fd8\u662f\u76f4\u63a5\u4f7f\u7528 pip \u5b89\u88c5\uff1a  pip install Flask-Admin==1.4.0  \u5c31\u76f4\u63a5\u5b89\u88c5\u4e0a\u4e86 Flask-Admin \u6269\u5c55\uff0c\u7136\u540e\u7b49\u5f85\u540e\u7eed\u4f7f\u7528", 
            "title": "\u5b89\u88c5 Flask-Admin"
        }, 
        {
            "location": "/chapter010/#flsak-admin", 
            "text": "\u548c\u5176\u4ed6\u5e38\u89c1\u6269\u5c55\u4e00\u822c\uff0cFlask-Admin \u8fd8\u662f\u9700\u8981\u548c\u6211\u4eec\u7684 app \u670d\u52a1\u5668\u7ed1\u5b9a\uff0c\u6240\u4ee5\u8fd8\u662f\u8001\u5957\u8def\uff0c\u4f46\u662f\uff0c\u56e0\u4e3a\u6211\u4eec\u89c4\u8303\u5316\u4e86\u6211\u4eec\u7684\u76ee\u5f55\u7ed3\u6784\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u521b\u5efa Flask-Admin \u5bf9\u8c61\u8981\u653e\u5728 application/extensions.py \u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u5728\u6211\u4eec\u7684 application/extensions.py \u4e2d\u5df2\u7ecf\u5199\u5165\u4ee5\u4e0b\u8bed\u53e5\uff1a  from flask.ext.admin import Admin\nadmin = Admin()  \u63a5\u4e0b\u6765\u5c31\u662f\u8981\u548c\u6211\u4eec\u7684 Flask \u670d\u52a1\u5668\u8fdb\u884c\u7ed1\u5b9a\u4e86\uff0c\u8fd8\u662f\u8001\u5957\u8def\uff0c\u4e0d\u8fc7\u8fd8\u662f\u56e0\u4e3a\u89c4\u8303\u5316\u7684\u539f\u56e0\uff0c\u6211\u4eec\u7684\u7ed1\u5b9a\u9700\u8981\u653e\u5230  application/__init__.py  \u4e2d\u6267\u884c\uff0c\u90a3\u5c31\u9700\u8981\u5728   application/__init__.py  \u6587\u4ef6\u4e2d\u7684 register_extensions \u51fd\u6570\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u8bed\u53e5\uff1a  from application.extensions import admin\n\nadmin.init_app(app)  \u7136\u540e\u5c31\u7b97\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8fd0\u884c\u670d\u52a1\u5668\u8bd5\u8bd5\uff0c\u6b64\u65f6\u6211\u4eec\u8fd0\u884c\u670d\u52a1\u5668\u662f\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u4e86\uff1a  python manage.py runserver", 
            "title": "\u521d\u59cb\u5316 Flsak-Admin"
        }, 
        {
            "location": "/chapter010/#flask-admin_2", 
            "text": "\u5f53\u6211\u4eec\u670d\u52a1\u5668\u8dd1\u8d77\u6765\u4e4b\u540e\uff0c\u6211\u4eec\u8981\u60f3\u770b\u5230\u7ba1\u7406\u754c\u9762\uff0c\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165URL\uff1a  http://localhost:5000/admin  \u4f60\u5c31\u80fd\u770b\u5230\u6700\u7b80\u5355\u7684\u7ba1\u7406\u540e\u53f0\u4e86\uff0c\u4f46\u662f\uff01\uff01\u8fd9\u91cc\u9762\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a   \u770b\u6765\u7b2c\u4e00\u5370\u8c61\u4e0d\u662f\u5f88\u597d\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u8981\u600e\u6837\u624d\u80fd\u770b\u5230\u4e1c\u897f\uff1f\u5176\u5b9e\u4e5f\u4e0d\u590d\u6742\uff0c\u65e2\u7136\u6ca1\u6709\u6570\u636e\uff0c\u90a3\u6211\u4eec\u5c31\u5c06\u6211\u4eec\u7684\u6570\u636e Model \u52a0\u8fdb\u53bb\uff0c\u600e\u4e48\u52a0\uff0c\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u540c\u6837\u8fd8\u662f\u5728 application/ init .py \u4e2d\uff1a  from flask_admin.contrib.mongoengine import ModelView\n\nfrom application.models import User, Role\n\ndef register_extensions(app):\n    admin.init_app(app)\n    admin.add_view(ModelView(User))\n    admin.add_view(ModelView(Role))  \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e86\uff0c\u8fd8\u662f\u90a3\u6837\uff0c\u91cd\u542f\u4e00\u4e0b\u6211\u4eec\u7684\u670d\u52a1\u5668\u518d\u8bbf\u95ee\uff1a  http://localhost:5000/admin  \u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u6709\u4e24\u4e2a Model \u4e86\uff1a", 
            "title": "\u521d\u89c1 Flask-Admin"
        }, 
        {
            "location": "/chapter010/#flask-admin_3", 
            "text": "\u5728\u540e\u53f0\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u9009\u9879\uff0c\u4f8b\u5982List\u3001Create\u3001With select\uff0c\u7136\u540e\u8fd9\u4e9b\u9009\u9879\u4e0b\u9762\u662f\u4e00\u4e2a\u8868\u683c\uff0c\u4e5f\u8bb8\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u8868\u683c\u662f\u7a7a\u7684\uff0c\u90a3\u662f\u56e0\u4e3a\u4f60\u7684\u6570\u636e\u5e93\u4e2d\u6ca1\u6709\u6570\u636e\uff0c\u6240\u4ee5\u662f\u7a7a\u7684\u5f88\u81ea\u7136\uff0c\u90a3\u4e48\u6211\u4eec\u8981\u600e\u4e48\u6dfb\u52a0\u6570\u636e\u5462\uff1f\u8bd5\u8bd5\u70b9\u4e00\u4e0b \u201cCreate\u201d \u770b\u4e0b\uff1a   \u770b\u5230\u7684\u662f\u8fd9\u4e2a\uff0c\u6211\u4eec\u586b\u5145\u5b8c\u5404\u4e2a\u5b57\u6bb5\u4e4b\u540e\uff0c\u70b9\u63d0\u4ea4\u5c31\u80fd\u770b\u5230\u8868\u683c\u4e2d\u6709\u6570\u636e\u4e86\u3002", 
            "title": "\u64cd\u4f5c Flask-Admin"
        }, 
        {
            "location": "/chapter010/#_1", 
            "text": "\u672c\u7ae0\u5f88\u7b80\u7ea6\u5f97\u4ecb\u7ecd\u4e86 Flask \u4e2d\u7684\u7ba1\u7406\u6269\u5c55 Flask-Admin\uff0c\u5e76\u4e14\u6f14\u793a\u4e86\u5982\u4f55\u6dfb\u52a0\u7ba1\u7406\u6211\u4eec\u7684 Model \u6570\u636e\uff0c\u5e76\u4e14\u7b80\u5355\u5f97\u4ecb\u7ecd\u4e86\u4e00\u4e0b\u652f\u6301\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u8fd9\u4e9b\u90fd\u53ea\u662f\u76ae\u6bdb\uff0c\u5982\u679c\u8bfb\u8005\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u9605\u8bfb\u6211\u7684\u6587\u7ae0 \u300aFlask-Admin\u300b \u4e86\u89e3\u66f4\u591a\u77e5\u8bc6\uff0c\u4e5f\u53ef\u4ee5\u67e5\u770b Flask-Admin \u7684 \u5b98\u65b9\u6587\u6863 \u5b66\u4e60\u5173\u4e8e Flask-Admin \u7684\u5185\u5bb9\u3002", 
            "title": "\u603b\u7ed3"
        }, 
        {
            "location": "/part003/", 
            "text": "\u7b2c\u4e09\u90e8\u5206\n\n\nFlask \u9879\u76ee\u5b9e\u6218\n\n\n\n\nTODO\n\n\nTODO\n\n\nTODO\n\n\nTODO", 
            "title": "\u7b2c\u4e09\u90e8\u5206"
        }, 
        {
            "location": "/part003/#_1", 
            "text": "Flask \u9879\u76ee\u5b9e\u6218   TODO  TODO  TODO  TODO", 
            "title": "\u7b2c\u4e09\u90e8\u5206"
        }, 
        {
            "location": "/chapter011/", 
            "text": "\u7f16\u5199 TODO \u5e94\u7528\u3010part001\u3011\n\n\n\u672c\u4e66\u524d\u9762\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u5bf9 Flask \u7684\u57fa\u672c\u77e5\u8bc6\u3001\u7528\u6cd5\u4ee5\u53ca\u4ecb\u7ecd\u4e86\u591a\u79cd\u6269\u5c55\u4ee5\u53ca\u6269\u5c55\u7684\u901a\u7528\u4f7f\u7528\u65b9\u5f0f\uff0c\u4f7f\u7528\u6269\u5c55\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u7ec6\u8282\u8fdb\u884c\u4e86\u8bb2\u89e3\u3002\u867d\u7136\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a REST API \u5c0f\u4f8b\u5b50\u63cf\u8ff0\uff0c\u4f46\u662f\uff0c\u6bd5\u7adf\u662f\u4f5c\u4e3a\u5404\u4e2a\u6269\u5c55\u4f7f\u7528\u8bb2\u89e3\u800c\u7f16\u6392\u5728\u4e00\u5757\uff0c\u6240\u4ee5\u7f3a\u4e4f\u7cfb\u7edf\u6027\uff0c\u5168\u5c40\u6027\u3002\n\n\n\u4ece\u672c\u7ae0\u5f00\u59cb\uff0c\u6211\u5c06\u4f7f\u7528 Flask \u56f4\u7ed5\u4e00\u4e2a TODO \u5e94\u7528\u63d0\u4f9b REST API \u8fdb\u884c\u8bb2\u89e3\uff0c\u8ba9\u5927\u5bb6\u6709\u4e2a\u5bf9 Flask \u5e94\u7528\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u8ba4\u8bc6\u3002\n\n\nTODO \u5e94\u7528\u8bb2\u89e3\n\n\n\u6211\u4eec\u9700\u8981\u7f16\u5199\u7684 TODO \u5e94\u7528\u4e3b\u8981\u529f\u80fd\u6709\uff1a\n\n\n\n\n\u53ef\u4ee5\u67e5\u8be2\u6240\u6709\u5f85\u529e\u4e8b\u9879\n\n\n\u53ef\u4ee5\u67e5\u770b\u6307\u5b9a\u5f85\u529e\u4e8b\u9879\u7684\u8be6\u60c5\n\n\n\u53ef\u4ee5\u589e\u52a0\u4e00\u9879\u5f85\u529e\u4e8b\u9879\n\n\n\u53ef\u4ee5\u5220\u9664\u4e00\u9879\u5f85\u529e\u4e8b\u9879\n\n\n\u53ef\u4ee5\u4fee\u6539\u4e00\u9879\u5f85\u529e\u4e8b\u9879\uff0c\u5305\u62ec\u5f85\u529e\u5185\u5bb9\uff0c\u6dfb\u52a0\u6807\u8bb0\n\n\n\u5b8c\u6210\u5f85\u529e\u4e8b\u9879\u540e\u53ef\u4ee5\u6807\u8bb0\u4e3a\u5b8c\u6210\n\n\n\n\n\u8fd9\u4e9b\u5c31\u662f\u6211\u4eec\u5e94\u7528\u7684\u7b80\u7565\u9700\u6c42\uff0c\u7136\u540e\u518d\u8bb2\u4e00\u4e0b\u6211\u4eec\u7684\u9879\u76ee\u7ed3\u6784\uff0c\u6839\u636e\u524d\u9762\u7ae0\u8282\n\u300a\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\u300b\n\u4e2d\u8bb2\u89e3\u7684\uff0c\u6211\u4eec\u5c06\u9879\u76ee\u7ed3\u6784\u8bbe\u8ba1\u6210\u5982\u4e0b\uff1a\n\n\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 application\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 auth.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 todo.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 user.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 extensions.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 models\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 todo.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 user.py\n\u251c\u2500\u2500 commands.py\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development_sample.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production_sample.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testing.py\n\u251c\u2500\u2500 deploy\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 flask_env.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gunicorn.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisor.conf\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 pylintrc\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 wsgi.py\n\n\n\n\u8bbe\u8ba1 Models\n\n\nModel \u7684\u8bdd\u4e3b\u8981\u8bbe\u8ba1\u4e24\u4e2a\u4e3b\u8981\u7684\u6a21\u578b\uff0c\u5206\u522b\u662f User \u548c Item\u3002User \u8868\u793a\u7528\u6237\u7684\u4fe1\u606f\uff0c\u9664\u4e86\u8868\u793aTODO \u6240\u5c5e\u4eba\u4e4b\u5916\uff0c\u8fd8\u6709\u767b\u5f55\u7684\u7528\u5904\uff0c\u800c Item \u5219\u662f\u5f85\u529e\u4e8b\u9879\u4e86\uff0c\u5177\u4f53\u8bbe\u8ba1\u9700\u8981\u53c2\u8003\u9700\u6c42\u800c\u5b9a\uff0c\u5173\u4e8e Model \u7684\u5177\u4f53\u8bbe\u8ba1\u8fc7\u7a0b\u4e0d\u662f\u672c\u7ae0\u8ba8\u8bba\u7684\u91cd\u70b9\uff0c\u6240\u4ee5\u76f4\u63a5\u7ed9\u51fa Models\uff1a\n\n\napplication/models/\ninit\n.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom user import *\nfrom todo import *\n\n\ndef all():\n    result = []\n    models = [user, todo]\n\n    for m in models:\n        result += m.__all__\n\n    return result\n\n__all__ = all()\n\n\n\napplication/models/user.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom application.extensions import db\n\n__all__ = ['Role', 'User']\n\n\nclass Permission:\n    READ = 0x01\n    CREATE = 0x02\n    UPDATE = 0x04\n    DELETE = 0x08\n    DEFAULT = READ\n\n\nclass Role(db.Document):\n    name = db.StringField()\n    permission = db.IntField()\n\n\nclass User(db.Document):\n    name = db.StringField()\n    password = db.StringField()\n    email = db.StringField()\n    role = db.ReferenceField('Role')\n\n    def to_json(self):\n        return {\"name\": self.name,\n                \"email\": self.email,\n                \"role\": self.role.name}\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):\n        return True\n\n    def is_anonymous(self):\n        return False\n\n    def get_id(self):\n        return str(self.id)\n\n\n\napplication/models/todo.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom application.extensions import db\n\n__all__ = ['Item']\n\n\nclass Item(db.Document):\n    content = db.StringField(required=True)\n    created_date = db.DateTimeField()\n    completed = db.BooleanField(default=False)\n    completed_date = db.DateTimeField()\n    created_by = db.ReferenceField('User', required=True)\n    notes = db.ListField(db.StringField())\n    priority = db.IntField()\n\n    def __repr__(self):\n        return \"\nItem: {} Content: {}\n\".format(str(self.id),\n                                               self.content)\n\n    def to_json(self):\n        return {\n            'id': str(self.id),\n            'content': self.content,\n            'completed': self.completed,\n            'completed_at': self.completed_date.strftime(\"%Y-%m-%d %H:%M:%S\") if self.completed else \"\",\n            'created_by': self.created_by.name,\n            'notes': self.notes,\n            'priority': self.priority\n        }\n\n\n\n\u8bbe\u8ba1 views\n\n\n\u6839\u636e\u6211\u4eec\u5728\u524d\u9762\u7ae0\u8282\u6240\u5b66\u4e60\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u8fd9\u4e2a\u5e94\u7528\u7684 views \u5c31\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528 \napp.route\n \u6765\u7ed1\u5b9a URL \u4e86\uff0c\u800c\u662f\u4f7f\u7528 Blueprint \u6765\u8bbe\u8ba1\uff0c\u5177\u4f53\u8bbe\u8ba1\u5982\u4e0b\uff1a\n\n\napplication/controller/\ninit\n.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport auth\nimport user\nimport todo\n\nall_bp = [\n    auth.auth_bp,\n    user.user_bp,\n    todo.todo_bp\n]\n\n\n\napplication/controller/auth.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport json\n\nfrom flask import Blueprint, request, jsonify\nfrom flask.ext.login import login_user, logout_user\n\nimport application.models as Models\n\n\nauth_bp = Blueprint('auth', __name__, url_prefix='/auth')\n\n\n@auth_bp.route('/login', methods=['POST'])\ndef login():\n    info = json.loads(request.data)\n    username = info.get('username', 'guest')\n    password = info.get('password', '')\n\n    user = Models.User.objects(name=username,\n                               password=password).first()\n    if user:\n        login_user(user)\n        return jsonify(user.to_json())\n    else:\n        return jsonify({\"status\": 401,\n                        \"reason\": \"Username or Password Error\"})\n\n\n@auth_bp.route('/logout', methods=['POST'])\ndef logout():\n    logout_user()\n    return jsonify(**{'result': 200,\n                      'data': {'message': 'logout success'}})\n\n\n\napplication/controller/user.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom flask.ext.login import current_user\nfrom flask import Blueprint, jsonify\n\n\nuser_bp = Blueprint('users', __name__, url_prefix='')\n\n\n@user_bp.route('/user_info', methods=['POST'])\ndef user_info():\n    if current_user.is_authenticated:\n        resp = {\"result\": 200,\n                \"data\": current_user.to_json()}\n    else:\n        resp = {\"result\": 401,\n                \"data\": {\"message\": \"user no login\"}}\n    return jsonify(**resp)\n\n\n\napplication/controller/todo.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom datetime import datetime\n\nfrom flask import Blueprint, request, jsonify\nfrom flask.ext.login import current_user, login_required\n\nimport application.models as Models\n\n\ntodo_bp = Blueprint('todos', __name__, url_prefix='/todo')\n\n\n@todo_bp.route('/item', methods=['POST'])\n@login_required\ndef create_todo_item():\n    data = json.loads(request.data)\n    content = data.get('content')\n    note = data.get('note', None)\n    priority = data.get('priority', 0)\n\n    if not content:\n        return jsonify({\n            'data': {},\n            'msg': 'no content',\n            'code': 1001,\n            'extra': {}})\n\n    item = Models.Item(content=content, created_date=datetime.now(),\n                       completed=False, created_by=current_user.id,\n                       notes=[note] if note else [],\n                       priority=priority)\n    item.save()\n    return jsonify({\n        'data': item.to_json(),\n        'msg': 'create item success',\n        'code': 1000,\n        'extra': {}\n    })\n\n\n@todo_bp.route('/item', methods=['DELETE'])\n@login_required\ndef delete_todo_item():\n    data = json.loads(request.data)\n    id = data.get('id')\n\n    if not id:\n        return jsonify({\n            'data': {},\n            'msg': 'no id',\n            'code': 2001,\n            'extra': {}})\n\n    item = Models.Item.objects(id=id).first()\n    item.delete()\n    return jsonify({\n        'data': item.to_json(),\n        'msg': 'delete item success',\n        'code': 2000,\n        'extra': {}\n    })\n\n\n@todo_bp.route('/item', methods=['PUT'])\n@login_required\ndef update_todo_item():\n    data = json.loads(request.data)\n    id = data.get('id')\n    type = data.get('type')\n\n    if type == \"update_content\":\n        content = data.get('content')\n        Models.Item.objects(id=id).first().update(content=content)\n    elif type == \"insert_notes\":\n        note = data.get('note')\n        Models.Item.objects(id=id).first().update(push__notes=note)\n    elif type == \"done\":\n        Models.Item.objects(id=id).first().update(completed=True,\n                                                  completed_date=datetime.now())\n    return jsonify({\n        'data': {'oper': type,\n                 'id': id},\n        'msg': 'oper done',\n        'code': 3000,\n        'extra': {}\n    })\n\n\n@todo_bp.route('/item', methods=['GET'])\n@login_required\ndef get_todo_item():\n    query_string = request.args.get('q')\n    data = json.loads(query_string)\n    id = data.get('id')\n\n    item = Models.Item.objects(id=id).first()\n    return jsonify({\n        'data': item.to_json(),\n        'msg': 'query item success',\n        'code': 4000,\n        'extra': {}\n    })\n\n\n@todo_bp.route('/items', methods=['GET'])\n@login_required\ndef get_todo_items():\n    data = json.loads(request.args.get('q'))\n    page = data.get('page', 1)\n    page_size = data.get('page_size', 10)\n\n    begin = (page - 1) * page_size\n    end = begin + page_size\n    items = Models.Item.objects()[begin: end]\n    rsts = []\n    for item in items:\n        rsts.append(item.to_json())\n\n    return jsonify({\n        'data': rsts,\n        'msg': 'query items success',\n        'code': 5000,\n        'extra': {}\n    })\n\n\n\n\u521d\u59cb\u5316\u6269\u5c55\n\n\n\u6269\u5c55\u6211\u4eec\u662f\u7edf\u4e00\u653e\u5230 application/extensions.py \u91cc\u9762\u8fdb\u884c\u6784\u5efa\u5bf9\u8c61\u7684\uff0c\u6240\u4ee5\u6587\u4ef6\u6709\uff1a\n\n\napplication/extensions.py\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom flask.ext.admin import Admin\nfrom flask.ext.login import LoginManager\nfrom flask.ext.mongoengine import MongoEngine\n\n\ndb = MongoEngine()\nlogin_manager = LoginManager()\nadmin = Admin()\n\n\n\n\u521d\u59cb\u5316\u5e94\u7528\n\n\n#!/usr/bin/env python\n# encoding: utf-8\nimport sys\nimport logging\n\nfrom flask import Flask\nfrom flask_admin.contrib.mongoengine import ModelView\n\nfrom config import load_config\nfrom application.extensions import db, login_manager, admin\nfrom application.models import User, Role\nfrom application.controllers import all_bp\n\n# convert python's encoding to utf8\ntry:\n    reload(sys)\n    sys.setdefaultencoding('utf8')\nexcept (AttributeError, NameError):\n    pass\n\n\ndef create_app(mode):\n    \"\"\"Create Flask app.\"\"\"\n    config = load_config(mode)\n\n    app = Flask(__name__)\n    app.config.from_object(config)\n\n    if not hasattr(app, 'production'):\n        app.production = not app.debug and not app.testing\n\n    if app.debug or app.testing:\n        # Log errors to stderr in production mode\n        app.logger.addHandler(logging.StreamHandler())\n        app.logger.setLevel(logging.ERROR)\n\n    # Register components\n    register_extensions(app)\n    register_blueprint(app)\n\n    return app\n\n\ndef register_extensions(app):\n    \"\"\"Register models.\"\"\"\n    db.init_app(app)\n    login_manager.init_app(app)\n\n    # flask-admin configs\n    admin.init_app(app)\n    admin.add_view(ModelView(User))\n    admin.add_view(ModelView(Role))\n\n    login_manager.login_view = 'auth.login'\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.objects(id=user_id).first()\n\n\ndef register_blueprint(app):\n    for bp in all_bp:\n        app.register_blueprint(bp)", 
            "title": "\u7f16\u5199 TODO \u5e94\u7528\u3010part1\u3011"
        }, 
        {
            "location": "/chapter011/#todo-part001", 
            "text": "\u672c\u4e66\u524d\u9762\u4e24\u4e2a\u90e8\u5206\u5206\u522b\u5bf9 Flask \u7684\u57fa\u672c\u77e5\u8bc6\u3001\u7528\u6cd5\u4ee5\u53ca\u4ecb\u7ecd\u4e86\u591a\u79cd\u6269\u5c55\u4ee5\u53ca\u6269\u5c55\u7684\u901a\u7528\u4f7f\u7528\u65b9\u5f0f\uff0c\u4f7f\u7528\u6269\u5c55\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u7ec6\u8282\u8fdb\u884c\u4e86\u8bb2\u89e3\u3002\u867d\u7136\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a REST API \u5c0f\u4f8b\u5b50\u63cf\u8ff0\uff0c\u4f46\u662f\uff0c\u6bd5\u7adf\u662f\u4f5c\u4e3a\u5404\u4e2a\u6269\u5c55\u4f7f\u7528\u8bb2\u89e3\u800c\u7f16\u6392\u5728\u4e00\u5757\uff0c\u6240\u4ee5\u7f3a\u4e4f\u7cfb\u7edf\u6027\uff0c\u5168\u5c40\u6027\u3002  \u4ece\u672c\u7ae0\u5f00\u59cb\uff0c\u6211\u5c06\u4f7f\u7528 Flask \u56f4\u7ed5\u4e00\u4e2a TODO \u5e94\u7528\u63d0\u4f9b REST API \u8fdb\u884c\u8bb2\u89e3\uff0c\u8ba9\u5927\u5bb6\u6709\u4e2a\u5bf9 Flask \u5e94\u7528\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u8ba4\u8bc6\u3002", 
            "title": "\u7f16\u5199 TODO \u5e94\u7528\u3010part001\u3011"
        }, 
        {
            "location": "/chapter011/#todo", 
            "text": "\u6211\u4eec\u9700\u8981\u7f16\u5199\u7684 TODO \u5e94\u7528\u4e3b\u8981\u529f\u80fd\u6709\uff1a   \u53ef\u4ee5\u67e5\u8be2\u6240\u6709\u5f85\u529e\u4e8b\u9879  \u53ef\u4ee5\u67e5\u770b\u6307\u5b9a\u5f85\u529e\u4e8b\u9879\u7684\u8be6\u60c5  \u53ef\u4ee5\u589e\u52a0\u4e00\u9879\u5f85\u529e\u4e8b\u9879  \u53ef\u4ee5\u5220\u9664\u4e00\u9879\u5f85\u529e\u4e8b\u9879  \u53ef\u4ee5\u4fee\u6539\u4e00\u9879\u5f85\u529e\u4e8b\u9879\uff0c\u5305\u62ec\u5f85\u529e\u5185\u5bb9\uff0c\u6dfb\u52a0\u6807\u8bb0  \u5b8c\u6210\u5f85\u529e\u4e8b\u9879\u540e\u53ef\u4ee5\u6807\u8bb0\u4e3a\u5b8c\u6210   \u8fd9\u4e9b\u5c31\u662f\u6211\u4eec\u5e94\u7528\u7684\u7b80\u7565\u9700\u6c42\uff0c\u7136\u540e\u518d\u8bb2\u4e00\u4e0b\u6211\u4eec\u7684\u9879\u76ee\u7ed3\u6784\uff0c\u6839\u636e\u524d\u9762\u7ae0\u8282 \u300a\u66f4\u597d\u5f97\u7ef4\u62a4\u4ee3\u7801\u300b \u4e2d\u8bb2\u89e3\u7684\uff0c\u6211\u4eec\u5c06\u9879\u76ee\u7ed3\u6784\u8bbe\u8ba1\u6210\u5982\u4e0b\uff1a  .\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 application\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 controllers\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 auth.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 todo.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 user.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 extensions.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 models\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 todo.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 user.py\n\u251c\u2500\u2500 commands.py\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 development_sample.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production_sample.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testing.py\n\u251c\u2500\u2500 deploy\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 flask_env.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gunicorn.conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 supervisor.conf\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 pylintrc\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 wsgi.py", 
            "title": "TODO \u5e94\u7528\u8bb2\u89e3"
        }, 
        {
            "location": "/chapter011/#models", 
            "text": "Model \u7684\u8bdd\u4e3b\u8981\u8bbe\u8ba1\u4e24\u4e2a\u4e3b\u8981\u7684\u6a21\u578b\uff0c\u5206\u522b\u662f User \u548c Item\u3002User \u8868\u793a\u7528\u6237\u7684\u4fe1\u606f\uff0c\u9664\u4e86\u8868\u793aTODO \u6240\u5c5e\u4eba\u4e4b\u5916\uff0c\u8fd8\u6709\u767b\u5f55\u7684\u7528\u5904\uff0c\u800c Item \u5219\u662f\u5f85\u529e\u4e8b\u9879\u4e86\uff0c\u5177\u4f53\u8bbe\u8ba1\u9700\u8981\u53c2\u8003\u9700\u6c42\u800c\u5b9a\uff0c\u5173\u4e8e Model \u7684\u5177\u4f53\u8bbe\u8ba1\u8fc7\u7a0b\u4e0d\u662f\u672c\u7ae0\u8ba8\u8bba\u7684\u91cd\u70b9\uff0c\u6240\u4ee5\u76f4\u63a5\u7ed9\u51fa Models\uff1a  application/models/ init .py  #!/usr/bin/env python\n# encoding: utf-8\nfrom user import *\nfrom todo import *\n\n\ndef all():\n    result = []\n    models = [user, todo]\n\n    for m in models:\n        result += m.__all__\n\n    return result\n\n__all__ = all()  application/models/user.py  #!/usr/bin/env python\n# encoding: utf-8\nfrom application.extensions import db\n\n__all__ = ['Role', 'User']\n\n\nclass Permission:\n    READ = 0x01\n    CREATE = 0x02\n    UPDATE = 0x04\n    DELETE = 0x08\n    DEFAULT = READ\n\n\nclass Role(db.Document):\n    name = db.StringField()\n    permission = db.IntField()\n\n\nclass User(db.Document):\n    name = db.StringField()\n    password = db.StringField()\n    email = db.StringField()\n    role = db.ReferenceField('Role')\n\n    def to_json(self):\n        return {\"name\": self.name,\n                \"email\": self.email,\n                \"role\": self.role.name}\n\n    def is_authenticated(self):\n        return True\n\n    def is_active(self):\n        return True\n\n    def is_anonymous(self):\n        return False\n\n    def get_id(self):\n        return str(self.id)  application/models/todo.py  #!/usr/bin/env python\n# encoding: utf-8\nfrom application.extensions import db\n\n__all__ = ['Item']\n\n\nclass Item(db.Document):\n    content = db.StringField(required=True)\n    created_date = db.DateTimeField()\n    completed = db.BooleanField(default=False)\n    completed_date = db.DateTimeField()\n    created_by = db.ReferenceField('User', required=True)\n    notes = db.ListField(db.StringField())\n    priority = db.IntField()\n\n    def __repr__(self):\n        return \" Item: {} Content: {} \".format(str(self.id),\n                                               self.content)\n\n    def to_json(self):\n        return {\n            'id': str(self.id),\n            'content': self.content,\n            'completed': self.completed,\n            'completed_at': self.completed_date.strftime(\"%Y-%m-%d %H:%M:%S\") if self.completed else \"\",\n            'created_by': self.created_by.name,\n            'notes': self.notes,\n            'priority': self.priority\n        }", 
            "title": "\u8bbe\u8ba1 Models"
        }, 
        {
            "location": "/chapter011/#views", 
            "text": "\u6839\u636e\u6211\u4eec\u5728\u524d\u9762\u7ae0\u8282\u6240\u5b66\u4e60\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u8fd9\u4e2a\u5e94\u7528\u7684 views \u5c31\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528  app.route  \u6765\u7ed1\u5b9a URL \u4e86\uff0c\u800c\u662f\u4f7f\u7528 Blueprint \u6765\u8bbe\u8ba1\uff0c\u5177\u4f53\u8bbe\u8ba1\u5982\u4e0b\uff1a  application/controller/ init .py  #!/usr/bin/env python\n# encoding: utf-8\nimport auth\nimport user\nimport todo\n\nall_bp = [\n    auth.auth_bp,\n    user.user_bp,\n    todo.todo_bp\n]  application/controller/auth.py  #!/usr/bin/env python\n# encoding: utf-8\nimport json\n\nfrom flask import Blueprint, request, jsonify\nfrom flask.ext.login import login_user, logout_user\n\nimport application.models as Models\n\n\nauth_bp = Blueprint('auth', __name__, url_prefix='/auth')\n\n\n@auth_bp.route('/login', methods=['POST'])\ndef login():\n    info = json.loads(request.data)\n    username = info.get('username', 'guest')\n    password = info.get('password', '')\n\n    user = Models.User.objects(name=username,\n                               password=password).first()\n    if user:\n        login_user(user)\n        return jsonify(user.to_json())\n    else:\n        return jsonify({\"status\": 401,\n                        \"reason\": \"Username or Password Error\"})\n\n\n@auth_bp.route('/logout', methods=['POST'])\ndef logout():\n    logout_user()\n    return jsonify(**{'result': 200,\n                      'data': {'message': 'logout success'}})  application/controller/user.py  #!/usr/bin/env python\n# encoding: utf-8\nfrom flask.ext.login import current_user\nfrom flask import Blueprint, jsonify\n\n\nuser_bp = Blueprint('users', __name__, url_prefix='')\n\n\n@user_bp.route('/user_info', methods=['POST'])\ndef user_info():\n    if current_user.is_authenticated:\n        resp = {\"result\": 200,\n                \"data\": current_user.to_json()}\n    else:\n        resp = {\"result\": 401,\n                \"data\": {\"message\": \"user no login\"}}\n    return jsonify(**resp)  application/controller/todo.py  #!/usr/bin/env python\n# encoding: utf-8\nimport json\nfrom datetime import datetime\n\nfrom flask import Blueprint, request, jsonify\nfrom flask.ext.login import current_user, login_required\n\nimport application.models as Models\n\n\ntodo_bp = Blueprint('todos', __name__, url_prefix='/todo')\n\n\n@todo_bp.route('/item', methods=['POST'])\n@login_required\ndef create_todo_item():\n    data = json.loads(request.data)\n    content = data.get('content')\n    note = data.get('note', None)\n    priority = data.get('priority', 0)\n\n    if not content:\n        return jsonify({\n            'data': {},\n            'msg': 'no content',\n            'code': 1001,\n            'extra': {}})\n\n    item = Models.Item(content=content, created_date=datetime.now(),\n                       completed=False, created_by=current_user.id,\n                       notes=[note] if note else [],\n                       priority=priority)\n    item.save()\n    return jsonify({\n        'data': item.to_json(),\n        'msg': 'create item success',\n        'code': 1000,\n        'extra': {}\n    })\n\n\n@todo_bp.route('/item', methods=['DELETE'])\n@login_required\ndef delete_todo_item():\n    data = json.loads(request.data)\n    id = data.get('id')\n\n    if not id:\n        return jsonify({\n            'data': {},\n            'msg': 'no id',\n            'code': 2001,\n            'extra': {}})\n\n    item = Models.Item.objects(id=id).first()\n    item.delete()\n    return jsonify({\n        'data': item.to_json(),\n        'msg': 'delete item success',\n        'code': 2000,\n        'extra': {}\n    })\n\n\n@todo_bp.route('/item', methods=['PUT'])\n@login_required\ndef update_todo_item():\n    data = json.loads(request.data)\n    id = data.get('id')\n    type = data.get('type')\n\n    if type == \"update_content\":\n        content = data.get('content')\n        Models.Item.objects(id=id).first().update(content=content)\n    elif type == \"insert_notes\":\n        note = data.get('note')\n        Models.Item.objects(id=id).first().update(push__notes=note)\n    elif type == \"done\":\n        Models.Item.objects(id=id).first().update(completed=True,\n                                                  completed_date=datetime.now())\n    return jsonify({\n        'data': {'oper': type,\n                 'id': id},\n        'msg': 'oper done',\n        'code': 3000,\n        'extra': {}\n    })\n\n\n@todo_bp.route('/item', methods=['GET'])\n@login_required\ndef get_todo_item():\n    query_string = request.args.get('q')\n    data = json.loads(query_string)\n    id = data.get('id')\n\n    item = Models.Item.objects(id=id).first()\n    return jsonify({\n        'data': item.to_json(),\n        'msg': 'query item success',\n        'code': 4000,\n        'extra': {}\n    })\n\n\n@todo_bp.route('/items', methods=['GET'])\n@login_required\ndef get_todo_items():\n    data = json.loads(request.args.get('q'))\n    page = data.get('page', 1)\n    page_size = data.get('page_size', 10)\n\n    begin = (page - 1) * page_size\n    end = begin + page_size\n    items = Models.Item.objects()[begin: end]\n    rsts = []\n    for item in items:\n        rsts.append(item.to_json())\n\n    return jsonify({\n        'data': rsts,\n        'msg': 'query items success',\n        'code': 5000,\n        'extra': {}\n    })", 
            "title": "\u8bbe\u8ba1 views"
        }, 
        {
            "location": "/chapter011/#_1", 
            "text": "\u6269\u5c55\u6211\u4eec\u662f\u7edf\u4e00\u653e\u5230 application/extensions.py \u91cc\u9762\u8fdb\u884c\u6784\u5efa\u5bf9\u8c61\u7684\uff0c\u6240\u4ee5\u6587\u4ef6\u6709\uff1a  application/extensions.py  #!/usr/bin/env python\n# encoding: utf-8\nfrom flask.ext.admin import Admin\nfrom flask.ext.login import LoginManager\nfrom flask.ext.mongoengine import MongoEngine\n\n\ndb = MongoEngine()\nlogin_manager = LoginManager()\nadmin = Admin()", 
            "title": "\u521d\u59cb\u5316\u6269\u5c55"
        }, 
        {
            "location": "/chapter011/#_2", 
            "text": "#!/usr/bin/env python\n# encoding: utf-8\nimport sys\nimport logging\n\nfrom flask import Flask\nfrom flask_admin.contrib.mongoengine import ModelView\n\nfrom config import load_config\nfrom application.extensions import db, login_manager, admin\nfrom application.models import User, Role\nfrom application.controllers import all_bp\n\n# convert python's encoding to utf8\ntry:\n    reload(sys)\n    sys.setdefaultencoding('utf8')\nexcept (AttributeError, NameError):\n    pass\n\n\ndef create_app(mode):\n    \"\"\"Create Flask app.\"\"\"\n    config = load_config(mode)\n\n    app = Flask(__name__)\n    app.config.from_object(config)\n\n    if not hasattr(app, 'production'):\n        app.production = not app.debug and not app.testing\n\n    if app.debug or app.testing:\n        # Log errors to stderr in production mode\n        app.logger.addHandler(logging.StreamHandler())\n        app.logger.setLevel(logging.ERROR)\n\n    # Register components\n    register_extensions(app)\n    register_blueprint(app)\n\n    return app\n\n\ndef register_extensions(app):\n    \"\"\"Register models.\"\"\"\n    db.init_app(app)\n    login_manager.init_app(app)\n\n    # flask-admin configs\n    admin.init_app(app)\n    admin.add_view(ModelView(User))\n    admin.add_view(ModelView(Role))\n\n    login_manager.login_view = 'auth.login'\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.objects(id=user_id).first()\n\n\ndef register_blueprint(app):\n    for bp in all_bp:\n        app.register_blueprint(bp)", 
            "title": "\u521d\u59cb\u5316\u5e94\u7528"
        }, 
        {
            "location": "/chapter012/", 
            "text": "\u7f16\u5199 TODO \u5e94\u7528\u3010part002\u3011\n\n\n\u8bbe\u7f6e\u914d\u7f6e\n\n\n\u914d\u7f6e\u7684\u8bdd\uff0c\u6211\u4eec\u5168\u653e\u5728 config \u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u6309\u73af\u5883\u5212\u5206\uff0c\u56e0\u4e3a\u53ea\u4f7f\u7528\u5230\u5f00\u53d1\u73af\u5883\uff0c\u6240\u4ee5\u5c31\u53ea\u8bbe\u7f6e\u4e86\u5f00\u53d1\u73af\u5883\u7684\uff1a\n\n\nconfig/\ninit\n.py\n\n\n    # coding: UTF-8\n    import os\n\n\n    def load_config(mode=os.environ.get('MODE')):\n        \"\"\"Load config.\"\"\"\n        try:\n            if mode == 'PRODUCTION':\n                from .production import ProductionConfig\n                return ProductionConfig\n            elif mode == 'TESTING':\n                from .testing import TestingConfig\n                return TestingConfig\n            else:\n                from .development import DevelopmentConfig\n                return DevelopmentConfig\n        except ImportError:\n            from .default import Config\n            return Config\n\nconfig/development.py\n\n    # coding: utf-8\n    import os\n\n\n    class DevelopmentConfig(object):\n        \"\"\"Base config class.\"\"\"\n        # Flask app config\n        DEBUG = False\n        TESTING = False\n        SECRET_KEY = \"sample_key\"\n\n        # Root path of project\n        PROJECT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\n        # Site domain\n        SITE_TITLE = \"twtf\"\n        SITE_DOMAIN = \"http://localhost:8080\"\n\n        # MongoEngine config\n        MONGODB_SETTINGS = {\n            'db': 'the_way_to_flask',\n            'host': '192.168.59.103',\n            'port': 27017\n        }\n\n## \u914d\u7f6e\u8fd0\u884c\u811a\u672c\n\n\u5230\u6b64\uff0c\u6211\u4eec\u7684\u5e94\u7528\u4ee3\u7801\u7b97\u662f\u5199\u5b8c\u4e86\uff0c\u7136\u540e\u5c31\u662f\u8fd0\u884c\u670d\u52a1\u5668\u4e86\uff0c\u8fd8\u662f\u4f7f\u7528 Flask-Script\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u914d\u7f6e manage.py\uff0c\u5185\u5bb9\u4e3a\uff1b\n\nmanage.py\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom flask_script import Manager\nfrom flask_script.commands import ShowUrls\n\nfrom application import create_app\n\nmanager = Manager(create_app)\nmanager.add_option('-c', '--config', dest='mode', required=False)\n\nmanager.add_command(\"showurls\", ShowUrls())\n\nif __name__ == \"__main__\":\n    manager.run()\n\n\n\n\u8fd0\u884c\u670d\u52a1\u5668\n\n\npyhton manage.py -c development runserver\n\n\n\n\u5f53\u4f60\u770b\u5230\u4ee5\u4e0b\u8bed\u53e5\u7684\u65f6\u5019\u8bf4\u660e\u4f60\u7684\u670d\u52a1\u5668\u8fd0\u884c\u6210\u529f\u4e86\uff1a\n\n\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n\n\n\n\u6dfb\u52a0\u7528\u6237\n\n\n\u56e0\u4e3a\u73b0\u5728\u6570\u636e\u5e93\u4e2d\u662f\u6ca1\u6709\u7528\u6237\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u5148\uff0c\u5728\u7ba1\u7406\u540e\u53f0\u53ef\u4ee5\u6dfb\u52a0\uff1a\n\n\nhttp://localhost:5000/admin/user/\n\n\n\n\n\n\n\n\u6d4b\u8bd5\u529f\u80fd\uff1a\n\n\n\u767b\u5f55\uff1a\n\n\nPOST /auth/login HTTP/1.1\nHost: localhost:5000\n\n{\"username\": \"zhangsan\",\n \"password\": \"password\"}\n\n\n\n\u54cd\u5e94\u5e94\u8be5\u662f\uff1a\n\n\n{\n  \"email\": \"zhangsan@gmail.com\",\n  \"name\": \"zhangsan\",\n  \"role\": \"ADMIN\"\n}", 
            "title": "\u7f16\u5199 TODO \u5e94\u7528\u3010part2\u3011"
        }, 
        {
            "location": "/chapter012/#todo-part002", 
            "text": "", 
            "title": "\u7f16\u5199 TODO \u5e94\u7528\u3010part002\u3011"
        }, 
        {
            "location": "/chapter012/#_1", 
            "text": "\u914d\u7f6e\u7684\u8bdd\uff0c\u6211\u4eec\u5168\u653e\u5728 config \u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u6309\u73af\u5883\u5212\u5206\uff0c\u56e0\u4e3a\u53ea\u4f7f\u7528\u5230\u5f00\u53d1\u73af\u5883\uff0c\u6240\u4ee5\u5c31\u53ea\u8bbe\u7f6e\u4e86\u5f00\u53d1\u73af\u5883\u7684\uff1a  config/ init .py      # coding: UTF-8\n    import os\n\n\n    def load_config(mode=os.environ.get('MODE')):\n        \"\"\"Load config.\"\"\"\n        try:\n            if mode == 'PRODUCTION':\n                from .production import ProductionConfig\n                return ProductionConfig\n            elif mode == 'TESTING':\n                from .testing import TestingConfig\n                return TestingConfig\n            else:\n                from .development import DevelopmentConfig\n                return DevelopmentConfig\n        except ImportError:\n            from .default import Config\n            return Config\n\nconfig/development.py\n\n    # coding: utf-8\n    import os\n\n\n    class DevelopmentConfig(object):\n        \"\"\"Base config class.\"\"\"\n        # Flask app config\n        DEBUG = False\n        TESTING = False\n        SECRET_KEY = \"sample_key\"\n\n        # Root path of project\n        PROJECT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n\n        # Site domain\n        SITE_TITLE = \"twtf\"\n        SITE_DOMAIN = \"http://localhost:8080\"\n\n        # MongoEngine config\n        MONGODB_SETTINGS = {\n            'db': 'the_way_to_flask',\n            'host': '192.168.59.103',\n            'port': 27017\n        }\n\n## \u914d\u7f6e\u8fd0\u884c\u811a\u672c\n\n\u5230\u6b64\uff0c\u6211\u4eec\u7684\u5e94\u7528\u4ee3\u7801\u7b97\u662f\u5199\u5b8c\u4e86\uff0c\u7136\u540e\u5c31\u662f\u8fd0\u884c\u670d\u52a1\u5668\u4e86\uff0c\u8fd8\u662f\u4f7f\u7528 Flask-Script\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u914d\u7f6e manage.py\uff0c\u5185\u5bb9\u4e3a\uff1b\n\nmanage.py\n\n#!/usr/bin/env python\n# encoding: utf-8\nfrom flask_script import Manager\nfrom flask_script.commands import ShowUrls\n\nfrom application import create_app\n\nmanager = Manager(create_app)\nmanager.add_option('-c', '--config', dest='mode', required=False)\n\nmanager.add_command(\"showurls\", ShowUrls())\n\nif __name__ == \"__main__\":\n    manager.run()", 
            "title": "\u8bbe\u7f6e\u914d\u7f6e"
        }, 
        {
            "location": "/chapter012/#_2", 
            "text": "pyhton manage.py -c development runserver  \u5f53\u4f60\u770b\u5230\u4ee5\u4e0b\u8bed\u53e5\u7684\u65f6\u5019\u8bf4\u660e\u4f60\u7684\u670d\u52a1\u5668\u8fd0\u884c\u6210\u529f\u4e86\uff1a  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)", 
            "title": "\u8fd0\u884c\u670d\u52a1\u5668"
        }, 
        {
            "location": "/chapter012/#_3", 
            "text": "\u56e0\u4e3a\u73b0\u5728\u6570\u636e\u5e93\u4e2d\u662f\u6ca1\u6709\u7528\u6237\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u624b\u52a8\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u5148\uff0c\u5728\u7ba1\u7406\u540e\u53f0\u53ef\u4ee5\u6dfb\u52a0\uff1a  http://localhost:5000/admin/user/", 
            "title": "\u6dfb\u52a0\u7528\u6237"
        }, 
        {
            "location": "/chapter012/#_4", 
            "text": "\u767b\u5f55\uff1a  POST /auth/login HTTP/1.1\nHost: localhost:5000\n\n{\"username\": \"zhangsan\",\n \"password\": \"password\"}  \u54cd\u5e94\u5e94\u8be5\u662f\uff1a  {\n  \"email\": \"zhangsan@gmail.com\",\n  \"name\": \"zhangsan\",\n  \"role\": \"ADMIN\"\n}", 
            "title": "\u6d4b\u8bd5\u529f\u80fd\uff1a"
        }, 
        {
            "location": "/chapter013/", 
            "text": "\u4f7f\u7528 Gunicorn \u548c Nginx \u90e8\u7f72 Flask \u9879\u76ee\n\n\n\u5728\u5b9e\u9645\u7684\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u5f88\u5c11\u662f\u76f4\u63a5\u4f7f\u7528\u547d\u4ee4\uff1a\n\n\npython app.py\n\n\n\n\u8fd0\u884c Flask \u5e94\u7528\u63d0\u4f9b\u670d\u52a1\u7684\uff0c\u6b63\u5e38\u90fd\u4f1a\u96c6\u6210 WSGI Web\u670d\u52a1\u5668\u63d0\u4f9b\u670d\u52a1\uff0c\u800c\u5728\u4f17\u591a\u7684 WSGI Web \u670d\u52a1\u5668\u4e2d\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5206\u522b\u662f Gunicorn \u548c UWSGI\uff0c\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u4f1a\u4f7f\u7528 Nginx \u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u8fdb\u884c\u90e8\u7f72\u5e94\u7528\u3002\n\n\n\u672c\u6587\u56e0\u4e3a\u9700\u8981\u5b89\u88c5 Nginx\uff0c\u6240\u4ee5\u6587\u7ae0\u5185\u7684\u547d\u4ee4\u548c\u4f7f\u7528\u7684\u7cfb\u7edf\u76f8\u5173\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u547d\u4ee4\u4e0d\u591a\uff0c\u672c\u6587\u4f7f\u7528\u7684 \nUbuntu 16.04\n\uff0c\u56e0\u6b64\u5305\u7ba1\u7406\u8f6f\u4ef6\u662f \napt\n\uff0c\u5982\u679c\u4f7f\u7528\u7684 RedHat \u7cfb\u5217\u7684\u8bdd\uff0c\u90a3\u5b8c\u5168\u53ef\u4ee5\u7528 \nyum\n \u4ee3\u66ff\u3002\u5176\u4ed6\u7cfb\u5217\u7684\u7cfb\u7edf\u53ef\u4ee5\u67e5\u627e\u76f8\u5173\u6587\u6863\u5bfb\u627e\u4ee3\u66ff\u7ba1\u7406\u5de5\u5177\u3002\n\n\n\u5b89\u88c5\u7ec4\u4ef6\n\n\nsudo apt-get update\nsudo apt-get install python-pip python-dev nginx\n\npip install gunicorn \npip install flask\n\n\n\n\u8fd9\u91cc\u524d\u4e24\u53e5\u662f\u66f4\u65b0\u4e00\u4e0b\u8f6f\u4ef6\u6e90\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6211\u4eec\u7684 pip \u548c python \u4f9d\u8d56\u5e93\u5df2\u7ecf\u5b89\u88c5\u4e0a\u4e86\uff0c\u540c\u65f6\uff0c\u522b\u5fd8\u4e86\u5b89\u88c5\u53cd\u5411\u4ee3\u7406 Nginx\u3002\u540e\u9762\u4e24\u53e5\u5c31\u662f\u5b89\u88c5\u6211\u4eec\u5fc5\u5907\u7684 Gunicorn \u548c Flask Python \u5e93\u4e86\u3002\n\n\n\u4e0b\u8f7d\u4ee3\u7801\n\n\n\u56e0\u4e3a\u5728\u6211\u4eec\u7684\u524d\u6587\u4e2d\u5df2\u7ecf\u5199\u4e86\u4e00\u4e2a\u4ee3\u7801\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u7ee7\u7eed\u4f7f\u7528\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f7f\u7528\u65b9\u5f0f\u662f\uff1a\n\n\ngit clone git@github.com:luke0922/the-way-to-flask.git\ncd the-way-to-flask/code\npip install -r requirements.txt\npython manage.py runserver\n\n\n\n\u6b64\u65f6\uff0c\u6211\u4eec\u7684\u670d\u52a1\u5668\u5e94\u8be5\u662f\u5df2\u7ecf\u8fd0\u884c\u8d77\u6765\u4e86\uff0c\u4f46\u662f\uff0c\u9ed8\u8ba4 Ubuntu \u662f\u5f00\u542f\u4e86\u9632\u706b\u5899\u5c4f\u853d\u6240\u6709\u7aef\u53e3\u8bbf\u95ee\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6253\u5f00\u9632\u706b\u5899\u7aef\u53e3\uff0c\u5728 Ubuntu 16.04 \u4e2d\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n\n\nsudo ufw allow 5000\n\n\n\n\u73b0\u5728\uff0c\u5e94\u8be5\u53ef\u4ee5\u8bbf\u95ee\u6211\u4eec\u7684\u5e94\u7528\u4e86\uff0c\u5728\u547d\u4ee4\u884c\u4e0a\u6211\u4eec\u6572\u4e00\u4e0b\u8fd9\u4e2a\u547d\u4ee4\uff0c\u8bbf\u95ee\u4ee5\u4e0b WEB \u670d\u52a1\uff1a\n\n\nhttp://localhost:5000\n\n\n\n\u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\n\n\n\u521b\u5efa WSGI \u5207\u5165\u70b9\n\n\nvim wsgi.py\n\n\n\n\u91cc\u9762\u5185\u5bb9\u586b\uff1a\n\n\nfrom myproject import app\n\nif __name__ == \"__main__\":\n    app.run()\n\n\n\n\u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u547d\u4ee4\u8fd0\u884c\u4ee3\u7801\uff1a\n\n\ngunicorn --bind 0.0.0.0:5000 wsgi:app\n\n\n\n\u4f9d\u65e7\u8bbf\u95ee\u8fd9\u4e2a\u5730\u5740\u770b\u770b\uff1a\n\n\nhttp://localhost:5000\n\n\n\n\u5e38\u89c1 systemd Unit File\n\n\nvim /etc/systemd/system/app.service\n\n\n\n\u91cc\u9762\u7684\u5185\u5bb9\u5199\uff1a\n\n\n[Unit]\nDescription=Gunicorn instance to serve myproject\nAfter=network.target\n\n[Service]\nUser=www\nGroup=www\nWorkingDirectory=/home/www/myproject\nEnvironment=\"PATH=/home/www/myproject/myprojectenv/bin\"\nExecStart=/home/www/myproject/myprojectenv/bin/gunicorn --workers 3 --bind unix:myproject.sock -m 007 wsgi:app\n\n[Install]\nWantedBy=multi-user.target\n\n\n\n\u4fdd\u5b58\u9000\u51fa\uff0c\u7136\u540e\u5c1d\u8bd5\u4e00\u4e0b\u547d\u4ee4\uff1a\n\n\nsudo systemctl start app\nsudo systemctl enable app\n\n\n\n\u914d\u7f6e Nginx\n\n\n\u914d\u7f6eNginx\n\n\nsudo nano /etc/nginx/sites-available/myproject\n\n\n\n\u91cc\u9762\u5199\uff1a\n\n\nserver {\n    listen 80;\n    server_name server_domain_or_IP;\n\n     location / {\n        include proxy_params;\n        proxy_pass http://unix:/home/sammy/myproject/myproject.sock;\n    }\n}\n\n\n\n\u4fdd\u5b58\u4e4b\u540e\uff0c\u7528 nginx \u81ea\u5e26\u5de5\u5177\u9a8c\u8bc1\u4e00\u904d\n\n\nnginx -t\n\n\n\n\u5982\u679cok\u7684\u8bdd\u7136\u540e\u8ba9 nginx \u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e\n\n\nnginx -s reload\n\n\n\n\u5173\u95ed\u670d\u52a1\u5668\u7aef\u53e3\uff1a\n\n\n\n\nsudo ufw delete allow 5000\n\n\nsudo ufw allow 'Nginx Full'\n\n\n\n\n\u6b64\u65f6\u8bbf\u95ee\u670d\u52a1\u5668\u8bd5\u8bd5\uff1a\n\n\nhttp://192.168.59.103", 
            "title": "\u4f7f\u7528 Gunicorn \u548c Nginx \u90e8\u7f72\u9879\u76ee"
        }, 
        {
            "location": "/chapter013/#gunicorn-nginx-flask", 
            "text": "\u5728\u5b9e\u9645\u7684\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u5f88\u5c11\u662f\u76f4\u63a5\u4f7f\u7528\u547d\u4ee4\uff1a  python app.py  \u8fd0\u884c Flask \u5e94\u7528\u63d0\u4f9b\u670d\u52a1\u7684\uff0c\u6b63\u5e38\u90fd\u4f1a\u96c6\u6210 WSGI Web\u670d\u52a1\u5668\u63d0\u4f9b\u670d\u52a1\uff0c\u800c\u5728\u4f17\u591a\u7684 WSGI Web \u670d\u52a1\u5668\u4e2d\uff0c\u6bd4\u8f83\u5e38\u7528\u7684\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5206\u522b\u662f Gunicorn \u548c UWSGI\uff0c\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u4f1a\u4f7f\u7528 Nginx \u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u8fdb\u884c\u90e8\u7f72\u5e94\u7528\u3002  \u672c\u6587\u56e0\u4e3a\u9700\u8981\u5b89\u88c5 Nginx\uff0c\u6240\u4ee5\u6587\u7ae0\u5185\u7684\u547d\u4ee4\u548c\u4f7f\u7528\u7684\u7cfb\u7edf\u76f8\u5173\uff0c\u4f46\u662f\u8fd9\u6837\u7684\u547d\u4ee4\u4e0d\u591a\uff0c\u672c\u6587\u4f7f\u7528\u7684  Ubuntu 16.04 \uff0c\u56e0\u6b64\u5305\u7ba1\u7406\u8f6f\u4ef6\u662f  apt \uff0c\u5982\u679c\u4f7f\u7528\u7684 RedHat \u7cfb\u5217\u7684\u8bdd\uff0c\u90a3\u5b8c\u5168\u53ef\u4ee5\u7528  yum  \u4ee3\u66ff\u3002\u5176\u4ed6\u7cfb\u5217\u7684\u7cfb\u7edf\u53ef\u4ee5\u67e5\u627e\u76f8\u5173\u6587\u6863\u5bfb\u627e\u4ee3\u66ff\u7ba1\u7406\u5de5\u5177\u3002", 
            "title": "\u4f7f\u7528 Gunicorn \u548c Nginx \u90e8\u7f72 Flask \u9879\u76ee"
        }, 
        {
            "location": "/chapter013/#_1", 
            "text": "sudo apt-get update\nsudo apt-get install python-pip python-dev nginx\n\npip install gunicorn \npip install flask  \u8fd9\u91cc\u524d\u4e24\u53e5\u662f\u66f4\u65b0\u4e00\u4e0b\u8f6f\u4ef6\u6e90\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6211\u4eec\u7684 pip \u548c python \u4f9d\u8d56\u5e93\u5df2\u7ecf\u5b89\u88c5\u4e0a\u4e86\uff0c\u540c\u65f6\uff0c\u522b\u5fd8\u4e86\u5b89\u88c5\u53cd\u5411\u4ee3\u7406 Nginx\u3002\u540e\u9762\u4e24\u53e5\u5c31\u662f\u5b89\u88c5\u6211\u4eec\u5fc5\u5907\u7684 Gunicorn \u548c Flask Python \u5e93\u4e86\u3002", 
            "title": "\u5b89\u88c5\u7ec4\u4ef6"
        }, 
        {
            "location": "/chapter013/#_2", 
            "text": "\u56e0\u4e3a\u5728\u6211\u4eec\u7684\u524d\u6587\u4e2d\u5df2\u7ecf\u5199\u4e86\u4e00\u4e2a\u4ee3\u7801\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u7ee7\u7eed\u4f7f\u7528\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f7f\u7528\u65b9\u5f0f\u662f\uff1a  git clone git@github.com:luke0922/the-way-to-flask.git\ncd the-way-to-flask/code\npip install -r requirements.txt\npython manage.py runserver  \u6b64\u65f6\uff0c\u6211\u4eec\u7684\u670d\u52a1\u5668\u5e94\u8be5\u662f\u5df2\u7ecf\u8fd0\u884c\u8d77\u6765\u4e86\uff0c\u4f46\u662f\uff0c\u9ed8\u8ba4 Ubuntu \u662f\u5f00\u542f\u4e86\u9632\u706b\u5899\u5c4f\u853d\u6240\u6709\u7aef\u53e3\u8bbf\u95ee\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u6253\u5f00\u9632\u706b\u5899\u7aef\u53e3\uff0c\u5728 Ubuntu 16.04 \u4e2d\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a  sudo ufw allow 5000  \u73b0\u5728\uff0c\u5e94\u8be5\u53ef\u4ee5\u8bbf\u95ee\u6211\u4eec\u7684\u5e94\u7528\u4e86\uff0c\u5728\u547d\u4ee4\u884c\u4e0a\u6211\u4eec\u6572\u4e00\u4e0b\u8fd9\u4e2a\u547d\u4ee4\uff0c\u8bbf\u95ee\u4ee5\u4e0b WEB \u670d\u52a1\uff1a  http://localhost:5000  \u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c", 
            "title": "\u4e0b\u8f7d\u4ee3\u7801"
        }, 
        {
            "location": "/chapter013/#wsgi", 
            "text": "vim wsgi.py  \u91cc\u9762\u5185\u5bb9\u586b\uff1a  from myproject import app\n\nif __name__ == \"__main__\":\n    app.run()  \u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u547d\u4ee4\u8fd0\u884c\u4ee3\u7801\uff1a  gunicorn --bind 0.0.0.0:5000 wsgi:app  \u4f9d\u65e7\u8bbf\u95ee\u8fd9\u4e2a\u5730\u5740\u770b\u770b\uff1a  http://localhost:5000", 
            "title": "\u521b\u5efa WSGI \u5207\u5165\u70b9"
        }, 
        {
            "location": "/chapter013/#systemd-unit-file", 
            "text": "vim /etc/systemd/system/app.service  \u91cc\u9762\u7684\u5185\u5bb9\u5199\uff1a  [Unit]\nDescription=Gunicorn instance to serve myproject\nAfter=network.target\n\n[Service]\nUser=www\nGroup=www\nWorkingDirectory=/home/www/myproject\nEnvironment=\"PATH=/home/www/myproject/myprojectenv/bin\"\nExecStart=/home/www/myproject/myprojectenv/bin/gunicorn --workers 3 --bind unix:myproject.sock -m 007 wsgi:app\n\n[Install]\nWantedBy=multi-user.target  \u4fdd\u5b58\u9000\u51fa\uff0c\u7136\u540e\u5c1d\u8bd5\u4e00\u4e0b\u547d\u4ee4\uff1a  sudo systemctl start app\nsudo systemctl enable app", 
            "title": "\u5e38\u89c1 systemd Unit File"
        }, 
        {
            "location": "/chapter013/#nginx", 
            "text": "\u914d\u7f6eNginx  sudo nano /etc/nginx/sites-available/myproject  \u91cc\u9762\u5199\uff1a  server {\n    listen 80;\n    server_name server_domain_or_IP;\n\n     location / {\n        include proxy_params;\n        proxy_pass http://unix:/home/sammy/myproject/myproject.sock;\n    }\n}  \u4fdd\u5b58\u4e4b\u540e\uff0c\u7528 nginx \u81ea\u5e26\u5de5\u5177\u9a8c\u8bc1\u4e00\u904d  nginx -t  \u5982\u679cok\u7684\u8bdd\u7136\u540e\u8ba9 nginx \u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e  nginx -s reload  \u5173\u95ed\u670d\u52a1\u5668\u7aef\u53e3\uff1a   sudo ufw delete allow 5000  sudo ufw allow 'Nginx Full'   \u6b64\u65f6\u8bbf\u95ee\u670d\u52a1\u5668\u8bd5\u8bd5\uff1a  http://192.168.59.103", 
            "title": "\u914d\u7f6e Nginx"
        }
    ]
}